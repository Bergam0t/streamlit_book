# Exercise 3: Double Dash!!(boards)

You’re now going to create a dashboard in Streamlit.

Here is a link to the dataset.
[Link](https://github.com/hsma-programme/h6_7b_web_apps_1/tree/main/exercises/exercise_3)

You can use the starter code from <https://github.com/hsma-programme/h6_7b_web_apps_1/blob/main/exercises/exercise_3/starter_code.py>

:::{.callout-note collapse="true"}
### Click here to view the starter code

```{python}
import pandas as pd
import plotly.express as px
import geopandas
import matplotlib.pyplot as plt

###########################################################
# Display a plot of the medals won by a country over time
###########################################################

# ========================== #
chosen_country = "UK"
# ========================== #

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

# Turn the dataframe into a 'long' format for plotting - don't worry about what that means!
# What we'll end up with is a dataframe with columns for Year, Country, Medal Type (called 'variable')
# and number of medals (called 'value')
medals_per_country_per_year_long = medals_per_country_per_year.melt(id_vars=["Year", "Country", "NOC"])

# Create a line plot using the plotly express library
fig = px.line(
    # Filter our dataframe to just our 'chosen_country'
    medals_per_country_per_year_long[medals_per_country_per_year_long["Country"] == chosen_country],
    # The value to plot on the vertical axis - this corresponds to the number of medals
    y="value",
    # Plot the year on the x axis
    x="Year",
    # Plot the number of medals on the y axis
    color="variable",
    # Colour the medals as orange for bronze, silver for silver, gold for gold, and blue for total
    color_discrete_sequence=["orange", "silver", "gold", "blue"],
    # Add a title, using an f-string to include the name of the chosen country
    title=f"Medals Won over Time - {chosen_country}"
    )

# Display the plotly plot in an interactive window
fig.show()

##################################################################
# Display a table of just the medal winners in Athletics in 2012
##################################################################

# ========================== #
year = 2012
# ========================== #

# ========================== #
sport = "Athletics"
# ========================== #

country_medals_by_event = pd.read_csv("country_medals_by_event.csv")

country_medals_by_event_filtered = (
    country_medals_by_event[
        (country_medals_by_event["Sport"] == sport) &
        (country_medals_by_event["Year"] == year)
    ])

print(country_medals_by_event_filtered[['Event', 'Bronze', 'Silver', 'Gold']])

############################################################################
# Print out the country that won the most gold medals in the selected year
############################################################################
# Hint - this might make a nice metric card!

# ========================== #
year = 2012
# ========================== #

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

# Filter the dataframe to just the rows for the selected year
medals_per_country_per_year_filtered = (
    medals_per_country_per_year[medals_per_country_per_year["Year"] == year]
    )

# Sort by number of gold medals won in descending order (so the most medals is at the top of the table)
# Then just keep the first row (i.e. the one for the country with the most gold medals in the
# selected year)
top_gold_medal_winner_row = (
    medals_per_country_per_year
    .sort_values(["Gold"], ascending=False)
    .head(1)
    )

# Using an f string, populate the text with the number of gold medals this country won
print(f"The country that won the most medals in 2012 was" +
      f" {top_gold_medal_winner_row['Country'].values[0]}" +
      f" with {top_gold_medal_winner_row['Gold'].values[0]:.0f} gold medals.")


###########################################################################
# Print out the number of gold medals won by the selected country in 2012
###########################################################################
# Hint - this might make a nice metric card!

# ========================== #
year = 2012
# ========================== #

# ========================== #
chosen_country = "UK"
# ========================== #

# Filter the medals table down to the selected year and country
medals_chosen_country = (
    medals_per_country_per_year[
        (medals_per_country_per_year["Year"] == year) &
        (medals_per_country_per_year["Country"] == chosen_country)
        ]
    )

# Print out how many medals the country won
print(f"The {chosen_country} won {medals_chosen_country['Gold'].values[0]:.0f}" +
      f" gold medals in {year}.")

# Calculate the difference between this country and the top scorer
# Hint - this might be an interesting value to display as part of a metric card...
difference = medals_chosen_country['Gold'].values[0] - top_gold_medal_winner_row['Gold'].values[0]

# Print out a message with the difference
if difference < 0:
    print(f"This was {abs(difference):.0f} fewer" +
          f" than {top_gold_medal_winner_row['Country'].values[0]}")
# Unless the difference = 0, in which case the selected country is also the most successful country
else:
    print("They were the top country for gold medals in that year.")


#########################################
# Print a map of medal winners in 2012
#########################################

# ========================== #
year = 2012
# ========================== #

# ========================== #
selected_medal_type="Gold"
# ========================== #

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

country_outlines = geopandas.read_file("countries_outlines.geojson")

medals_per_country_per_year_gdf = pd.concat([
    pd.merge(country_outlines, medals_per_country_per_year, left_on="id", right_on="NOC", how="inner"),
    pd.merge(country_outlines, medals_per_country_per_year, left_on="name", right_on="Country", how="inner")
]).drop_duplicates()

fig, ax = plt.subplots(figsize=(15, 8))

ax = medals_per_country_per_year_gdf[medals_per_country_per_year_gdf["Year"] == year].plot(
    selected_medal_type, legend=True, ax=ax
    )

ax.axis('off')

plt.title(f"Number of {selected_medal_type} Medals in {year}")

fig.show()


###################################################
# Print out possible countries to select from for
# the next run of the script
###################################################

print("The countries you could choose from are: " +
      f"{medals_per_country_per_year['Country'].unique().tolist()}")

print(f"Choose a year between {medals_per_country_per_year['Year'].min()}" +
      f" and {medals_per_country_per_year['Year'].max()}")

print("The sports you could choose from are: " +
      f"{country_medals_by_event['Sport'].unique().tolist()}")
```
:::

Try to include at least

- a dataframe
- a graph or map
- a metric card
- a layout element (tabs, sidebar, columns)
- a user input for filtering the outputs (selectbox, slider, etc.)

If you have time, try adding in

- a download button for a dataframe
- a download button for a graph or map

We’ll work on this until 4:05.

Don’t forget to refer to the Streamlit book - all of the above are covered in there.

I’ll be asking each group to share their code afterwards - we will upload your code to a repository and I'll publish each app on Streamlit Community Cloud so you can see each other's dashboards easily.

## Dataset Overview

Several dataframes are provided, as well as a geojson file of country outlines for mapping purposes.

::: {.panel-tabset}
### athlete_details_eventwise.csv

```{python}
import pandas as pd

athlete_details_eventwise = pd.read_csv("athlete_details_eventwise.csv")

athlete_details_eventwise.head(5)
```

### country_medals_by_event.csv

```{python}
import pandas as pd

country_medals_by_event = pd.read_csv("country_medals_by_event.csv")

country_medals_by_event.head()
```

### games_cities.csv

```{python}
import pandas as pd

games_cities = pd.read_csv("games_cities.csv")

games_cities.head()
```

### medals_per_country_per_year.csv

```{python}
import pandas as pd

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

medals_per_country_per_year.head()
```

### countries_outlines.geojson

```{python}
import geopandas

country_outlines = geopandas.read_file("countries_outlines.geojson")

country_outlines.plot()
```

:::


## Code Snippets

So you don't have to spend too much time focussing on data manipulation and visualisation, here are a range of premade dataframes, graphs and maps you could choose to display in your app.

### Dataframes

::: {.panel-tabset}

#### Medals per Country by Year

```{python}
import pandas as pd

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

medals_per_country_per_year.sort_values("Total", ascending=False).head(15)
```


#### Medals per Country by Year - Sorted by Multiple Columns

```{python}
import pandas as pd

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

medals_per_country_per_year.sort_values(["Gold", "Total"], ascending=True).head(15)
```

#### Total Medals per Country - All Time - Sorted by Single Column

```{python}
import pandas as pd

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

total_medals_all_time = (
    medals_per_country_per_year.drop(columns=["Year", "NOC"])
    .groupby('Country').sum()
    .reset_index()
    .sort_values('Total', ascending=False)
    )

total_medals_all_time.head(15)
```

#### Medal Winners per event per year

```{python}
import pandas as pd

medals_by_event = pd.read_csv("country_medals_by_event.csv")
medals_by_event

```

#### Medal Winners per event per year - single sport and year

```{python}
import pandas as pd

selected_year = 2012
selected_sport = "Judo"

medals_by_event = pd.read_csv("country_medals_by_event.csv")
medals_by_event

```

#### Athletes in most events per year

```{python}
import pandas as pd

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

most_events_per_year_by_athlete = athlete_statistics.value_counts(['Name', 'Country', 'Year']).reset_index()

most_events_per_year_by_athlete.head(15)
```

#### Athletes in most events per year - Details on Athlete with Most Events

```{python}
import pandas as pd

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

most_events_per_year_by_athlete = athlete_statistics.value_counts(['Name', 'Country', 'Year']).reset_index()

athlete_name_most_events = most_events_per_year_by_athlete.head(1)['Name'].values[0]
athlete_name_most_events_year = most_events_per_year_by_athlete.head(1)['Year'].values[0]

athlete_statistics[(athlete_statistics["Name"] == athlete_name_most_events) &
                    (athlete_statistics["Year"] == athlete_name_most_events_year)].head(15)
```

#### Athlete with most total events competed in

```{python}
import pandas as pd

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

athlete_statistics.value_counts(['Name', 'Sex', 'Country']).reset_index()
```

#### Filtering to a single athlete - Exact Match

```{python}
import pandas as pd

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

chosen_athlete = "Simone Arianne Biles"

athlete_statistics[athlete_statistics["Name"] == chosen_athlete]
```

#### Filtering to a single athlete - Partial Match

```{python}
import pandas as pd

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

search_string = "Ben"

athlete_statistics[athlete_statistics["Name"].str.contains(search_string)]
```

#### List of Events in Year

```{python}
import pandas as pd

selected_year = 2012

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

athlete_statistics[athlete_statistics["Year"] == selected_year][['Sport', 'Event']].drop_duplicates().reset_index(drop=True).head(15)
```

#### Count of Events in Year

```{python}
import pandas as pd

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

athlete_statistics[athlete_statistics["Year"] == selected_year][['Sport', 'Event']].drop_duplicates().value_counts('Sport').reset_index().head(15)
```

:::

### Useful Lists and Info From Datasets
::: {.panel-tabset}

#### List of Sports

```{python}
import pandas as pd

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

all_sports = athlete_statistics["Sport"].drop_duplicates().tolist()

print(all_sports)
```

#### List of Events in a particular year

```{python}
import pandas as pd

selected_year = 2012

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

athlete_statistics_year = athlete_statistics[athlete_statistics["Year"] == selected_year]

all_events = athlete_statistics_year["Event"].drop_duplicates().tolist()

print(all_events)
```

#### Earliest and Latest Years in Datasets

```{python}
import pandas as pd

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

earliest_year = medals_per_country_per_year["Year"].min()

latest_year = medals_per_country_per_year["Year"].max()

print(f"The earliest year in the dataset is {earliest_year}")

print(f"The latest year in the dataset is {latest_year}")
```

#### Oldest and Youngest Athletes in given year in given event

```{python}
import pandas as pd

selected_year = 2012
selected_sport = "Gymnastics"

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

athlete_statistics_filtered = athlete_statistics[(athlete_statistics["Year"] == selected_year) & (athlete_statistics["Sport"] == selected_sport)]

youngest_athlete = athlete_statistics_filtered["Age"].min()

oldest_athlete = athlete_statistics_filtered["Age"].max()

print(f"The youngest athlete who competed in {selected_sport} in {selected_year} was {youngest_athlete:.0f} years old.")

print(f"The oldest athlete who competed in {selected_sport} in {selected_year} was{oldest_athlete:.0f} years old.")
```

:::

### Plots

::: {.panel-tabset}

#### Single Medal Type - per Country by Year

```{python}
import pandas as pd
import plotly.express as px

selected_countries = ["UK", "USA", "Canada", "Australia", "China", "Russia", "France", "Germany", "Italy"]

selected_medal_type = "Bronze"

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

px.line(medals_per_country_per_year[medals_per_country_per_year["Country"].isin(selected_countries)],
        x="Year", y=selected_medal_type, color="Country",
        title=f"{selected_medal_type} medals over time - subset of countries")
```

#### Single Medal Type - per Country by Year - Single Country

```{python}
import pandas as pd
import plotly.express as px

chosen_country = "UK"
selected_medal_type = "Bronze"

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

px.line(medals_per_country_per_year[medals_per_country_per_year["Country"] == chosen_country],
        y=selected_medal_type, x="Year",
        title=f"{selected_medal_type} medals for {chosen_country} over time")
```

#### All Medal Types - Single Country

```{python}
import pandas as pd
import plotly.express as px

chosen_country = "UK"

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

medals_per_country_per_year_long = medals_per_country_per_year.melt(id_vars=["Year", "Country", "NOC"])

px.line(medals_per_country_per_year_long[medals_per_country_per_year_long["Country"] == chosen_country],
        y="value", x="Year", color="variable",
        color_discrete_sequence=["orange", "silver", "gold", "blue"],
        title=f"Medals Won over Time - {chosen_country}")
```

#### Total Medals per Country - Bar Chart of Summed Values - Limiting Number of Countries

```{python}
import pandas as pd
import plotly.express as px

rows_to_display = 10

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

total_medals_all_time = (
    medals_per_country_per_year.drop(columns=["Year", "NOC"])
    .groupby('Country').sum()
    .reset_index()
    .sort_values('Total', ascending=False)
    )

px.bar(total_medals_all_time.head(rows_to_display), x='Country', y='Total',
       title=f"Total Number of Medals since 1896 - Top {rows_to_display} Countries")
```


#### Total Medals per Country - Stacked Bar Chart

```{python}
import pandas as pd
import plotly.express as px

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

total_medals_all_time = (
    medals_per_country_per_year.drop(columns=["Year", "NOC"])
    .groupby('Country').sum()
    .reset_index()
    .sort_values('Total', ascending=False)
    )

total_medals_all_time_long = total_medals_all_time.drop(columns='Total').melt(id_vars="Country")

px.bar(total_medals_all_time_long,
        x="Country", y="value", color="variable",
        color_discrete_sequence=["orange", "silver", "gold"]
        )
```

#### Total Medals per Country - Stacked Bar Chart as Percentage of Total

```{python}
import pandas as pd
import plotly.express as px

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

total_medals_all_time = (
    medals_per_country_per_year.drop(columns=["Year", "NOC"])
    .groupby('Country').sum()
    .reset_index()
    .sort_values('Total', ascending=False)
    )

total_medals_all_time_long = total_medals_all_time.drop(columns='Total').melt(id_vars="Country")

total_medals_all_time_long['Total'] = total_medals_all_time_long['value'].groupby(total_medals_all_time_long['Country']).transform('sum')

total_medals_all_time_long['Percentage of Total'] = total_medals_all_time_long['value'] / total_medals_all_time_long['Total']

px.bar(total_medals_all_time_long[total_medals_all_time_long['Country'].isin(total_medals_all_time_long.head(rows_to_display)['Country'].values)],
       x="Country", y="Percentage of Total", color="variable",
       color_discrete_sequence=["orange", "silver", "gold"],
       title=f"Breakdown of Medals by type - Top {rows_to_display} countries by total all-time medal count")

```

#### Athlete Gender Balance by Year - Stacked Bar Chart (Parts of a Whole)

```{python}
import pandas as pd
import plotly.express as px

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

distinct_athletes_per_year = athlete_statistics[['Name', 'Year','Country','Sex', 'Age', 'Height', 'Weight']].drop_duplicates()

athlete_counts_by_sex_by_year = distinct_athletes_per_year.value_counts(['Sex', 'Year']).reset_index()

athlete_counts_by_sex_by_year['total_athletes_both_sex_in_year'] = athlete_counts_by_sex_by_year['count'].groupby(athlete_counts_by_sex_by_year['Year']).transform('sum')

athlete_counts_by_sex_by_year['Percentage of Athletes'] = athlete_counts_by_sex_by_year['count'] / athlete_counts_by_sex_by_year['total_athletes_both_sex_in_year']

px.bar(athlete_counts_by_sex_by_year,
       x="Year", y="Percentage of Athletes", color="Sex",
       title=f"Change in Gender Split Over Time")

```

#### Events per Sport Per Year

```{python}
import pandas as pd
import plotly.express as px

athlete_statistics = pd.read_csv("athlete_details_eventwise.csv")

selected_sport = "Gymnastics"

athlete_statistics_sport = athlete_statistics[athlete_statistics["Sport"] == selected_sport]

events_per_year_by_sport = (
    athlete_statistics_sport[['Year', 'Event']]
    .drop_duplicates()
    .value_counts(['Year'])
    .reset_index()
)

px.line(events_per_year_by_sport.sort_values("Year"), x="Year", y="count",
            markers=True, title=f"{selected_sport} Events Per Olympics",
            range_x=[athlete_statistics.Year.min(), athlete_statistics.Year.max()])

```

:::


### Maps

The provided maps are imperfect due to the complexity of matching up country names across the olympic dataset and an unexplained bug affecting the colouring of certain countries in the interactive map.

For the purpose of the exercise, don't worry about the slight issues with the map - the focus is just on displaying a map successfully within your dashboard.

::: {.panel-tabset}

#### Number of Medals by Location - Static Map

```{python}
import pandas as pd
import geopandas
import matplotlib.pyplot as plt

selected_year = 2012
selected_medal_type="Bronze"

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

country_outlines = geopandas.read_file("countries_outlines.geojson")

medals_per_country_per_year_gdf = pd.concat([
    pd.merge(country_outlines, medals_per_country_per_year, left_on="id", right_on="NOC", how="inner"),
    pd.merge(country_outlines, medals_per_country_per_year, left_on="name", right_on="Country", how="inner")
]).drop_duplicates()

fig, ax = plt.subplots(figsize=(15, 8))
ax = medals_per_country_per_year_gdf[medals_per_country_per_year_gdf["Year"] == selected_year].plot(
    "Gold", legend=True, ax=ax
    )
ax.axis('off')
plt.title(f"Number of {selected_medal_type} Medals in {selected_year}")

```

#### Number of Medals by Location - Interactive Map

```{python}
import pandas as pd
import geopandas
import folium

selected_year = 2012
selected_medal_type="Bronze"

medals_per_country_per_year = pd.read_csv("medals_per_country_per_year.csv")

country_outlines = geopandas.read_file("countries_outlines.geojson")

medals_per_country_per_year_gdf = pd.concat([
    pd.merge(country_outlines, medals_per_country_per_year, left_on="id", right_on="NOC", how="inner"),
    pd.merge(country_outlines, medals_per_country_per_year, left_on="name", right_on="Country", how="inner")
]).drop_duplicates()

#create base map
world_map_medals = folium.Map(
    location=[50.71671, -3.50668],
    zoom_start=2,
    tiles='cartodbpositron'
    )

# create and add choropleth map
choropleth = folium.Choropleth(
    geo_data=medals_per_country_per_year_gdf[medals_per_country_per_year_gdf["Year"] == selected_year], # dataframe with geometry in it
    data=medals_per_country_per_year_gdf[medals_per_country_per_year_gdf["Year"] == selected_year], # dataframe with data in - may be the same dataframe or a different one
    columns=['name', 'Gold'], # [key (field for geometry), field to plot]
    key_on='feature.properties.Country'
    )

choropleth = choropleth.add_to(world_map_medals)

choropleth = choropleth.geojson.add_child(
    folium.features.GeoJsonTooltip(
        ['name', 'Gold'],
        labels=True
        )
)

world_map_medals

```


:::
