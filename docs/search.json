[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HSMA - Web Apps with Streamlit",
    "section": "",
    "text": "Preface\nWelcome to this book accompanying the Streamlit sessions of module 7 of the HSMA programme.\nIn this module we introduce the Streamlit framework for web app development.\nStreamlit is a popular Python web framework that allows powerful and professional looking data apps to be created in hours instead of weeks.\nIn this book, we will introduce some of the key features of Streamlit and how to start putting them together to make more complex apps.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#stlite",
    "href": "index.html#stlite",
    "title": "HSMA - Web Apps with Streamlit",
    "section": "stlite",
    "text": "stlite\nMany examples throughout this book use the stlite framework and the stlite-quarto extension, which allows running of streamlit apps directly on the browser of the reader rather than hosting each app remotely.\nThis does mean that the app examples within each page do take a while to load, and you may not want to read this book cover-to-cover if you are on, say, a mobile network - each example will load several megabytes of data to be able to render.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "HSMA - Web Apps with Streamlit",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\nDatasets\n\nName Popularity\nThe name popularity dataset used in several examples was created by\n\n\nPalmer Penguins\nThe palmer penguins dataset is loaded via the palmerpenguins library available here. Credit goes to Muhammad Chenariyan Nakhaee for the Python port, and Allison Horst, Alison Hill, and Kristen Gorman for the original dataset and R package.\nHorst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "hello_world_streamlit.html",
    "href": "hello_world_streamlit.html",
    "title": "1  Hello World (Wide Web)!",
    "section": "",
    "text": "1.1 Previewing your app\nWhen you are writing streamlit apps from within your IDE - such as vscode - you will need to run some extra code to preview your app.\nFirst, you must make sure you save your app!\nLet’s save our app as main.py.\nThen we need to open a terminal.\nIn the terminal, we then run the command streamlit run main.py\nThis will spin up a temporary server to run your app from.\nYour app will then automatically open in a browser window in your default browser.\nIf we change and save our source file, like so…\nOur running app will recognise that there has been a change and give us the option to rerun to incorporate the new change without having to close and restart our temporary server.\nThis is really handy as it allows us to rapdily tweak and iterate our Streamlit apps!\nYou can also just use the refresh button in your browser if you would prefer.\nThe ‘always rerun’ option will mean that changes made to your source file will automatically trigger a rerun/refresh without you having to do it manually - it’s up to you if that’s something you’d prefer.",
    "crumbs": [
      "An Introduction to Streamlit",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Hello World (Wide Web)!</span>"
    ]
  },
  {
    "objectID": "hello_world_streamlit.html#knowledge-check",
    "href": "hello_world_streamlit.html#knowledge-check",
    "title": "1  Hello World (Wide Web)!",
    "section": "1.2 Knowledge Check!",
    "text": "1.2 Knowledge Check!\nWhat command do you use to run a streamlit file called main.py on your computer? run streamlit serverrun streamlit main.pystreamlit run main.pystreamlit activate\nWhat’s the standard import for the streamlit library? import streamlitimport streamlit as stfrom streamlit import stimport st as streamlit\nHow do you create a title in streamlit? st.title(Welcome to my app!)streamlit_title(‘Welcome to my app!’)st.title(‘Welcome to my app!’)title(‘Welcome to my app!’)",
    "crumbs": [
      "An Introduction to Streamlit",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Hello World (Wide Web)!</span>"
    ]
  },
  {
    "objectID": "loading_data.html",
    "href": "loading_data.html",
    "title": "2  An Introduction to Loading and Displaying Data",
    "section": "",
    "text": "Streamlit apps are just like standard Python scripts in a lot of ways.\nThis means that most of the standard methods we are used to for loading in data files will work!\nAs people working with data, much of what we want to load in is likely to be is data in a tabular format, like an Excel file or Google Sheet.\nLet’s start by loading in and displaying a simple csv dataset.\n\n\n\n\n\n\nTip\n\n\n\nst.write() is a handy command.\nWhen you pass a variable to it - like some data you’ve loaded in and saved as a Python variable - it will automatically work out a good way to display it.\nOther functions that we talk about in later chapters give you more control over exactly how data or files are displayed - but st.write() can often be a useful starting point.\n\n\n\n1import pandas as pd\n2import streamlit as st\n\n3st.title(\"Loading in a data file from a publically-accessible csv\")\n\n4url = 'https://files.catbox.moe/otqf4i.csv'\n5dataframe = pd.read_csv(url)\n\n6st.write(dataframe)\n\n7st.write(\"This is some text\")\n\n8st.write(123)\n\n9st.write(\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Felis_catus-cat_on_snow.jpg/\")\n\n\n1\n\nWe are going to be loading in and displaying some tabular data that’s stored as a .csv file, so we need to load in pandas. We choose to use the standard alias ‘pd’ for it.\n\n2\n\nWe then load in streamlit. The standard alias is st - this is useful as in more complex apps we’ll refer to the streamlit library a lot of times!\n\n3\n\nNext we add a title to our app. This will appear at the top of the page in large text. We pass the title to the st.title() function as a string.\n\n4\n\nWe then pass in a url for a dataframe. Alternatively, we could point to a dataframe stored locally on our machine, just like with a normal Python script - we’ll talk more about how that would work when we deploy our app to the web in a later chapter.\n\n5\n\nWe pass the url (or the local filepath) to our pd.read_csv() function - we could specify some additional arguments here if we wanted to.\n\n6\n\nWe use the st.write() function to prompt streamlit to display the dataframe, passing the variable we stored the dataframe into to the function.\n\n7\n\nWe can also pass in a text string to st.write() to make it display in our app.\n\n8\n\nThis also works with numbers…\n\n9\n\n… and web links.\n\n\n\n\nLet’s take a look at how this app will look in the live Streamlit app below.\n\n\n\n\n\n\n\nNote\n\n\n\nIn later chapters, we will learn more about loading in data, including\n\nloading in other data types, like images and videos\nallowing users to upload their own data\n‘caching’ data to prevent it being reloaded unnecessarily\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe focus of this book is on giving you the tools to create simple Streamlit apps. For this, we will mainly focus on using csv files that are stored on the web or locally, or are uploaded by users. In other cases, we will look at data that is generated by simply running the app, as in the case of discrete event simulation apps where the act of running it produces the data for the graphs and tables that we want to analyse!\nHowever, in real-world usage, there may be some instances where connecting to a database may be required to allow automated access to data without requiring it to be passed to the app, rather than relying on intermediate exports to formats like csv from the database.\nConnecting directly to a production database is certainly possible and can be done safely and securely - but beyond the scope of the first version of the book.\nIf this is your first time working with streamlit, it is highly recommended to work through the book first to learn the core concepts of streamlit apps. Building a proof of concept version of your app with a .csv export or dummy dataset can be done before worrying about the task of connecting to a data source - and often a good proof of concept will provide the motivation within your organisation to unblock the things that may make connecting to data sources difficult!\nStreamlit does provide tools and guidance around connecting to data sources for apps that are going into production; to learn more about connecting to other data sources, like SQL databases, you can take a look at this page from the streamlit documentation.\nThis page gives an overview of how to connect to a range of different SQL database types, public and private google sheets, and more.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An Introduction to Loading and Displaying Data</span>"
    ]
  },
  {
    "objectID": "text_markdown_and_titles.html",
    "href": "text_markdown_and_titles.html",
    "title": "3  Text, Markdown, and Titles",
    "section": "",
    "text": "3.1 Text Types",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Text, Markdown, and Titles</span>"
    ]
  },
  {
    "objectID": "text_markdown_and_titles.html#text-types",
    "href": "text_markdown_and_titles.html#text-types",
    "title": "3  Text, Markdown, and Titles",
    "section": "",
    "text": "3.1.1 Titles\n\nst.title(\"This is a title\")\n\n\n\n3.1.2 Subheaders\n\nst.subheader(\"This is a subheader\")\n\n\n\n3.1.3 Text\n\nst.text(\"This is text displayed with st.text\")\n\n\nst.write(\"This is text displayed with st.write\")\n\n\n\n3.1.4 Interactive Examples",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Text, Markdown, and Titles</span>"
    ]
  },
  {
    "objectID": "text_markdown_and_titles.html#markdown",
    "href": "text_markdown_and_titles.html#markdown",
    "title": "3  Text, Markdown, and Titles",
    "section": "3.2 Markdown",
    "text": "3.2 Markdown\n\nimport streamlit as st\n\nst.markdown(\"# This is header level 1\")\n\nst.markdown(\"## This is header level 2\")\n\nst.markdown(\"### This is header level 3\")\n\nst.markdown(\"#### This is header level 4\")\n\nst.markdown(\"##### This is header level 5\")\n\nst.markdown(\"This is standard text\")\n\nst.markdown(\"You can use emojis :sunglasses:\")\n\nst.markdown(\"Or Google material icons :material/favorite:\")\n\nst.markdown(\"You can colour text :red[text to be colored]\")\n\nst.markdown(\"Or colour the background of text :blue-background[text to be colored]\")\n\nst.markdown(\"\"\"\nYou can also do multiline text.\n\nThis allows you to more easily do multi-line text.\nNotice\nthe\nimpact\n\nof different numbers of newlines between the lines.\n\"\"\")",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Text, Markdown, and Titles</span>"
    ]
  },
  {
    "objectID": "images_and_videos.html",
    "href": "images_and_videos.html",
    "title": "4  Images and Videos",
    "section": "",
    "text": "4.1 Images\nImages can be displayed using the st.image() command.\nYou can use\nAdditional parameters allow you to specify\nSee details of these options in the documentation here.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Images and Videos</span>"
    ]
  },
  {
    "objectID": "images_and_videos.html#images",
    "href": "images_and_videos.html#images",
    "title": "4  Images and Videos",
    "section": "",
    "text": "local images (e.g. an image on your local drive) by passing a filepath that is relative to where your .py file is.\n\nnote that you will have to make sure that the file is available in the same relative position when you deploy your app.\ne.g. st.image(\"resources/cover_image_robot.jpeg\")\n\nweb-based images via a URL\n\ne.g. st.image(\"https://upload.wikimedia.org/wikipedia/en/d/d2/Back_to_the_Future.jpg\")\n\n\n\n\nthe image width\na caption\nwhether the image should auto-scale to the width of the page element it is in (e.g. a column)",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Images and Videos</span>"
    ]
  },
  {
    "objectID": "images_and_videos.html#videos",
    "href": "images_and_videos.html#videos",
    "title": "4  Images and Videos",
    "section": "4.2 Videos",
    "text": "4.2 Videos\nVideos can be displayed using the st.video() command.\nYou can use\n\nlocal videos (e.g. a video file on your local drive) by passing a filepath that is relative to where your .py file is.\n\nnote that you will have to make sure that the file is available in the same relative position when you deploy your app.\ne.g. st.video(\"resources/my_instruction_video.mp4\")\n\nweb-based videos via a URL, including those hosted on youtube\n\ne.g. st.video(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n\n\nAdditional parameters allow you to specify\n\nstart time\nend time\nlooping\nsubtitles\nwhether audio should play\nwhether the video should automatically play\nwhether the video should loop after finishing\n\nSee details of these options in the documentation here.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Images and Videos</span>"
    ]
  },
  {
    "objectID": "images_and_videos.html#interactive-examples",
    "href": "images_and_videos.html#interactive-examples",
    "title": "4  Images and Videos",
    "section": "4.3 Interactive Examples",
    "text": "4.3 Interactive Examples",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Images and Videos</span>"
    ]
  },
  {
    "objectID": "warnings_errors_success_messages.html",
    "href": "warnings_errors_success_messages.html",
    "title": "5  Info, Success, Warning and Error Boxes",
    "section": "",
    "text": "5.1 Icons\nAll of the above can also use optional icons.\nThese icons can either be emojis or icons from Google’s material-ui library.\nTo do this, you can just pass the icon to the icon argument.\nimport streamlit as st\n\nst.success(\"This is a good message!\", icon=\"🚨\")\n\nst.warning(\"This is a not so good, but not catastrophic, message...\", icon=\":material/bolt:\")\n\nst.error(\"This is a bad message!\", icon=\"🔥\")\n\nst.info(\"This is just something we wanted to notify you about.\", icon=\":material/thumb_up:\")",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Info, Success, Warning and Error Boxes</span>"
    ]
  },
  {
    "objectID": "warnings_errors_success_messages.html#using-conditional-logic-with-error-messages",
    "href": "warnings_errors_success_messages.html#using-conditional-logic-with-error-messages",
    "title": "5  Info, Success, Warning and Error Boxes",
    "section": "5.2 Using conditional logic with error messages",
    "text": "5.2 Using conditional logic with error messages\nOften you will want to display a different message depending on a user’s input or something similar.\nHere’s an example where the user’s input is checked to see if it can be divided exactly by 5. If it cannot, an error message is displayed. If it can be, a success message is displayed.\n\nimport streamlit as st\n\nusers_number = st.number_input(\"Please enter a number that can be divided by 5 without leaving a remainder.\")\n\nif users_number % 5 == 0:\n    st.success(\"Great!\")\n\nelse:\n    st.error(\"That's not a number that can be divided exactly by 5! Try again.\")",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Info, Success, Warning and Error Boxes</span>"
    ]
  },
  {
    "objectID": "dataframes.html",
    "href": "dataframes.html",
    "title": "6  Dataframes",
    "section": "",
    "text": "6.1 st.table()\nLet’s start with st.table.\nimport pandas as pd\nimport streamlit as st\n\nst.title(\"Most common names per year\")\n\nurl = 'https://files.catbox.moe/eor4ta.csv'\n\n1name_lookup_df = pd.read_csv(url)\n\nname_lookup_df = (name_lookup_df\n2    .melt(id_vars=[\"Name\", \"Gender\"])\n3    .dropna()\n4    .rename(columns={\"variable\": \"Year\", \"value\": \"Rank\"})\n )\n\nname_lookup_df = (\n5    name_lookup_df[name_lookup_df[\"Rank\"] == 1]\n6    .pivot(values=\"Name\", index=\"Year\", columns=\"Gender\")\n    )\n\n7st.table(name_lookup_df)\n\n\n1\n\nAs before, we pass in the url of the dataframe to the pandas .read_csv() function.\n\n2\n\nWhile this isn’t directly related to the streamlit aspect of the display of the dataframe - you can skip to point 7 for that - it’s worth noting that you can choose to do some processing and manipulation of your data from within your Streamlit app. Here we first convert our dataframe from a ‘wide’ to a ‘long’ format with the melt function…\n\n3\n\n… then remove any rows with missing values…\n\n4\n\n… then rename the ‘variable’ column to ‘Year’ and the ‘value’ columns to ‘Rank’.\n\n5\n\nNext, we filter the dataframe to only contain rows where the ‘Rank’ is equal to 1 - i.e. we just want the top ranked name for each year.\n\n6\n\nFinally, we make our dataframe wider again, making a column for ‘M’ and a column for ‘F’, with the years forming the index of the dataframe and the most popular name in each year being the cell.\n\n7\n\nFinally, we make use of the st.table() function to display our final dataframe as a non-interactie table.\nst.table gives a basic, non-interactive table.\nThis can be useful when we don’t want users to be able to do things like sort the dataframe columns.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Dataframes</span>"
    ]
  },
  {
    "objectID": "dataframes.html#st.dataframe",
    "href": "dataframes.html#st.dataframe",
    "title": "6  Dataframes",
    "section": "6.2 st.dataframe()",
    "text": "6.2 st.dataframe()\nst.dataframe gives more interactivity by default.\nThere are also more ways in st.dataframe than st.table in which we can tweak the display of the final data, which we go on to later.\n\nimport pandas as pd\nimport streamlit as st\n\nst.title(\"Most common names per year\")\n\nurl = 'https://files.catbox.moe/eor4ta.csv'\n\nname_lookup_df = (\n    pd.read_csv(url)\n    .melt(id_vars=[\"Name\", \"Gender\"])\n    .dropna()\n    .rename(columns={\"variable\": \"Year\", \"value\": \"Rank\"})\n1)\n\n2st.dataframe(name_lookup_df)\n\n\n1\n\nOnce again, we load in data from a url, make it long, remove any missing values, and rename the columns to something more user-friendly.\n\n2\n\nNext, we pass in our dataframe.\n\n\n\n\n\nA simple search functionality is available when hovering over it, as well as the option to make the table take up the full screen.\n\n\n6.2.1 Polishing the display of different data types with the column API\nThe column configuration API is a powerful way to enhance the display of data tables in Streamlit.\nThis allows you to change the displayed column name without having to rename it via Pandas commands, but it also gives more control over how columns display.\nFor example, you can set a numeric column to include a prefix or suffix, or to add a comma to break up long numbers.\nYou can set links to be clickable, images to preview, and add things like sparklines and progress bars.\nLet’s build up a simple dataset manually so we can explore the use of some of these values.\n\nimport streamlit as st\nimport pandas as pd\n\nst.title(\"Column Configuration API Demonstration\")\n\ndata_df = pd.DataFrame(\n    {\n        \"project\": [\"Project 1\", \"Project 2\", \"Project 3\", \"Project 4\"],\n        \"project_mascot\": [\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Felis_catus-cat_on_snow.jpg/1920px-Felis_catus-cat_on_snow.jpg\", \"https://upload.wikimedia.org/wikipedia/commons/2/25/Siam_lilacpoint.jpg\",\n        \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Orange_tabby_cat_sitting_on_fallen_leaves-Hisashi-01A.jpg/800px-Orange_tabby_cat_sitting_on_fallen_leaves-Hisashi-01A.jpg\", \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Sheba1.JPG/800px-Sheba1.JPG\"],\n        \"progress\": [70, 40, 10, 100],\n        \"logged_minutes\": [1040, 700, 90, 830],\n        \"client_link\": [\"https://www.morgensternsnyc.com/\", \"https://www.thelittleicecreamshop.com/\",  \"https://www.fredericksicecream.co.uk/\", \"https://www.solleys.co.uk/\"]\n\n1    }\n2).set_index(\"project\")\n\n\nst.dataframe(\n3    data_df,\n4    column_config={\n5        \"progress\": st.column_config.ProgressColumn(\n6            \"Project Progress\",\n7            help=\"The % of project tasks completed\",\n8            format=\"%f%\",\n9            min_value=0,\n            max_value=100, #\n        ),\n10        \"project_mascot\": st.column_config.ImageColumn(\n            \"Mascot\",\n            help=\"The cat mascot of this project\"\n        ),\n11         \"client_link\": st.column_config.LinkColumn(\n            \"Client Website Link\",\n            help=\"Link to the website of the client\",\n12            display_text=\"Open link\"\n        ),\n13         \"logged_minutes\": st.column_config.NumberColumn(\n            \"Minutes Logged on Project\",\n            help=\"Minutes Logged for Client Billing\"\n                    )\n    }\n)\n\n\n1\n\nThis time we are building a dataframe from scratch, passing in a dictionary where the keys will form the column names and the lists associated with the keys will be the values.\n\n2\n\nWe set ‘project’ - one of the provided columns in our dictionary - to be the index of the dataframe.\n\n3\n\nAs before, we pass in the dataframe as the first argument to st.dataframe.\n\n4\n\nTo the column_config argument we pass a dictionary, where the keys again correspond to the column names but the values are a streamlit column_config type with a number of optional arguments.\n\n5\n\nThe ProgressColumn type creates a small progress bar, which can be useful for displaying progress towards a percentage of completion or a total number of values. All values in the progress column must have the same maximum.\n\n6\n\nThe first argument to a st.column_config is the column title to display to the user, allowing your columns to have polished-looking names without having to adjust the underlying dataframe, allowing you to more easily continue working with the dataframe itself in later calculations.\n\n7\n\nThe value passed to the ‘help’ argument will appear when the user hovers over the column name.\n\n8\n\nThe format argument adjusts the way in which the number displays; here, for example, %f indicates it’s should display as a float (decimal) number, with the second % sign indicating a % symbol should be displayed after the number. More details about the available formats can be found on the Streamlit website.\n\n9\n\nThe minimum and maximum values relate to the upper and lower possible values the progress could take.\n\n10\n\nThe ImageColumn will, if passed a local or web-based image path, display a small version of the image within the table instead of the text of the link.\n\n11\n\nThe LinkColumn converts any hyperlinks to a clickable link instead of just being text.\n\n12\n\nThe display_text argument can be used to display more user-friendly text instead of the full link itself.\n\n13\n\nThe NumberColumn just gives some control over the way a number is displayed; by default, a number column will include commas to make it easier to read large numbers, but this can be overriden with the format argument.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor editable dataframes (covered in a later chapter), checkboxes, select dropdowns, date/time pickers and more can be integrated into the table.\n\n\nThe full documentation can be found here and is well worth a read to understand the full range of powerful options available to you via the column configuration API.\n\n\n6.2.2 Pandas stylers\nPandas has a ‘styler’ API, which can be used to enhance table displays with conditional formatting and other stylistic enhancements. At present, within Streamlit, cell background colours, font colours and custom value displays are supported. Take a look at the pandas styler documentation for more information, and pass in the pandas styler object instead of the basic dataframe to st.dataframe.\n\n\n6.2.3 Other kinds of tabular data\nst.dataframe works with Pandas, PyArrow, Snowpark, pySpark, Numpy arrays, lists, sets and dictionaries.\n\n\n6.2.4 Additional arguments\nYou can find out more about the available options in the documentation.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Dataframes</span>"
    ]
  },
  {
    "objectID": "static_charts.html",
    "href": "static_charts.html",
    "title": "7  Static Charts",
    "section": "",
    "text": "7.1 Displaying charts made with matplotlib\nWhen we want to display static charts, we will often be using the matplotlib library.\nBelow, we create a very simple scatterplot of a dataset.\nThe final step to ensure the plot is actually displayed is to pass the fig variable to st.pyplot.\nimport streamlit as st\nimport pandas as pd\n1import matplotlib.pyplot as plt\n2from palmerpenguins import load_penguins\n\n3penguins = load_penguins()\n\n4fig, ax = plt.subplots(figsize=(15,10))\n\n5plt.scatter(\n6  x=penguins[\"body_mass_g\"],\n  y=penguins[\"bill_length_mm\"]\n  )\n\n7plt.title(\"Penguin Body Mass (g) versus Bill Length (mm)\")\n\n8ax.set_xlabel(\"Body Mass (g)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n9st.pyplot(fig)\n\n\n1\n\nWe import the pyplot module of matplotlib using the standard alias ‘plt’\n\n2\n\nWe also load in a function from a package that gives us easy access to a dataset of penguin body measurements.\n\n3\n\nWe use the load_penguins() function, which returns a pandas dataframe, and assign this to the penguins variable.\n\n4\n\nWe then use the plt.subplots function. By just passing in the named argument figsize we get a single blank plot that is relatively 1.5x wider than it is long. The tuple - the two numbers within brackets, separated by a comma - is the width and height of the image. Notice on the left of the = we have fig, ax rather than a single variable name; this is because plt.subplots returns two variables, and this means we can easily access both of these. We always write fig, ax in the same order - this is just a standard matplotlib convention.\n\n5\n\nNow we use our chosen plotting function - in this case, we want a scatterplot.\n\n6\n\nWe pass in the values to use for our x column - our horizontal axis - using the format dataframe_variable[\"column_name\"], which passes in our list of values as a pandas series. For these purposes, the pandas series is effectively a fancy list - it will primarily just contain the value for that column for each row in the dataframe. We repeat this for our y (vertical) axis.\n\n7\n\nWe pass in a string to use as the title of the graph with the plt.title() function.\n\n8\n\nWe can then use various methods of our ax variable to update things such as the x and y axis labels.\n\n9\n\nFinally, we pass the completed figure to the st.pyplot() function, which will make sure it gets displayed in our app.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Static Charts</span>"
    ]
  },
  {
    "objectID": "static_charts.html#displaying-charts-made-with-matplotlib",
    "href": "static_charts.html#displaying-charts-made-with-matplotlib",
    "title": "7  Static Charts",
    "section": "",
    "text": "Tip\n\n\n\nWe can use the st.pyplot() component to display charts created using matplotlib.\nNote that certain other non-graph outputs still use matplotlib’s plotting systems - for example, outputs from the wordcloud library and the geopandas plot method are still technically matplotlib plots. For those, we can use st.pyplot() too! This will be covered more in a later chapter.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe have created the fig and ax objects by beginning by creating a single subplot with the plt.subplots function.\nThis is sometimes referred to as the object-oriented way of writing matplotlib code.\nWith this method, we then use one of the matplotlib commands, like scatter or bar, and tell it to plot onto the ax object we created.\nWe can then modify this object using any of the standard matplotlib commands we have become familiar with, such as changing the axis labels.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that we don’t have to specify the axis we are plotting on within our plt.scatter() call (i.e. we don’t include ax=ax as one of the arguments) - it’s sufficient to just pass in the data we want to plot, and matplotlib will automatically select the appropriate axis.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Static Charts</span>"
    ]
  },
  {
    "objectID": "static_charts.html#an-alternative-way-of-displaying-charts-made-with-matplotlib",
    "href": "static_charts.html#an-alternative-way-of-displaying-charts-made-with-matplotlib",
    "title": "7  Static Charts",
    "section": "7.2 An alternative way of displaying charts made with matplotlib",
    "text": "7.2 An alternative way of displaying charts made with matplotlib\nInstead of using the st.pyplot() function, we may find it easier in some cases to save the output figure and serve that to the user using the st.image() function instead.\n\nimport streamlit as st\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins()\n\nfig, ax = plt.subplots(figsize=(15,10))\n\nplt.scatter(\n  x=penguins[\"body_mass_g\"],\n  y=penguins[\"bill_length_mm\"]\n  )\n\nplt.title(\"Penguin Body Mass (g) versus Bill Length (mm)\")\n\nax.set_xlabel(\"Body Mass (g)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n1filename = 'penguins_scatter_method_1.png'\n2plt.savefig(filename)\n\n3st.image(filename)\n\n\n1\n\nWe set a filename string, including the file extension of .png\n\n2\n\nNext we save the file to local storage - it will save in the same folder relative to our Streamlit app script.\n\n3\n\nFinally, we use st.image() to display the image file we have just created.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe could also write the last 3 lines of code above as\n\nplt.savefig('penguins_scatter_method_1.png')\n\nst.image('penguins_scatter_method_1.png')\n\nthough more care must then be taken to ensure that the names are identical! Generally it is better to define the filename variable to reduce repetition.\n\n\nYou can see that functionally this appears nearly identical to what we do above!",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Static Charts</span>"
    ]
  },
  {
    "objectID": "static_charts.html#making-use-of-the-available-space",
    "href": "static_charts.html#making-use-of-the-available-space",
    "title": "7  Static Charts",
    "section": "7.3 Making use of the available space",
    "text": "7.3 Making use of the available space\nMany streamlit components have a parameter called use_container_width.\nWhen set to True in something like st.pyplot, it ensures the output is rescaled to use the maximum available width of the screen.\nThe parameter is set to False by default, which will result in outputs often not optimally using the available space.\n\n\n\n\n\n\nTip\n\n\n\nThis can become particularly valuable when we start to explore layout options like columns later in the book.\n\n\n\nimport streamlit as st\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins()\n\nfig, ax = plt.subplots(figsize=(15,10))\nplt.scatter(x=penguins[\"body_mass_g\"], y=penguins[\"bill_length_mm\"])\nplt.title(\"Penguin Body Mass (g) versus Bill Length (mm)\")\nax.set_xlabel(\"Body Mass (g)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n1st.subheader(\"use_container_width=False\")\n\n2st.pyplot(fig)\n\n3st.subheader(\"use_container_width=True\")\n\n4st.pyplot(fig, use_container_width=True)\n\n\n1\n\nLet’s make ourselves a subheader so we can tell the two outputted plots apart\n\n2\n\nFirst, we use st.pyplot without the use_container_width argument specified. If not specified, this defaults to False.\n\n3\n\nNow let’s add another subheader.\n\n4\n\nThis time, we pass in the same figure to st.pyplot, but this time we specify the use_container_width parameter to be True.\n\n\n\n\nTake a look at the impact this has in the live version of the app below.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Static Charts</span>"
    ]
  },
  {
    "objectID": "interactive_charts.html",
    "href": "interactive_charts.html",
    "title": "8  Interactive Charts",
    "section": "",
    "text": "8.1 An overview of supported interactive chart types in Streamlit\nStreamlit provides support for several interactive chart libraries, including\nIt also provides its own simplified interactive chart types like st.bar_chart, which are simplified functions for plotting that use Altair behind the scenes.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interactive Charts</span>"
    ]
  },
  {
    "objectID": "interactive_charts.html#an-overview-of-supported-interactive-chart-types-in-streamlit",
    "href": "interactive_charts.html#an-overview-of-supported-interactive-chart-types-in-streamlit",
    "title": "8  Interactive Charts",
    "section": "",
    "text": "Plotly\nBokeh\nAltair\nVega-lite\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhile all of these are valid options to use in your own dashboards, we will be focussing on plotly - specifically the ‘plotly express’ module, which makes it very quick and easy to create relatively complex interactive charts.\nArguably plotly express is simpler to use than the built-in streamlit plot types! It’s also generally more customisable.\n\n\n\n\n\n\n\n\nTip\n\n\n\nEach of the plot types mentioned above require a different streamlit command to display them.\n\nPlotly - st.plotly_chart()\nBokeh - st.bokeh_chart()\nAltair - st.altair_chart()\nVega-lite - st.vega_lite_chart()\n\nThe details and specific arguments that are available for each can be found in the Streamlit documentation here.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interactive Charts</span>"
    ]
  },
  {
    "objectID": "interactive_charts.html#an-example-plotly-chart-in-streamlit",
    "href": "interactive_charts.html#an-example-plotly-chart-in-streamlit",
    "title": "8  Interactive Charts",
    "section": "8.2 An example plotly chart in Streamlit",
    "text": "8.2 An example plotly chart in Streamlit\n\nimport streamlit as st\n1from palmerpenguins import load_penguins\n2import plotly.express as px\n\n3penguins = load_penguins()\n\n4fig = px.scatter(\n5       penguins,\n6       x='bill_length_mm',\n       y='bill_depth_mm',\n7       color=\"sex\",\n8       title=f\"Penguins Dataset - Bill Length (mm) vs Bill Depth (mm), coloured by Sex\"\n       )\n\nst.plotly_chart(fig)\n\n\n1\n\nHere we load in a package that will provide access to a dataset of penguin measurements.\n\n2\n\nWe also need to load in the plotly.express module. The standard alias for this library is px.\n\n3\n\nWe use the load_penguins() function to pull in the pandas dataframe of penguin measurements, assigning it to the variable penguin.\n\n4\n\nPlotly express (px) provides access to a wide range of simple plot types. Here, px.scatter sets up the chart as a scatterplot which expects, as a minimum, two columns of numeric values to assign the x and y position of a series of points on an axis. We save the output of this function to a variable, as we’ll need to pass that variable to the relevant streamlit function later. A common variable name to use for this is fig.\n\n5\n\nWe pass in the dataframe we want to plot as the first argument.\n\n6\n\nWe specify the names of the columns we want to plot the values of on the x (horizontal) and y (vertical) axes. These can be surrounded by single ’ or double ” quotes. Note that we don’t need to respecify the dataframe name here - purely the column name as a string.\n\n7\n\nOptionally we can pass in a column containing a categorical variable (which can just be a column of strings) to use to colour the points. Here, we have a column called ‘sex’ which just contains the values ‘Male’ or ‘Female’; passing this in will mean our male penguin points will have one colour, and female another.\n\n8\n\nFinally, we pass the variable corresponding to our plotly plot object to the st.plotly_plot() function.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interactive Charts</span>"
    ]
  },
  {
    "objectID": "interactive_charts.html#making-use-of-the-available-space",
    "href": "interactive_charts.html#making-use-of-the-available-space",
    "title": "8  Interactive Charts",
    "section": "8.3 Making use of the available space",
    "text": "8.3 Making use of the available space\nMany streamlit components have a parameter called use_container_width.\nWe showed the impact of this parameter on static charts in the previous chapter.\nWhen set to True in something like st.plotly_chart, it ensures the output is rescaled to use the maximum available width of the screen.\nThe parameter is set to False by default, which will result in outputs often not optimally using the available space.\n\n\n\n\n\n\nTip\n\n\n\nThis can become particularly valuable when we start to explore layout options like columns later in the book.\n\n\n\n\n\n\n\n\nNote\n\n\n\nDepending on the width of the app window itself, the impact of this function is sometimes not very obvious; it may become more apparent in your own app compared to the example below.\n\n\n\nimport streamlit as st\nfrom palmerpenguins import load_penguins\nimport plotly.express as px\n\npenguins = load_penguins()\n\nfig = px.scatter(\n       penguins,\n       x='bill_length_mm',\n       y='bill_depth_mm',\n       color=\"sex\",\n       title=f\"Penguins Dataset - Bill Length (mm) vs Bill Depth (mm), coloured by Sex\",\n       width=300,\n       height=400\n       )\n\nst.subheader(\"use_container_width=False\")\n\nst.plotly_chart(fig)\n\nst.subheader(\"use_container_width=True\")\n\nst.plotly_chart(fig, use_container_width = True)",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interactive Charts</span>"
    ]
  },
  {
    "objectID": "interactive_charts.html#sneak-peak-reacting-to-user-inputs",
    "href": "interactive_charts.html#sneak-peak-reacting-to-user-inputs",
    "title": "8  Interactive Charts",
    "section": "8.4 Sneak Peak: Reacting to user inputs",
    "text": "8.4 Sneak Peak: Reacting to user inputs\nWhile we haven’t gone into detail about user inputs yet, here is an example of a plotly chart updating based on the options a user is selecting.\n\nimport streamlit as st\nfrom palmerpenguins import load_penguins\nimport plotly.express as px\n\npenguins = load_penguins()\n\naxis_options = [\n       'bill_length_mm', 'bill_depth_mm' 'flipper_length_mm'\n1       ]\n\ncol_1 = st.selectbox(\n       \"Select the column to use for the x axis\", axis_options\n2       )\n\nfig = px.scatter(\n       penguins,\n3       x=col_1,\n       y='body_mass_g',\n       color='species',\n4       title=f\"Penguins Dataset - {col_1} vs Body Mass (g), coloured by Species\"\n       )\n\nst.plotly_chart(fig)\n\n\n1\n\nIn this example, we want users to be able to choose one of three columns to use for the x axis values, with the y axis values and column used for colour being pre-set. We start by creating a list of the column names; these must exact match the way the column name is written in the dataframe, including case, spaces and any underscores.\n\n2\n\nNext, we use one of streamlit’s built-in user input gathering functions. A selectbox gives the user a drop-down list of predefined options to select from. We pass this a label (to indicate to the user what they are selecting) and the list of possible column names. We store the output of this in a variable, which we’ve called col_1 here. The contents of col_1 will be whichever of the three provided column names the user has selected. By default, the first column name in the list will be selected when the app loads.\n\n3\n\nHere, we pass in col_1 when creating our plotly plot. When the app executes, the variable col_1 will be replaced with the name of the column the user has selected, which will then be used by plotly when constructing the plot.\n\n4\n\nWe can also use this input to make the title of the plot update in response to the selected variable.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Interactive Charts</span>"
    ]
  },
  {
    "objectID": "metrics.html",
    "href": "metrics.html",
    "title": "9  Metrics and Dials",
    "section": "",
    "text": "9.1 Metrics\nimport streamlit as st\n\n1st.metric(\n2  label=\"Number of Patients Seen this Week\",\n3  value=52\n  )\n\nst.metric(\n  label=\"Number of Patients Seen this Week - South\",\n  value=30,\n4  delta=7\n  )\n\nst.metric(\n  label=\"Number of Patients Seen this Week - North\",\n  value=12,\n5  delta=-4\n  )\n\nst.metric(\n  label=\"Waiting List Length\",\n  value=147,\n  delta=-15,\n6  delta_color=\"inverse\"\n  )\n\n7st.subheader(\"A metric without its own header\")\n\nst.metric(\n8  label=\"This Won't Be Displayed\",\n  value=5,\n  delta=3,\n9  label_visibility=\"collapsed\"\n  )\n\n\n1\n\nWe are going to be using the st.metric() function.\n\n2\n\nWe pass in a string to be used as the metric card’s label.\n\n3\n\nThen we pass in a value to display on the card.\n\n4\n\nWe can also provide an optional delta parameter, which is designed to show the difference between the current metric value and a comparison figure, such as the figure in the previous time period.\n\n5\n\nThis delta value can also be negative, and this will display in a different colour.\n\n6\n\nIf an increase is actually a bad thing and a decrease is a good thing, passing the ‘inverse’ parameter will invert the colours used.\n\n7\n\nIf we wanted to make a title that stood out more, we could instead use a subheader.\n\n8\n\nNote that we are going to specify a parameter that means any label passed in here won’t actually get displayed - but you should still specify one.\n\n9\n\nFinally, we use the label_visibility parameter with the argument collapsed to hide the provided label.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Metrics and Dials</span>"
    ]
  },
  {
    "objectID": "metrics.html#metrics",
    "href": "metrics.html#metrics",
    "title": "9  Metrics and Dials",
    "section": "",
    "text": "9.1.1 Layout\nBy combining metrics with st.columns, we can make better use of the screen to start building up more of a dashboard layout. The column layout is covered in more detail in the linked chapter.\n\n\n\n\n\n\nWarning\n\n\n\nTo ensure Streamlit apps display well on all screen sizes, on narrower screens you may find that your defined columns are ignored and instead the metrics return to displaying as a single column. If you increase the width of the window, it should automatially update the layout and, if the screen is wide enough, it will respect the column assignments you have provided.\n\n\n\nimport streamlit as st\nimport plotly.express as px\nimport pandas as pd\n\n1st.set_page_config(layout=\"wide\")\n\nst.title(\"Activity Dashboard\")\n\n2col1, col2, col3 = st.columns(3)\n\n3col1.metric(label=\"Total Number of Patients Seen this Week\", value=52)\n\ncol2.metric(label=\"Number of Patients Seen this Week - South\", value=30, delta=-5)\n\ncol2.metric(label=\"Number of Patients Seen this Week - North\", value=12, delta=-7)\n\ncol3.metric(label=\"Number of Patients Seen this Year\", value=1302)\n\n4patients_seen_df = pd.DataFrame(\n  {\n    'Week': ['2021-01-01', '2021-01-08', '2021-01-15', '2021-01-22', '2021-01-29', '2021-02-05'],\n    'Patients Seen': [24, 12, 43, 23, 32, 25]\n  }\n)\n\n5st.plotly_chart(\n  px.line(patients_seen_df, x='Week', y='Patients Seen', title=\"Total Patients Seen per Week\")\n  )\n\n\n1\n\nHere, we’ve started out by setting the page config to ‘wide’. This just means that the page will use the whole width of the viewer’s screen, rather than limiting itself to the middle third.\n\n2\n\nWe set up 3 columns using the st.columns feature, unpacking them on the left-hand side of our assign (the equals sign) into three separate variables called col1, col2, col3 for easy reference (though we could call them anything!). col1 will be the leftmost column and as we haven’t specified otherwise, they will be of equal width.\n\n3\n\nWe then create our metrics, but instead of using st.metric, we use col1.metric (and so on). This is an easy shorthand to assign the resulting metric to each of the columns we’ve just created.\n\n4\n\nNow we’re just going to quickly make a dummy dataframe so that we can see the impact of putting something underneath the column layout. We wouldn’t usually build the dataframe up like this - we’d load it in from a database or csv.\n\n5\n\nNow we’re just creating a plotly chart container and putting a plotly express line chart in it. Note how rather than being inside one of the columns, it takes up the full width of the screen. This is because we’ve gone back to using st.plotly_chart instead of col1.plotly_chart or similar.\n\n\n\n\n\n\n\n9.1.2 Styling Metric Cards\nThe Streamlit Extras package provides us with options to apply a style to our metric cards.\nYou will need to pip install streamlit-extras if it’s not already installed in your environment.\n\nimport streamlit as st\nimport plotly.express as px\nimport pandas as pd\n1from streamlit_extras.metric_cards import style_metric_cards\n\nst.set_page_config(layout=\"wide\")\n\nst.title(\"Activity Dashboard\")\n\ncol1, col2, col3 = st.columns(3)\n\ncol1.metric(label=\"Total Number of Patients\\nSeen this Week\", value=52)\n\ncol2.metric(label=\"Number of Patients\\nSeen this Week - South\", value=30, delta=-5)\n\ncol2.metric(label=\"Number of Patients\\nSeen this Week - North\", value=12, delta=-7)\n\ncol3.metric(label=\"Number of Patients Seen this Year\", value=1302)\n\n2style_metric_cards(background_color=\"#6434eb\", border_color= \"#eb9234\", border_size_px=3)\n\npatients_seen_df = pd.DataFrame(\n  {\n    'Week': ['2021-01-01', '2021-01-08', '2021-01-15', '2021-01-22', '2021-01-29', '2021-02-05'],\n    'Patients Seen': [24, 12, 43, 23, 32, 25]\n  }\n)\n\nst.plotly_chart(\n  px.line(patients_seen_df, x='Week', y='Patients Seen', title=\"Total Patients Seen per Week\")\n  )\n\n\n1\n\nWe import the function style_metric_cards from streamlit_extras.metric_cards\n\n2\n\nWe then use this function after we’ve created our metric cards, passing in the relevant arguments to change the background colour, border colour, border size and more.\n\n\n\n\nFull details of all the available parameters can be found in the streamlit extras documentation\n\n\n\n\n\n\nTip\n\n\n\nThe six-character alphanumeric codes we passed into the ‘background_color’ and ‘border_color’ arguments are called hex colours and are a common way of specifying colours on computers - particularly in web development.\nThere are lots of sites to help you look up hex colours to find the perfect one for you.\nThis page from w3 schools is a starting point.\nYou can also just go to google and seach ‘hex colour picker’ to bring up an interactive picker straight away!",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Metrics and Dials</span>"
    ]
  },
  {
    "objectID": "metrics.html#indicators",
    "href": "metrics.html#indicators",
    "title": "9  Metrics and Dials",
    "section": "9.2 Indicators",
    "text": "9.2 Indicators\nTo get other sorts of displays that we might be familiar with in other dashboarding software, we may need to instead move to plotly or another graphing library rather than using things built in to Streamlit.\n\nimport streamlit as st\n1import plotly.graph_objects as go\n\n2def indicator(value, title, lower_limit=0, upper_limit=1):\n    return go.Figure(\n      go.Indicator(\n        mode = \"gauge+number\",\n        value = value,\n        title = {'text': title},\n        domain = {'x': [0, 1], 'y': [0, 1]},\n        gauge = {\n        'axis': {'range': [lower_limit, upper_limit]}\n      }\n    )\n  )\n\nst.plotly_chart(\n3  indicator(\n4    value=80,\n    title=\"Percentage of Tasks Completed\",\n    upper_limit=100\n    )\n  )\n\nst.plotly_chart(\n  indicator(\n    value=3,\n    title=\"Number of Patients Seen Today\",\n    upper_limit=10\n    )\n  )\n\n\n1\n\nInstead of importing the plotly.express module, this time we import the graph_objects module as go. This gives us finer control over plotly objects.\n\n2\n\nWe define our own custom ‘indicator’ function to make it easier. Don’t worry too much about the code in this function; you could copy it into your own Streamlit dashboards as-is.\n\n3\n\nWe can then pass the output of this ‘indicator’ function to st.plotly_chart like usual. We could save this to a fig first if we wished, before passing the fig into st.plotly_chart.\n\n4\n\nWe pass in the actual value of the metric, the title to display above the gauge and optionally the relative upper and lower limits that this value could take or should be measured relative to.\n\n\n\n\n\nTake a look at this documentation from plotly to see how to enhance these charts further, such as\n\nadding a target\nadding segments/reference points to the arc\nchanging the colour of the bar\n\nThis page contains additional things you can do with the indicator graph object in Plotly, such as overlaying a metric card on a plotly chart.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Metrics and Dials</span>"
    ]
  },
  {
    "objectID": "static_maps.html",
    "href": "static_maps.html",
    "title": "10  Static Maps",
    "section": "",
    "text": "10.1 Static maps\nIn the HSMA course, we have generally used the geopandas plot method - which is using matplotlib behind the scenes - to produce static maps.\nThis means that maps are simple to display as we can just use the st.pyplot() function that we used for standard matplotlib charts.\n1import geopandas\n2import matplotlib.pyplot as plt\nimport pandas as pd\nimport streamlit as st\n\nst.title(\"Crime in Devon by Type\")\n\n#########################################################\n# Read the geopandas file and create a matplotlib figure\n#########################################################\n\nlsoa_2011_crime_figures_df = geopandas.read_file(\n3  \"https://files.catbox.moe/4o0go1.gpkg\"\n  )\n\n4fig, ax = plt.subplots()\n\n5lsoa_2011_crime_figures_df.plot(\n6  column=\"sw_5forces_street_by_lsoa_Other crime\",\n7  legend=True,\n8  ax=ax\n  )\n\n9st.pyplot(fig)\n\n\n1\n\nWe will need to import the geopandas library to load in and plot a geographic dataset.\n\n2\n\nWe also will need to import the matplotlib.pyplot module, which we give the standard alias plt. When working with geopandas in a .py script or a jupyter notebook, this is only necessary when further modifying the plot; however, we need to structure our plot in a slightly different way to get it to display in a streamlit fileapp.\n\n3\n\nWe then import a geopackage file from a URL and save it to a variable. As it’s a geopackage rather than a csv or similar, we don’t need to define the CRS: it’s already specified as part of the geopackage file. The same would be true of a geojson.\n\n4\n\nWe use the plt.subplots() function, unpacking it to the objects fig and ax by using the syntax fig, ax on the left hand side of our = sign. By leaving this blank, we create a single axis - but the value of this step is it gives us access to these objects so we can pass it to the streamlit function for displaying this sort of plot.\n\n5\n\nWe then use the plot method on the dataframe. We don’t need to save the output of this to a variable,\n\n6\n\nWe pass in a column to colour the plot by, though this is optional; if we did not, it would just plot the points or polygons in the dataset all in the same colour.\n\n7\n\nWe also specify that we want a legend in our plot to give some indication of the range and significance of the clours in the plot.\n\n8\n\nWe tell geopandas/matplotlib to plot on the axis we just created using plt.subplots, which we do by passing in ax=ax to our .plot method.\n\n9\n\nThe output of using the .plot() method on the geopandas dataframe is a matplotlib.pyplot object. Therefore, we need to use st.pyplot() to display it.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Static Maps</span>"
    ]
  },
  {
    "objectID": "static_maps.html#static-maps",
    "href": "static_maps.html#static-maps",
    "title": "10  Static Maps",
    "section": "",
    "text": "Tip\n\n\n\nTake a look at the HSMA geographic modelling and visualisation book to find out more about creating and modifying static maps in python with geopandas and matplotlib.\nNote that you will need to adapt the code in those examples slightly to use the same layout as the code above: the main difference is using fig, ax = plt.subplots() and the argument ax=ax in our plot function, but most other aspects will be unchanged.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Static Maps</span>"
    ]
  },
  {
    "objectID": "interactive_maps.html",
    "href": "interactive_maps.html",
    "title": "11  Interactive Maps",
    "section": "",
    "text": "11.1 Interactive maps with Folium\nFolium is an easy way to make interactive maps.\nWhile they are not natively supported in streamlit, the st-folium component is a powerful custom component that is being actively supported and developed.\n1import geopandas\nimport pandas as pd\nimport streamlit as st\n2import folium\n3from streamlit_folium import st_folium\n\n4gp_list_gdf_sw = geopandas.read_file(\n    \"https://files.catbox.moe/atzk26.gpkg\"\n    )\n\n# Filter out instances with no geometry\n5gp_list_gdf_sw = gp_list_gdf_sw[~gp_list_gdf_sw['geometry'].is_empty] ,\n\n# Create a geometry list from the GeoDataFrame\n6geo_df_list = [[point.xy[1][0], point.xy[0][0]] for point in gp_list_gdf_sw.geometry]\n\n7gp_map_tooltip = folium.Map(\n    location=[50.7, -4.2],\n    zoom_start=8,\n    tiles='openstreetmap',\n    )\n\n8for i, coordinates in enumerate(geo_df_list):\n\n9    gp_map_tooltip = gp_map_tooltip.add_child(\n        folium.Marker(\n            location=coordinates,\n            tooltip=gp_list_gdf_sw['name'].values[i],\n10            icon=folium.Icon(icon=\"user-md\", prefix='fa', color=\"black\")\n            )\n     )\n\n11st_folium(gp_map_tooltip)\n\n\n1\n\nTo work with geographic data, we need to import the geopandas library.\n\n2\n\nWe’ll also need the folium library to help set up our interactive map.\n\n3\n\nFinally we need to use the streamlit_folium library, which we have to install separately (but is included in the hsma_webdev environment if you are following the HSMA course). From that library, we import just the function st_folium().\n\n4\n\nWe load in a geopackage file. We don’t need to specify a coordinate reference system for this kind of file; it’s recorded within the file itself and geopandas will automatically read and apply this, though as Folium expects the coordinates to be in latitude and longitude (not Northings and Eastings), you may need to convert the CRS of your own data. See the HSMA geographic book for more details.\n\n5\n\nFolium does not cope well with missing data, so we filter out any rows where our ‘geometry’ column is empty.\n\n6\n\nTo set up our map of points, we will need to create a list of coordinate pairs, though Folium expects them in the order longitude, latitude, so we swap the order of the points from our geometry column when placing them in the list.\n\n7\n\nWe then create a folium map, specifying the starting zoom level and the coordinates around which it should initially be centred.\n\n8\n\nWe then iterate through the list of points we created.\n\n9\n\nIn each round of our loop we add a Folium ‘marker’ to our original map.\n\n10\n\nIn Folium, if we don’t specify an icon to use for the marker, it will choose a default. However, this doesn’t seem to reliably work in all instances of Streamlit, so you may need to specify a custom icon instead using the folium.Icon class to select an icon from a web service such as font awesome. More about this can be found in the HSMA geographic book.\n\n11\n\nFinally, we pass our map to the st_folium() function.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Interactive Maps</span>"
    ]
  },
  {
    "objectID": "interactive_maps.html#interactive-maps-with-folium",
    "href": "interactive_maps.html#interactive-maps-with-folium",
    "title": "11  Interactive Maps",
    "section": "",
    "text": "Tip\n\n\n\nTake a look at the HSMA geographic modelling and visualisation book to find out more about creating and modifying interactive maps in Python.\n\n\n\n11.1.1 Sneak Peak - Updating the map based on inputs\nLet’s use a simple text input to filter the dataframe we are passing to the map.\nWhat happens to the map when we do this?\n\nimport geopandas\nimport pandas as pd\nimport streamlit as st\nimport folium\nfrom streamlit_folium import st_folium\n\n1search_string = st.text_input(\"Enter a string to search the practice name field by\")\n\ngp_list_gdf_sw = geopandas.read_file(\"https://files.catbox.moe/atzk26.gpkg\")\n\n# Filter out instances with no geometry\ngp_list_gdf_sw = gp_list_gdf_sw[~gp_list_gdf_sw['geometry'].is_empty]\n\n# Filter to just the practice of interest (if given)\n2if search_string is not \"\":\n3    gp_list_gdf_sw = gp_list_gdf_sw[gp_list_gdf_sw['name'].str.contains(search_string.upper())]\n\n4st.dataframe(gp_list_gdf_sw[['name', 'address_1', 'postcode', 'Total List Size']])\n\n# Create a geometry list from the GeoDataFrame\n5geo_df_list = [[point.xy[1][0], point.xy[0][0]] for point in gp_list_gdf_sw.geometry]\n\ngp_map_tooltip = folium.Map(\n    location=[50.7, -4.2],\n    zoom_start=8,\n    tiles='openstreetmap',\n    )\n\nfor i, coordinates in enumerate(geo_df_list):\n\n    gp_map_tooltip = gp_map_tooltip.add_child(\n        folium.Marker(\n            location=coordinates,\n            tooltip=gp_list_gdf_sw['name'].values[i],\n            icon=folium.Icon(icon=\"user-md\", prefix='fa', color=\"black\")\n            )\n     )\n\nst_folium(gp_map_tooltip)\n\n\n1\n\nWe create a streamlit user input that is designed to take a text string from the user. Whatever the user enters is saved to the variable search_string.\n\n2\n\nWe check whether this search string is equal to an empty string, which is \"\" or '' (but we can use either of those to check against - they are regarded as identical). If the value of search_string is \"\", we don’t undertake the indented code and jump to the next step instead - i.e. we won’t do any filtering.\n\n3\n\nIf the search_string is anything other than a blank string, we filter the name column of the dataframe (which here is the GP practice name) to only include instances where the search_string appears somewhere in the name - e.g. if our search string is “Hill” it would match “Hill Practice”, “Big Hill Surgery”, “Chilly Bend Surgery” and so on. Other methods exist if we only want to match the exact string.\n\n4\n\nHere, we add in a display of the filtered dataframe, restricting it to only the columns specified in the list.\n\n5\n\nAll of our Folium code is unchanged; we just pass the filtered (or unfiltered, if no search string is entered) dataframe instead.\n\n\n\n\n\n\n\n11.1.2 Updating the app based on the map zoom\nYou can do things like filter a dataframe down to only the subset of points that are on the screen within the Folium component.\nTo find out more about this, head to the chapter Bidirectional Inputs - Charts and Maps",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Interactive Maps</span>"
    ]
  },
  {
    "objectID": "custom_components.html",
    "href": "custom_components.html",
    "title": "12  Additional Output Components",
    "section": "",
    "text": "There are a large number of additional third-party components that have been created by the wider streamlit community, with more appearing all the time.\nYou can take a look at them here to see if what you are looking for is listed:\n\nYou may also have luck using a search engine like Google when looking for additional components to do something specific. If the result is a github repository, there will generally be details on the command to run to install it to your environment, and details on how to use it.\nJust exercise some level of caution whenever you are using a custom component - is it sending your data somewhere, for example? In addition, less popular components may eventually be abandoned by their creators,\n\n\n\n\n\n\nWarning\n\n\n\nOver time, as new features come to Streamlit, certain components may become obsolete as the feature they are adding becomes part of the core Streamlit features instead. At the time of writing, user authentication is on the horizon, session state has been integrated, and multipage apps have been around for quite some time - but components to do all of these things appear as very popular entries in the page embedded above.\nWhere a core streamlit implementation of a feature does what you need, stick with that - it will likely be better supported and more stable in the long run.",
    "crumbs": [
      "Outputs",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Additional Output Components</span>"
    ]
  },
  {
    "objectID": "introduction_to_inputs.html",
    "href": "introduction_to_inputs.html",
    "title": "13  Basic Inputs",
    "section": "",
    "text": "13.1 Streamlit Running Order\nA key concept of Streamlit is that each time something changes, the app reruns from top to bottom.\nThis is a good thing for simple apps - but it can become problematic as your app becomes more complex and if you have things that take longer to rerun.\nLet’s make a new app that takes some different inputs.\nHere, despite the fact that the dataframe does not change between runs\nimport streamlit as st\n1import time\nimport pandas as pd\n\nst.write(\"Loading the name popularity lookup\")\n2time.sleep(3)\nst.write(\"Still Loading...\")\ntime.sleep(4)\n\nurl = 'https://www.dropbox.com/scl/fi/yxrc1ll9o3kpg5b1ekm5b/girl_boy_names_2022.csv?rlkey=eq3uv3ms5441gqxchnnom1h6b&st=d53l3q1q&dl=1'\n3name_lookup = pd.read_csv(url)\nst.write(\"Done!\")\n\n4input_name = st.text_input(\"What is your name?\")\n\n5boy_name_lookup = name_lookup[name_lookup[\"Boy Name\"] == input_name]\ngirl_name_lookup = name_lookup[name_lookup[\"Girl Name\"] == input_name]\n\n6if len(boy_name_lookup) &gt; 0:\n7    st.write(f\"{input_name} was in popularity position {boy_name_lookup[\"Rank\"].values[0]} for boys in 2022.\")\nelse:\n8    st.write(f\"{input_name} was not in the most popular 1000 names for boys in 2022.\")\n\n9if len(girl_name_lookup) &gt; 0:\n    st.write(f\"{input_name} was in popularity position {girl_name_lookup[\"Rank\"].values[0]} for girls in 2022.\")\nelse:\n    st.write(f\"{input_name} was not in the most popular 1000 names for girls in 2022.\")\n\n\n1\n\nHere we import a module called ‘time’ just to make the loading time artifically longer (for demonstration purposes).\n\n2\n\nWe then run time.sleep(3) to make the app pause for 3 seconds at this point in the code. Each time the code reaches this step, it will pause for 3 seconds.\n\n3\n\nWe import a dataframe of the 1000 most popular boy and grl names in 2022. This has three columns - the rank, the boy name in that popularity position for 2022, and the girl name in that position in that year too.\n\n4\n\nHere, we allow users to enter a string of text and save their string as the variable input_name.\n\n5\n\nWe create two variables; we filter the dataframe to rows where the ‘Boy Name’ column is exactly equal to the input string from the user, and repeat this for the ‘Girl Name’ column to create a second variable.\n\n6\n\nIf the length of the variable boy_name_lookup is greater than 0 (i.e. after filtering the dataframe to only include rows where this name exists), this indicates that the name was in the 1000 most popular names for that year.\n\n7\n\nIf this is the case, display the name and its rank in that year.\n\n8\n\nIf not, display a different message.\n\n9\n\nRepeat this for the girl name.",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Basic Inputs</span>"
    ]
  },
  {
    "objectID": "introduction_to_inputs.html#streamlit-running-order",
    "href": "introduction_to_inputs.html#streamlit-running-order",
    "title": "13  Basic Inputs",
    "section": "",
    "text": "Note\n\n\n\nHere we artifically induce a wait for the loading phase so you can more clearly see the process by which the app reruns.\nYou don’t need to do this in your own apps! They will just run as fast as the code possibly can - but that can still not be fast enough if there are lots of things that need to be recalculated.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThere are some more advanced features of Streamlit you can call upon when you want to minimize the number of code reruns that occur unnecessarily.\nWe’ll cover these - such as caching, partial reruns, activation buttons and session state - later in the book.\nFor now, it’s just important to be aware that a Streamlit app behaves a lot like a Python script - it’s almost like a frontend that reruns a script each time an input value is changed.\nThis design decision keeps the code as simple as possible - and it’s often not a big problem for simpler apps.\nStill, you will need to keep it in mind as your apps grow in complexity.",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Basic Inputs</span>"
    ]
  },
  {
    "objectID": "text_numeric_and_selection_inputs.html",
    "href": "text_numeric_and_selection_inputs.html",
    "title": "14  An Overview of Available Input Types",
    "section": "",
    "text": "14.1 Using inputs in calculations\nIn addition to text, we often want to be able to get numeric inputs from users.\nNumber boxes and sliders are two good ways to do this.\nThe benefit of this is that the resulting output can be guaranteed to be a number - unlike using a text input, where the user could choose to enter a non-numeric value which may break later steps of your app.\nLet’s take a look at how we can use these two kinds of inputs.",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>An Overview of Available Input Types</span>"
    ]
  },
  {
    "objectID": "text_numeric_and_selection_inputs.html#using-inputs-in-calculations",
    "href": "text_numeric_and_selection_inputs.html#using-inputs-in-calculations",
    "title": "14  An Overview of Available Input Types",
    "section": "",
    "text": "Tip\n\n\n\nAll of the input types given below can take a huge range of additional parameters to further refine their behaviour.\nFor example, many can take default values, have an optional tooltip that appears on hover, or have the way in which their values appear adjusted.\nThe maximum and minimum allowed values can be set, and the input can be disabled (e.g. in response to another input).\nIt’s highly recommended that you take a look at the documentation to understand the full range of options available.\n\n\n\n14.1.1 Numeric Input\n\nimport streamlit as st\n\nst.subheader(\"Numeric Input\")\n\nchosen_number = st.number_input(\n    \"Pick a Number\"\n    )\n\nst.write(f\"The number you have chosen is {chosen_number}\")\n\nchosen_number_multiplied_by_5 = chosen_number * 5\n\nst.write(f\"Your number multiplied by 5 is {chosen_number_multiplied_by_5}\")\n\nst.write(f\"Your number plus 7 is {chosen_number + 7}\")\n\n\n\n14.1.2 Numeric Slider\n\nst.subheader(\"Numeric Slider\")\n\nchosen_number_slider = st.slider(\n    \"Pick a Number on the slider\",\n    min_value=0,\n    max_value=250,\n    value=50\n    )\n\nst.write(f\"The number you have chosen is {chosen_number_slider}\")\n\nchosen_number_slider_multiplied_by_8 = chosen_number * 8\n\nst.write(f\"Your number multiplied by 8 is {chosen_number_slider_multiplied_by_8}\")\n\nst.write(f\"Your number plus 3 is {chosen_number_slider + 3}\")\n\n\n\n14.1.3 Interactive Example",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>An Overview of Available Input Types</span>"
    ]
  },
  {
    "objectID": "text_numeric_and_selection_inputs.html#other-numeric-date-and-time-inputs",
    "href": "text_numeric_and_selection_inputs.html#other-numeric-date-and-time-inputs",
    "title": "14  An Overview of Available Input Types",
    "section": "14.2 Other numeric, date and time inputs",
    "text": "14.2 Other numeric, date and time inputs\nLet’s have a very quick look at some of the other inputs available to us within Streamlit.\nThe desired type of the output will be inferred from the default value you pass into the slider.\n\n\n\n\n\n\nTip\n\n\n\nAll of the input types given below can take a huge range of additional parameters to further refine their behaviour.\nFor example, many can take default values, have an optional tooltip that appears on hover, or have the way in which their values appear adjusted.\nThe maximum and minimum allowed values for numeric, date and time sliders can be set, and the input can be disabled (e.g. in response to another input).\nIt’s highly recommended that you take a look at the documentation to understand the full range of options available.\n\n\n\n14.2.1 Range Slider\n\nlower_value, upper_value = st.slider(\n    \"Pick a lower and upper limit\",\n    min_value=0,\n    max_value=100,\n    value=(35, 80)\n    )\n\n\n\n14.2.2 Time Slider\n\nchosen_time = st.slider(\n    \"Select a time:\",\n    time(11, 30)\n)\n\n\n\n14.2.3 Date Slider\n\nselected_date = st.slider(\n    \"Select a date\",\n    value=datetime(2022, 1, 1),\n    format=\"DD/MM/YYYY\",\n)\n\n\n\n14.2.4 Date Range Slider\n\nstart_date, end_date = st.slider(\n    \"Select a date\",\n    value=(datetime(2022, 1, 1), datetime(2023, 6, 1)),\n    format=\"DD/MM/YYYY\"\n)\n\n\n\n14.2.5 Time Range Slider\n\nstart_time, end_time = st.slider(\n    \"Select a time:\",\n    value=(time(11, 30), time(12, 45))\n)\n\n\n\n14.2.6 Datetime Slider\n\nchosen_datetime = st.slider(\n    \"Select a date and time\",\n    value=datetime(2022, 1, 1, 12, 0),\n    format=\"DD/MM/YYYY @ hh:mm\",\n)\n\n\n\n14.2.7 Date Calendar Picker\n\nselected_date = st.date_input(\n    \"Choose a date on the calendar picker\"\n    )\n\n\n\n14.2.8 Time Calendar Picker\n\nselected_time = st.time_input(\n    \"Select a time\"\n    )\n\n\n\n14.2.9 Interactive Examples",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>An Overview of Available Input Types</span>"
    ]
  },
  {
    "objectID": "text_numeric_and_selection_inputs.html#text-inputs",
    "href": "text_numeric_and_selection_inputs.html#text-inputs",
    "title": "14  An Overview of Available Input Types",
    "section": "14.3 Text Inputs",
    "text": "14.3 Text Inputs\n\n\n\n\n\n\nTip\n\n\n\nAll of the input types given below can take a huge range of additional parameters to further refine their behaviour.\nFor example, many can take default values, have an optional tooltip that appears on hover, have a placeholder appear to further guide the user’s input, or have a maximum length set.\nIt’s highly recommended that you take a look at the documentation to understand the full range of options available.\n\n\n\n14.3.1 Long text\n\nlonger_text_input = st.text_area(\n    \"Use this input to enter a larger piece of text\"\n    )\n\n\n\n14.3.2 Short text\n\nshorter_text_input = st.text_input(\n    \"We saw this before - this is an input for a short bit of text\"\n    )\n\n\n\n14.3.3 Interactive Examples",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>An Overview of Available Input Types</span>"
    ]
  },
  {
    "objectID": "text_numeric_and_selection_inputs.html#selection-inputs",
    "href": "text_numeric_and_selection_inputs.html#selection-inputs",
    "title": "14  An Overview of Available Input Types",
    "section": "14.4 Selection inputs",
    "text": "14.4 Selection inputs\nSelection inputs are a very useful class of inputs. They allow you to give users a distinct number of options to choose from.\n\n\n\n\n\n\nTip\n\n\n\nAll of the input types given below can take a huge range of additional parameters to further refine their behaviour.\nFor example, you can adjust which default value is selected, have an optional tooltip that appears on hover, or change the number of allowed options in some cases.\nIt’s highly recommended that you take a look at the documentation to understand the full range of options available.\n\n\n\n14.4.1 Radio\n\nradio_colour_select = st.radio(\n    \"Which of these colours is your favourite?\",\n    options=[\"Green\", \"Blue\", \"Red\", \"Yellow\", \"Purple\"]\n    )\n\n\n\n14.4.2 Selectbox\n\nselectbox_colour_select = st.selectbox(\n    \"Which of these colours is your favourite?\",\n    options=[\"Green\", \"Blue\", \"Red\", \"Yellow\", \"Purple\"]\n    )\n\n\n\n14.4.3 Multiselect\n\nmultiselect_colour_select = st.multiselect(\n    \"Which of these colours are your favourite? You can pick more than one!\",\n    options=[\"Green\", \"Blue\", \"Red\", \"Yellow\", \"Purple\"]\n    )\n\n\n\n14.4.4 Select Slider\n\nslider_colour_select = st.select_slider(\n    \"Which of these colours is your favourite?\",\n    options=[\"Green\", \"Blue\", \"Red\", \"Yellow\", \"Purple\"]\n    )\n\n\n\n14.4.5 Interactive Examples",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>An Overview of Available Input Types</span>"
    ]
  },
  {
    "objectID": "text_numeric_and_selection_inputs.html#other-useful-inputs---boolean-truefalse-flags",
    "href": "text_numeric_and_selection_inputs.html#other-useful-inputs---boolean-truefalse-flags",
    "title": "14  An Overview of Available Input Types",
    "section": "14.5 Other useful inputs - Boolean (True/False) Flags",
    "text": "14.5 Other useful inputs - Boolean (True/False) Flags\nThe final inputs we’ll take a quick look at are checkbox and toggle inputs.\nThese are useful as they return boolean values - True or False.\n\n\n\n\n\n\nTip\n\n\n\nWhile the input types below don’t have quite as many additional parameters as some of the others, it’s highly recommended that you take a look at the documentation to understand the full range of options available.\n\n\n\n14.5.1 Checkbox\n\ncheckbox_value = st.checkbox(\"Tick or untick me!\")\n\n\n\n14.5.2 Toggle\n\ntoggle_value = st.toggle(\"Tick or untick me!\")\n\n\n\n14.5.3 Interactive Examples",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>An Overview of Available Input Types</span>"
    ]
  },
  {
    "objectID": "text_numeric_and_selection_inputs.html#additional-input-types-not-covered-here",
    "href": "text_numeric_and_selection_inputs.html#additional-input-types-not-covered-here",
    "title": "14  An Overview of Available Input Types",
    "section": "14.6 Additional Input Types Not Covered Here",
    "text": "14.6 Additional Input Types Not Covered Here\nYou can always refer to the excellent Streamlit documentation to see what other input widgets are available.\nNew official ones are sometimes added, and there are additional ones made by the community that become available over time.",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>An Overview of Available Input Types</span>"
    ]
  },
  {
    "objectID": "text_numeric_and_selection_inputs.html#next-steps-with-inputs",
    "href": "text_numeric_and_selection_inputs.html#next-steps-with-inputs",
    "title": "14  An Overview of Available Input Types",
    "section": "14.7 Next steps with inputs",
    "text": "14.7 Next steps with inputs\nIn the rest of this section, we’ll look at some of the parameters for inputs that will allow you to refine what your users will be allowed to enter, improving the usability of your app (and reducing the number of edge cases you need to account for in your programming!).",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>An Overview of Available Input Types</span>"
    ]
  },
  {
    "objectID": "file_uploads.html",
    "href": "file_uploads.html",
    "title": "15  Uploading Data Files, Images and More",
    "section": "",
    "text": "15.1 A simple csv file upload\nLet’s start off by asking the user to upload any csv file of data.\nWe’ll then display some summary details about their dataframe and the first five values from each column.\nRight click on the following link and choose ‘save as’ to download a sample file you can use in the following app: file\nimport streamlit as st\nimport pandas as pd\n\n1uploaded_file = st.file_uploader(\n    \"Please upload a data file\"\n    )\n\n2if uploaded_file is not None:\n3    uploaded_df = pd.read_csv(uploaded_file)\n\n4    st.write(f\"Your dataframe has {len(uploaded_df)} rows.\")\n\n    st.write(f\"Your dataframe has {len(uploaded_df.columns)} columns.\")\n\n    st.write(f\"The columns in your dataframe are {', '.join(uploaded_df.columns)}.\")\n\n    for col in uploaded_df.columns:\n        st.write(f\"The first 5 values in column {col} are {', '.join(uploaded_df[col].head().astype('str'))}\")\n\n\n1\n\nWe use the st.file_uploader() function and assign the output to a variable of our choice.\n\n2\n\nHere, we check whether the user has uploaded a file yet. If they have not, the value of our variable will be the special Python value None. If this is the case, we will not run the indented code. However, if they have uploaded something, we will attempt to run the indented code.\n\n3\n\nTo turn the csv the user has uploaded into something we can use, we will use the pd.read_csv() function on it - just like with a normal csv file that we are trying to load in Python. We will save this to a different variable - here we have called it uploaded_df.\n\n4\n\nNow that we have created this uploaded_df variable, it is an entirely normal pandas dataframe - and we can use any of the usual functions we would use on it.",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Uploading Data Files, Images and More</span>"
    ]
  },
  {
    "objectID": "file_uploads.html#a-simple-csv-file-upload",
    "href": "file_uploads.html#a-simple-csv-file-upload",
    "title": "15  Uploading Data Files, Images and More",
    "section": "",
    "text": "Note\n\n\n\nThe key thing to notice here is that we have two steps to getting a usable csv file for our next steps:\n\nsave the output of st.file_uploader() to a variable\nread this output using the pd.read_csv() method\n\n\n\n\n\n\n15.1.1 Limiting the file types\nBy default, we haven’t restricted the file types that can be uploaded.\nLet’s do that now!\n\nimport streamlit as st\nimport pandas as pd\n\nuploaded_file = st.file_uploader(\n    \"Please upload a csv data file\",\n1    type=['csv']\n    )\n\nif uploaded_file is not None:\n    uploaded_df = pd.read_csv(uploaded_file)\n\n    st.write(uploaded_df.head())\n\n\n1\n\nWe pass in a list of acceptable file types for the upload. This will filter the files on the user’s system to the acceptable types unless they manually choose to view all file types, and if they attempt to upload the wrong file type, it will tell the user that it is not a valid file.\n\n\n\n\n\nThe app will try to prevent us from uploading the wrong type of file by only showing the correct type of file in our file explorer.\n\nIf we now try to upload a file with a different extension, we’ll receive a more user-friendly error message.\n\nIf we passed more possible extensions to the list, we would allow more extensions to be uploaded - but we’d also have to adapt our code to deal with each of the possible types that can be uploaded!",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Uploading Data Files, Images and More</span>"
    ]
  },
  {
    "objectID": "file_uploads.html#uploading-image-files",
    "href": "file_uploads.html#uploading-image-files",
    "title": "15  Uploading Data Files, Images and More",
    "section": "15.2 Uploading image files",
    "text": "15.2 Uploading image files\nWe can easily upload image files too.\nLet’s try loading an image file and displaying it for the user.\n\nimport streamlit as st\n\n1uploaded_image = st.file_uploader(\n    \"Please upload an image file\",\n2    type=['png', 'jpg', 'jpeg', 'bmp', 'bitmap']\n    )\n\n3if uploaded_image is not None:\n\n4    st.image(uploaded_image)\n\n\n1\n\nWe use the same st.file_uploader() function and save the output to a variable with a name of our choosing.\n\n2\n\nThis time, we specify a list of several different acceptable image types. These are a good starting point if you want to restrict a user to uploading images.\n\n3\n\nWe check whether the user has uploaded something - if they have not, this value will be the special Python value ‘None’ and the indented code will not run.\n\n4\n\nWe do not have to do any additional processing to use the uploaded image file. In this case, we go ahead and use it in st.image() to display the image the user has uploaded.\n\n\n\n\n\n\n15.2.1 Advanced: Manipulating uploaded image files\nWe have to undertake a few extra steps to be able to manipulate image files people have uploaded.\nWe’ll be using the pillow library (referred to as PIL in code) - but it expects the image to be converted to a series of bytes first.\nOnce we’ve adjusted the image into the format pillow expects, we can use the library to run a range of edits and enhancements to our image.\n\n\n\n\n\n\nTip\n\n\n\nThe code below shows just a couple of the things pillow (PIL) can do - take a look at the documentation to find more!\n\n\nLet’s have a go at it here.\n\nimport streamlit as st\nimport io\nfrom PIL import Image, ImageEnhance\nimport PIL.ImageOps\n\nuploaded_image = st.file_uploader(\"Please upload an image file\", type=['png','jpg','jpeg','bmp', 'bitmap'])\n\nif uploaded_image is not None:\n\n    imagefile = io.BytesIO(uploaded_image.read())\n\n    im = Image.open(imagefile)\n\n    threshold = st.slider(\"Choose a threshold\", 1, 100, value=80, step=1)\n    contrast_factor = st.slider(\"Contrast Enhancement Strength\", 0.0, 2.0, value=1.0, step=0.05)\n    invert = st.checkbox(\"Invert Output Image?\")\n\n    enhancer = ImageEnhance.Contrast(im)\n    img_edited = enhancer.enhance(contrast_factor)\n\n    img_edited = img_edited.convert(\"L\").point(\n        lambda x: 255 if x &gt; threshold else 0\n    )\n\n    if invert:\n        img_edited = PIL.ImageOps.invert(img_edited)\n\n    st.write(\"Original Image\")\n    st.image(uploaded_image)\n\n    st.write(\"Edited Image\")\n    st.image(img_edited)\n\n\n\n\n\n\n\n\nExtra Advanced: Background removal\n\n\n\nWe could take this even further with the rembg library, which removes the image’s background.\nWe can’t demonstrate this interactively on this page, but the code below would work for a standard streamlit app run or hosted locally, or on streamlit community cloud.\nThis doesn’t work with stlite/browser-based Python due to dependencies of the rembg library that are unavailable via that method.\n\nimport streamlit as st\nimport io\nfrom PIL import Image\nfrom rembg import remove\n\nuploaded_image = st.file_uploader(\"Please upload an image file\", type=['png','jpg','jpeg','bmp', 'bitmap'])\n\nif uploaded_image is not None:\n\n    imagefile = io.BytesIO(uploaded_image.read())\n\n    im = Image.open(imagefile)\n\n    img_edited = remove(im)\n\n    st.write(\"Original Image\")\n    st.image(uploaded_image)\n\n    st.write(\"Edited Image\")\n    st.image(img_edited)",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Uploading Data Files, Images and More</span>"
    ]
  },
  {
    "objectID": "bidirectional_plots_and_maps.html",
    "href": "bidirectional_plots_and_maps.html",
    "title": "16  Bidirectional Inputs - Dataframes, Charts and Maps",
    "section": "",
    "text": "16.1 Dataframes\nIn the case of dataframes, maybe we want to allow users to easily select a subset of rows to be plotted on a graph or map, or use this subset of rows to calculate some summary statistics.\nLet’s load in the penguins dataset.\nNotice that we have now saved the output of st.dataframe to a variable, and also added the parameter on_select=\"rerun\".\nBefore we start filtering by what is returned, let’s first just see what actually is returned and explore how this updates.\nimport streamlit as st\nimport pandas as pd\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins()\n\nst.header(\"Penguin Dataset Explorer\")\n\nselected_rows = st.dataframe(penguins, on_select=\"rerun\")\n\nst.write(selected_rows)\nWe can then use the selected row indices to restrict the rows we use for subsequent calculations.\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins()\n\nst.header(\"Penguin Dataset Explorer\")\n\nselected_rows = st.dataframe(penguins, on_select=\"rerun\")\n\nrow_indices = selected_rows[\"selection\"][\"rows\"]\n\nprint(f\"You've selected {len(row_indices)} penguins\")\n\nfiltered_df = penguins.iloc[row_indices]\n\nst.write(f\"Mean Weight: {np.mean(filtered_df['body_mass_g'])}\")\n\nst.plotly_chart(px.pie(\n                pd.DataFrame(filtered_df['sex']).value_counts(dropna=False).reset_index(),\n                values='count', names='sex', title=\"Sex of Selected Penguins\")\n                )\n\nst.subheader(\"Your Filtered Dataframe\")\n\nst.dataframe(filtered_df)",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Bidirectional Inputs - Dataframes, Charts and Maps</span>"
    ]
  },
  {
    "objectID": "bidirectional_plots_and_maps.html#dataframes",
    "href": "bidirectional_plots_and_maps.html#dataframes",
    "title": "16  Bidirectional Inputs - Dataframes, Charts and Maps",
    "section": "",
    "text": "Tip\n\n\n\nNote that selecting a subset of cells like this is not sufficient.\n\nYou must select the full rows using the dataset column at the far left, to the left of the index column if displayed.\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe selection_mode parameter can be passed to st.dataframe to allow selection of single or multiple rows, single or multiple columns, or some combination of the two.\nNote that enabling column selection disables column sorting.",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Bidirectional Inputs - Dataframes, Charts and Maps</span>"
    ]
  },
  {
    "objectID": "bidirectional_plots_and_maps.html#graphs",
    "href": "bidirectional_plots_and_maps.html#graphs",
    "title": "16  Bidirectional Inputs - Dataframes, Charts and Maps",
    "section": "16.2 Graphs",
    "text": "16.2 Graphs\nStreamlit also supports monitoring st.plotly_chart, st.altair_chart, and st.vega_lite_chart for point selections and using this as an input for further actions.\n\n\n\n\n\n\nNote\n\n\n\nIn this book we focus on the use of plotly; take a look at the Streamlit documentation to see how this could work with the Altair and Vega Lite plotting libraries instead.\n\n\nWhen hovering over the plot, users are given options such as ‘box select’ (to choose a box-shaped subset of points) or lasso select (to select an irregular set of points.)\n\nLet’s start by creating a scatterplot of the penguins dataset.\nNotice that we have now saved the output of st.plotly_chart to a variable, and also added the parameter on_select=\"rerun\".\n\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins()\n\nfig = px.scatter(penguins, x=\"body_mass_g\", y=\"bill_length_mm\", color=\"species\")\n\nselected_data = st.plotly_chart(fig, on_select=\"rerun\")\n\nst.write(selected_data)\n\n\nNow let’s see how we could use this to update some outputs.\n\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins()\n\nfig = px.scatter(penguins, x=\"body_mass_g\", y=\"bill_length_mm\")\n\nselected_data = st.plotly_chart(fig, on_select=\"rerun\")\n\nselected_point_indices = [\n    point\n    for point\n    in selected_data[\"selection\"][\"point_indices\"]\n    ]\n\nst.dataframe(\n    penguins.iloc[selected_point_indices, :]\n)\n\n\n\n\n\n\n\n\nWarning\n\n\n\nHere, we’ve just chosen a very simple example where there is no colour applied to the points in the graph.\nIf the color parameter is passed to px.scatter then the resulting point indices are related to the rows for that colour only - e.g. if we coloured by the species, then a point_index parameter of 139 wouldn’t relate back to an index of 139 in the original dataset - it would be point 139 for that particular species.\nAlways explore and test the outputs of your filtering carefully to ensure it’s returning what you think it’s returning!\nAs of the time of writing (August 2024), this feature is quite new and there are not many examples of more advanced usage of it.",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Bidirectional Inputs - Dataframes, Charts and Maps</span>"
    ]
  },
  {
    "objectID": "bidirectional_plots_and_maps.html#sec-maps",
    "href": "bidirectional_plots_and_maps.html#sec-maps",
    "title": "16  Bidirectional Inputs - Dataframes, Charts and Maps",
    "section": "16.3 Maps",
    "text": "16.3 Maps\nFor maps, we need to use the external streamlit_folium library, which must be installed via pip before use - it doesn’t come bundled with Streamlit itself.\n\n16.3.1 Filtering with the bidirectional Folium Component\nWhen using this component, data is constantly being returned as the map is updated.\nLet’s take a look at what is being returned as the map is updated.\n\nimport geopandas\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport streamlit as st\nimport folium\nfrom streamlit_folium import st_folium\n\ngp_list_gdf_sw = geopandas.read_file(\"https://files.catbox.moe/atzk26.gpkg\")\n\n# Filter out instances with no geometry\ngp_list_gdf_sw = gp_list_gdf_sw[~gp_list_gdf_sw['geometry'].is_empty]\n\n# Create a geometry list from the GeoDataFrame\ngeo_df_list = [[point.xy[1][0], point.xy[0][0]] for point in gp_list_gdf_sw.geometry]\n\ngp_map_tooltip = folium.Map(\n    location=[50.7, -4.2],\n    zoom_start=8,\n    tiles='openstreetmap',\n    )\n\nfor i, coordinates in enumerate(geo_df_list):\n\n    gp_map_tooltip = gp_map_tooltip.add_child(\n        folium.Marker(\n            location=coordinates,\n            tooltip=gp_list_gdf_sw['name'].values[i],\n            icon=folium.Icon(icon=\"user-md\", prefix='fa', color=\"black\")\n            )\n     )\n\nreturned_map_data = st_folium(gp_map_tooltip)\n\nst.write(returned_map_data)\n\n\n\n16.3.1.1 Using the returned data\nLet’s get the bounds of the map to filter a dataframe to just contain the points within the area the user has zoomed to.\n\nimport geopandas\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport streamlit as st\nimport folium\nfrom streamlit_folium import st_folium\n\ngp_list_gdf_sw = geopandas.read_file(\n    \"https://files.catbox.moe/atzk26.gpkg\"\n    )\n\n# Filter out instances with no geometry\ngp_list_gdf_sw = gp_list_gdf_sw[~gp_list_gdf_sw['geometry'].is_empty]\n\n# Create a geometry list from the GeoDataFrame\ngeo_df_list = [[point.xy[1][0], point.xy[0][0]] for point in gp_list_gdf_sw.geometry]\n\ngp_map_tooltip = folium.Map(\n    location=[50.7, -4.2],\n    zoom_start=8,\n    tiles='openstreetmap',\n    )\n\nfor i, coordinates in enumerate(geo_df_list):\n\n    gp_map_tooltip = gp_map_tooltip.add_child(\n        folium.Marker(\n            location=coordinates,\n            tooltip=gp_list_gdf_sw['name'].values[i],\n            icon=folium.Icon(icon=\"user-md\", prefix='fa', color=\"black\")\n            )\n     )\n\nreturned_map_data = st_folium(gp_map_tooltip)\n\nxmin = returned_map_data['bounds']['_southWest']['lng']\nxmax = returned_map_data['bounds']['_northEast']['lng']\nymin = returned_map_data['bounds']['_southWest']['lat']\nymax =  returned_map_data['bounds']['_northEast']['lat']\ngp_list_gdf_filtered = gp_list_gdf_sw.cx[xmin:xmax, ymin:ymax]\n\nst.write(f\"Returning data for {len(gp_list_gdf_filtered)} practices\")\n\nst.dataframe(\n    gp_list_gdf_filtered[['name', 'address_1', 'postcode', 'Total List Size']]\n    )",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Bidirectional Inputs - Dataframes, Charts and Maps</span>"
    ]
  },
  {
    "objectID": "editable_dataframes.html",
    "href": "editable_dataframes.html",
    "title": "17  Editable Dataframes",
    "section": "",
    "text": "Any pandas dataframe can be turned into an editable dataframe using the st.data_editor() function.\nThis displays the dataframe in a very similar manner to st.dataframe() but allows users to also click in and edit individual cells.\nIn the example below, try changing the value in the top left cell and see how it updates the values printed out in the app.\nThis is possible because we save the output of the st.data_editor() function to a different variable, allowing us to access the updated dataframe and use it just like we would any normal dataframe.\n\n\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nimport streamlit as st\n\npenguins_df = pd.read_csv(\"https://github.com/Bergam0t/streamlit_book/raw/refs/heads/main/penguins_df.csv\")\n\npenguins_df_edited = st.data_editor(penguins_df)\n\nst.write(f\"The value in row 1 cell 1 is {penguins_df.head(1)['species'].values[0]}\")\n\nst.write(f\"The value in row 1 cell 1 of the edited dataframe is {penguins_df_edited.head(1)['species'].values[0]}\")\n\n\n\n\n\n\n\nWarning\n\n\n\nYou will want to make it clear to your users that changes to their dataframe will not be saved after they close or refresh the browser.\nYou will either need to use a more advanced method to write the changes in the dataframe to some sort of persistent storage, like a SQL database, or just provide a way for users to easily save their updated dataframe if relevant.\nWhile you could also save and load to the same .csv file, you may find that having multiple people accessing the web app at once could cause signficant confusion - so if you find yourself needing to edit dataframes that also need to persist afterwards, make sure you consider whether other alternatives may exist.",
    "crumbs": [
      "User Inputs",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Editable Dataframes</span>"
    ]
  },
  {
    "objectID": "file_downloads_tabular.html",
    "href": "file_downloads_tabular.html",
    "title": "18  Downloading tabular data files (e.g. pandas dataframes)",
    "section": "",
    "text": "18.1 Saving pandas dataframes\nFor now, we’ll assume the tabular data you want to save is in a pandas dataframe.\nThis will usually be the case - or it will be data you can easily transform into a pandas dataframe, like a numpy array.\nLet’s start with an app that has some data on the popularity of names.\nThis app currently just loads in a dataset, does some simple manipulations, then returns the names that appeared most frequently in the dataset.",
    "crumbs": [
      "Downloading Outputs",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Downloading tabular data files (e.g. pandas dataframes)</span>"
    ]
  },
  {
    "objectID": "file_downloads_tabular.html#saving-pandas-dataframes",
    "href": "file_downloads_tabular.html#saving-pandas-dataframes",
    "title": "18  Downloading tabular data files (e.g. pandas dataframes)",
    "section": "",
    "text": "18.1.1 Saving as csv or excel file\nIf a dataframe is displayed using the standard st.dataframe() command or the st.write() command, a csv download option will become visible when hovering over the dataframe.\n\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\nurl = 'https://files.catbox.moe/eor4ta.csv'\nname_lookup_df = pd.read_csv(url).melt(id_vars=[\"Name\", \"Gender\"]).dropna().rename(\n    columns={\"variable\": \"Year\", \"value\": \"Rank\"}\n    )\n\nnames_appearing_most_years = pd.DataFrame(name_lookup_df['Name'].value_counts())\n\nst.dataframe(names_appearing_most_years)\n\n\n\n18.1.1.1 Adding download buttons\nHowever, often we may only be displaying a graph of the data rather than displaying the data as well, or we may want to provide downloads of data files slightly different to the ones we are displaying - for example, ones with more or less columns, or providing the raw data instad of the summarised data we are displaying.\nWhen this is the case, we can instead provide download buttons to allow any python dataframe in our app’s running environment to be downloaded.\nThis is also just a bit more visible than the default .csv download button in streamlit dataframes, which is easy for your end users to miss.\nThe function we will use is st.download_button.\nThis uses the standard format\n\nst.download_button(\n1   \"Click here to download the dataframe as a csv file\",\n2   data=individual_df.to_csv(index=False).encode('utf-8'),\n3   file_name=f\"{input_name}_historical_popularity.csv\",\n4   mime=\"text/csv\"\n   )\n\n\n1\n\nProvide a label for the file uploader to prompt the user\n\n2\n\nPass in the data file to download here\n\n3\n\nPass in a default filename that ends with the file type of the file that is being downloaded\n\n4\n\nThe MIME type of the data (don’t worry too much about what this is - just use the value given in the examples below or leave this parameter out entirely to accept the default)\n\n\n\n\n\n18.1.1.1.1 CSV files\nCSV files are relatively simple to provide a download for.\nThe key steps are\n\nuse the .to_csv() method on the dataframe without providing an output filepath\nencode this object as utf-8 using the .encode() method\npass the output of this code to the download button as the data parameter\n(OPTIONAL) provide a default file name for the resulting csv - you may want to use an f-string to intelligently provide a filename if the data is reflecting options the user has chosen\n(OPTIONAL) Specify the MIME type of the data as \"text/csv\" - an automatic value will be inferred from the data type, but it is better practice to more explicitly specify it like this\n\n\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\n######################################\n# This section just deals with\n# loading in and using the dataframe\n######################################\n\nurl = 'https://files.catbox.moe/eor4ta.csv'\nname_lookup_df = pd.read_csv(url)\n\nname_lookup_df = name_lookup_df.melt(id_vars=[\"Name\", \"Gender\"]).dropna().rename(\n    columns={\"variable\": \"Year\", \"value\": \"Rank\"}\n    )\n\nname_lookup_df['Year'] = name_lookup_df['Year'].astype('int64')\nname_lookup_df['Rank'] = name_lookup_df['Rank'].astype('int64')\n\ninput_name = st.text_input(\"What name would you like to lookup?\", value=\"Daniel\")\n\nindividual_df = name_lookup_df[name_lookup_df['Name'] == input_name]\n\nif input_name is not None:\n\n    st.plotly_chart(\n        px.line(individual_df,\n                y=\"Rank\", x=\"Year\", color=\"Gender\",\n                range_y=[1000, 0], range_x=[1920, 2022],\n                markers=True)\n                )\n\n######################################\n# This deals with adding the download\n# button and gettng the dataframe into\n# the correct format for downloading\n######################################\n\nst.download_button(\n   \"Click here to download the dataframe as a csv file\",\n   data=individual_df.to_csv(index=False).encode('utf-8'),\n   file_name=f\"{input_name}_historical_popularity.csv\",\n   mime=\"text/csv\"\n   )\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhen using plotly, users can hover over the plot and choose ‘Download plot as a png’.\n\n\n\n\n\n18.1.1.1.2 Excel Files\nIt is slightly more complex to set up the download of a dataframe as an Excel file.\nHowever, this does have the benefit of being something your end users will be more familiar with - and with advanced usage of the xlsxwriter library that we’ll make use of in the Modern Analytics module + book, it allows us to add in multiple worksheets to a single file, as well as more advanced things like formulas and Excel charts that will update if users update values in the spreadsheet.\n\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\nimport xlsxwriter # ADDITIONAL LOAD\nfrom io import BytesIO # ADDITIONAL LOAD\n\n######################################\n# This section just deals with\n# loading in and using the dataframe\n######################################\n\nurl = 'https://files.catbox.moe/eor4ta.csv'\nname_lookup_df = pd.read_csv(url)\n\nname_lookup_df = name_lookup_df.melt(id_vars=[\"Name\", \"Gender\"]).dropna().rename(\n    columns={\"variable\": \"Year\", \"value\": \"Rank\"}\n    )\n\nname_lookup_df['Year'] = name_lookup_df['Year'].astype('int64')\nname_lookup_df['Rank'] = name_lookup_df['Rank'].astype('int64')\n\ninput_name = st.text_input(\"What name would you like to lookup?\", value=\"Daniel\")\n\nindividual_df = name_lookup_df[name_lookup_df['Name'] == input_name]\n\nif input_name is not None:\n\n    st.plotly_chart(\n        px.line(individual_df,\n                y=\"Rank\", x=\"Year\", color=\"Gender\",\n                range_y=[1000, 0], range_x=[1920, 2022],\n                markers=True)\n                )\n\n######################################\n# This deals with adding the download\n# button and gettng the dataframe into\n# the correct format for downloading\n######################################\n\noutput = BytesIO()\n\nwriter = pd.ExcelWriter(output, engine='xlsxwriter')\n\nindividual_df.to_excel(writer, sheet_name=f\"{input_name} Data\", index=False)\nname_lookup_df.to_excel(writer, sheet_name=f\"Full Data\", index=False)\n\nwriter.close()\n\nst.download_button(\n   \"Click here to download the dataframe as an Excel file\",\n   data = output.getvalue(),\n   file_name=f\"{input_name}_historical_popularity.xlsx\",\n   mime=\"application/vnd.ms-excel\"\n)",
    "crumbs": [
      "Downloading Outputs",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Downloading tabular data files (e.g. pandas dataframes)</span>"
    ]
  },
  {
    "objectID": "file_downloads_images_charts.html",
    "href": "file_downloads_images_charts.html",
    "title": "19  Downloading Images and Charts",
    "section": "",
    "text": "19.0.1 Matplotlib\nWe can provide two possible ways of downloading the output of a matplotlib plot.\nThe first involves saving the resulting plot to a file, then serving that file to the user. This is a reliable and simple method that is probably the best to use in most situations - it will generally work even when the file is deployed.\n\nimport streamlit as st\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins()\n\nfig, ax = plt.subplots(figsize=(15,10))\nplt.scatter(x=penguins[\"body_mass_g\"], y=penguins[\"bill_length_mm\"])\nplt.title(\"Penguin Body Mass (g) versus Bill Length (mm)\")\nax.set_xlabel(\"Body Mass (g)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\nst.pyplot(fig)\n\nfilename = 'penguins_scatter_method_1.png'\nplt.savefig(filename)\nwith open(filename, \"rb\") as img:\n    btn = st.download_button(\n        label=\"Download image\",\n        data=img,\n        file_name=filename,\n        mime=\"image/png\"\n    )\n\n\n\n\n\n\n\n\nAdvanced Method\n\n\n\n\n\nThe second involves saving the image to tempory memory, then serving that instead.\n\nimport streamlit as st\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom palmerpenguins import load_penguins\nfrom io import BytesIO\n\npenguins = load_penguins()\n\nfig, ax = plt.subplots(figsize=(15,10))\nplt.scatter(x=penguins[\"body_mass_g\"], y=penguins[\"bill_length_mm\"])\nplt.title(\"Penguin Body Mass (g) versus Bill Length (mm)\")\nax.set_xlabel(\"Body Mass (g)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\nst.pyplot(fig)\n\nimg = BytesIO()\nplt.savefig(img)\n\nbtn = st.download_button(\n    label=\"Download image\",\n    data=img,\n    file_name='penguins_scatter_method_2.png',\n    mime=\"image/png\"\n)\n\n\n\n\n\n\n19.0.1.1 Wordcloud Example\nThe popular wordcloud package is actually using matplotlib for its plotting!\nThis means that the same approach works for saving a wordcloud.\nHere, we are just showing the approach of saving and then serving the image - both to display it in the app and to offer it up to the end user for download.\n\nimport streamlit as st\nfrom wordcloud import WordCloud, STOPWORDS\nimport string\nimport matplotlib.pyplot as plt\n\nstopwords = set(STOPWORDS)\n\ndef make_wordcloud(text_input):\n    tokens = text_input.split()\n    punctuation_mapping_table = str.maketrans('', '', string.punctuation)\n    tokens_stripped_of_punctuation = [token.translate(punctuation_mapping_table)\n                                  for token in tokens]\n    lower_tokens = [token.lower() for token in tokens_stripped_of_punctuation]\n\n    joined_string = (\" \").join(lower_tokens)\n\n    wordcloud = WordCloud(width=1800,\n                      height=1800,\n                      background_color='white',\n                      stopwords=stopwords,\n                      min_font_size=20).generate(joined_string)\n\n    plt.figure(figsize=(30,40))\n    # Turn off axes\n    plt.axis(\"off\")\n    # Then use imshow to plot an image (here, our wordcloud)\n    plt.imshow(wordcloud)\n    # The easiest way to do this today is to save the image and reload it\n    # This works during local testing but would also work if we deployed this\n    plt.savefig(\"wordcloud.png\")\n\nsample_text = \"\"\"\nPenguins are a group of aquatic flightless birds from the family Spheniscidae of the order Sphenisciformes. They live almost exclusively in the Southern Hemisphere: only one species, the Galápagos penguin, is found north of the Equator. Highly adapted for life in the ocean water, penguins have countershaded dark and white plumage and flippers for swimming. Most penguins feed on krill, fish, squid and other forms of sea life which they catch with their bills and swallow whole while swimming. A penguin has a spiny tongue and powerful jaws to grip slippery prey.\n\nThey spend about half of their lives on land and the other half in the sea. The largest living species is the emperor penguin (Aptenodytes forsteri): on average, adults are about 1.1 m (3 ft 7 in) tall and weigh 35 kg (77 lb). The smallest penguin species is the little blue penguin (Eudyptula minor), also known as the fairy penguin, which stands around 30–33 cm (12–13 in) tall and weighs 1.2–1.3 kg (2.6–2.9 lb). Today, larger penguins generally inhabit colder regions, and smaller penguins inhabit regions with temperate or tropical climates. Some prehistoric penguin species were enormous: as tall or heavy as an adult human. There was a great diversity of species in subantarctic regions, and at least one giant species in a region around 2,000 km south of the equator 35 mya, during the Late Eocene, a climate decidedly warmer than today.\n\"\"\"\n\nyour_text = st.text_area(label=\"Enter your text here\", value=sample_text)\n\nmake_wordcloud(text_input=your_text)\n\nst.image(\"wordcloud.png\")\n\nwith open(\"wordcloud.png\", \"rb\") as file:\n    btn = st.download_button(\n        label=\"Click Here to Download Your Word Cloud!\",\n        data=file,\n        file_name=\"my_wordcloud.png\",\n        mime=\"image/png\",\n    )\n\n\n\n\n\n19.0.2 Seaborn\nSaving the file and then serving this is a good way to work with seaborn as well.\n\nimport streamlit as st\nfrom palmerpenguins import load_penguins\nimport seaborn as sns\n\npenguins = load_penguins()\n\npairplot_fig = sns.pairplot(penguins, hue=\"species\")\n\npairplot_fig.figure.savefig(\"pairplot_sns_penguins.png\")\n\nwith open(\"pairplot_sns_penguins.png\", \"rb\") as file:\n    btn = st.download_button(\n        label=\"Click Here to Download Your Pair Plot!\",\n        data=file,\n        file_name=\"pairplot_penguin_species.png\",\n        mime=\"image/png\",\n    )\n\nboxplot_fig = sns.boxplot(penguins, x=\"island\", y=\"bill_length_mm\")\n\nboxplot_fig.figure.savefig(\"boxplot_sns_penguins.png\")\n\nwith open(\"boxplot_sns_penguins.png\", \"rb\") as file:\n    btn = st.download_button(\n        label=\"Click Here to Download Your Box Plot!\",\n        data=file,\n        file_name=\"boxplot_penguin_species.png\",\n        mime=\"image/png\",\n    )\n\n\n\n\n19.0.3 Plotly\nPlotly is a bit different because the plots it produces are interactive - but it is possible to save this too.\nThe resulting file is completely self-contained and can even be used offline. The file could be emailed or placed on a shared site like sharepoint or google drive and would work - though sometimes it requires the user to download the html file to their own machine for it to display correctly rather than just previewing the underlying html data, depending on the platform.\n\n19.0.3.1 Built-in method for downloading static plots\nWhen using plotly, users can hover over the plot and choose ‘Download plot as a png’.\n\n\n\n19.0.3.2 Downloading the interactive plots\n\nimport streamlit as st\nfrom palmerpenguins import load_penguins\nimport plotly.express as px\n\npenguins = load_penguins()\n\naxis_options = ['bill_length_mm', 'bill_depth_mm',\n       'flipper_length_mm', 'body_mass_g']\n\ncol_1 = st.selectbox(\"Select the column to use for the x axis\", axis_options)\n\naxis_options.remove(col_1)\n\ncol_2 = st.selectbox(\"Select the column to use for the x axis\", axis_options)\n\ncolor_factor = st.selectbox(\"Select the column to colour the chart by\",\n[\"species\", \"sex\", \"island\"])\n\nfig = px.scatter(penguins, x=col_1, y=col_2, color=color_factor,\ntitle=f\"Penguins Dataset - {col_1} vs {col_2}, coloured by {color_factor}\")\n\nst.plotly_chart(fig)\n\nfig.write_html(\"plotly_chart.html\")\n\nwith open(\"plotly_chart.html\", \"rb\") as file:\n    st.download_button(\n        label='Download This Plot as an Interactive HTML file',\n        data=file,\n        file_name=f'{col_1}_vs_{col_2}_by_{color_factor}.html',\n        mime='text/html'\n    )\n\n\n\n\n\n\n\n\nAdvanced Method\n\n\n\n\n\nWe could once again use StringIO to save the chart html temporarily to memory, then write that to a html file when the user clicks on a download button, as opposed to actually saving the file to a html file on our storage wherever our app is running and then serving that file.\nThat is slightly more complex with Plotly; you could attempt to adapt the code in the ‘Dash’ download button example here.\nhttps://plotly.com/python/interactive-html-export/#html-export-in-dash\n\n\n\n\n\n19.0.3.3 Static outputs with a download button\nWith some additional libraries, it becomes possible to output static images when using plotly, which can give you additional control over things like the filetype and filename.\nIt requires an additional library called kaleido to be installed.\nMore about the process can be found in the Plotly documentation.\nLINK\nFor our purposes, it is perhaps quicker and more efficient to use the StringIO buffer again, so we will use to_image() instead of save_image().\nOur code would look like this.\n\n\n\n\n\n\nWarning\n\n\n\nThe kaleido library is not possible to use with stlite, so we cannot provide an interactive demo here.\n\n\n\nimport streamlit as st\nfrom palmerpenguins import load_penguins\nimport plotly.express as px\nfrom io import StringIO\n# the kaleido package must also be installed in the environment for the saving of static plots\n# to work\npenguins = load_penguins()\n\naxis_options = ['bill_length_mm', 'bill_depth_mm',\n       'flipper_length_mm', 'body_mass_g']\n\ncol_1 = st.selectbox(\"Select the column to use for the x axis\", axis_options)\n\naxis_options.remove(col_1)\n\ncol_2 = st.selectbox(\"Select the column to use for the x axis\", axis_options)\n\ncolor_factor = st.selectbox(\"Select the column to colour the chart by\",\n[\"species\", \"sex\", \"island\"])\n\nfig = px.scatter(penguins, x=col_1, y=col_2, color=color_factor,\ntitle=f\"Penguins Dataset - {col_1} vs {col_2}, coloured by {color_factor}\")\n\nfig.write_image(\"temp.png\", engine=\"kaleido\")\nst.plotly_chart(fig)\n\nwith open(\"temp.png\", \"rb\") as img:\n    btn = st.download_button(\n        label='Download This Plot as an Static Image File',\n        data=fig.to_image(engine='kaleido'),\n        file_name=f'{col_1}_vs_{col_2}_by_{color_factor}.png',\n        mime='img/png'\n    )\n\n\n\n\n\n\n\nImportant\n\n\n\nkaleido and streamlit seem to negatively interact sometimes, with the download button generating indefinitely.\nAt present, I’m not aware of a fix for this issue!",
    "crumbs": [
      "Downloading Outputs",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Downloading Images and Charts</span>"
    ]
  },
  {
    "objectID": "file_downloads_maps_static.html",
    "href": "file_downloads_maps_static.html",
    "title": "20  Downloading Static Maps",
    "section": "",
    "text": "20.1 Maps\nWhile there are various other libraries available for displaying maps in Python and Streamlit, we are going to focus on the two we used in module 3 of the HSMA course\nFor more of a reminder on how to work with geographic data and create maps, you can refer to the HSMA geographic modelling and visualisation book.",
    "crumbs": [
      "Downloading Outputs",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Downloading Static Maps</span>"
    ]
  },
  {
    "objectID": "file_downloads_maps_static.html#maps",
    "href": "file_downloads_maps_static.html#maps",
    "title": "20  Downloading Static Maps",
    "section": "",
    "text": "matplotlib (which creates static maps)\nfolium (which creates a leaflet.js interactive map)",
    "crumbs": [
      "Downloading Outputs",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Downloading Static Maps</span>"
    ]
  },
  {
    "objectID": "file_downloads_maps_static.html#downloading-static-maps-made-with-matplotlib",
    "href": "file_downloads_maps_static.html#downloading-static-maps-made-with-matplotlib",
    "title": "20  Downloading Static Maps",
    "section": "20.2 Downloading Static Maps Made With Matplotlib",
    "text": "20.2 Downloading Static Maps Made With Matplotlib\nLet’s just start by plotting a map.\n\nimport geopandas\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport streamlit as st\n\nst.title(\"Crime in Devon by Type\")\n\n#########################################################\n# Read the geopandas file and create a matplotlib figure\n#########################################################\n\nlsoa_2011_crime_figures_df = geopandas.read_file(\"https://files.catbox.moe/4o0go1.gpkg\")\n\nfig, ax = plt.subplots()\n\nlsoa_2011_crime_figures_df.plot(\n    column=\"sw_5forces_street_by_lsoa_Other crime\",\n    legend=True,\n    ax=ax\n    )\n\nst.pyplot(fig)\n\nfilename = 'other_crime_devon.png'\n\nplt.savefig(filename)\n\nwith open(filename, \"rb\") as img:\n    btn = st.download_button(\n        label=\"Download Map\",\n        data=img,\n        file_name=filename,\n        mime=\"image/png\"\n    )\n\n\n\n20.2.0.1 A map with subplots\nStatic maps with subplots are much the same - you are just interested in saving the fig object to a temporary .png image file before then serving that temporary file to the user.\n\nimport geopandas\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport streamlit as st\n\nst.title(\"Crime in Devon by Type\")\n\n#########################################################\n# Read the geopandas file and create a matplotlib figure\n#########################################################\n\nlsoa_2011_crime_figures_df = geopandas.read_file(\"https://files.catbox.moe/4o0go1.gpkg\")\n\nxmin, xmax = 290000,295000\nymin, ymax = 91000,95000\nlsoa_2011_crime_figures_df_exeter = lsoa_2011_crime_figures_df.cx[xmin:xmax, ymin:ymax]\n\nlsoa_2011_crime_figures_df_exeter = lsoa_2011_crime_figures_df_exeter.rename(columns=\n    {\n        'sw_5forces_street_by_lsoa_Anti-social behaviour': 'Anti-social behaviour',\n        'sw_5forces_street_by_lsoa_Bicycle theft': 'Bicycle theft',\n        'sw_5forces_street_by_lsoa_Burglary': 'Burglary',\n        'sw_5forces_street_by_lsoa_Criminal damage and arson': 'Criminal damage and arson',\n        'sw_5forces_street_by_lsoa_Drugs': 'Drugs',\n        'sw_5forces_street_by_lsoa_Total number crimes': 'Total number crimes'\n    }\n)\n\ncols = ['Anti-social behaviour', 'Bicycle theft', 'Burglary', 'Criminal damage and arson',\n        'Drugs', 'Total number crimes']\n\nfig, axs = plt.subplots(2, 3, figsize=(20, 15))\n\nfor i, ax in enumerate(fig.axes):\n    lsoa_2011_crime_figures_df_exeter.plot(cols[i], cmap=\"RdYlGn_r\", legend=True, ax=ax)\n\n    ax.axis('off')\n\n    ax.title.set_text(cols[i])\n\n#########################################################\n# Display the figure\n#########################################################\n\nst.pyplot(fig)\n\n#########################################################\n# Create a download button\n#########################################################\n\nfilename = 'crime_devon.png'\n\nplt.savefig(filename)\n\nwith open(filename, \"rb\") as img:\n    btn = st.download_button(\n        label=\"Download Map\",\n        data=img,\n        file_name=filename,\n        mime=\"image/png\"\n    )\n\n\n\n\n20.2.0.2 Multiple Separate Maps\nWhat if we want to create several different maps instead of using the subplot feature?\nWe could do this and then provide a download button for each.\n\nimport geopandas\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport streamlit as st\n\nst.title(\"Crime in Devon by Type\")\n\n#########################################################\n# Read the geopandas file and create a matplotlib figure\n#########################################################\n\nlsoa_2011_crime_figures_df = geopandas.read_file(\"https://files.catbox.moe/4o0go1.gpkg\")\n\nfor col in ['sw_5forces_street_by_lsoa_Anti-social behaviour',\n        'sw_5forces_street_by_lsoa_Bicycle theft',\n        'sw_5forces_street_by_lsoa_Burglary']:\n\n    fig = lsoa_2011_crime_figures_df.plot(column=col, legend=True)\n\n    st.pyplot(fig)\n\n    filename = f'{col}.png'\n\n    plt.savefig(filename)\n\n    with open(filename, \"rb\") as img:\n        btn = st.download_button(\n            label=\"Download Map\",\n            data=img,\n            file_name=filename,\n            mime=\"image/png\"\n        )",
    "crumbs": [
      "Downloading Outputs",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Downloading Static Maps</span>"
    ]
  },
  {
    "objectID": "file_downloads_maps_interactive.html",
    "href": "file_downloads_maps_interactive.html",
    "title": "21  Downloading Interactive Maps",
    "section": "",
    "text": "21.0.1 Folium\nInteractive maps can be created using the Folium package.\nFolium maps cannot be displayed in Streamlit by default, but can be imported using the st-folium custom component.\n\nimport geopandas\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport streamlit as st\nimport folium\nfrom streamlit_folium import st_folium\n\ngp_list_gdf_sw = geopandas.read_file(\"https://files.catbox.moe/atzk26.gpkg\")\n\n# Filter out instances with no geometry\ngp_list_gdf_sw = gp_list_gdf_sw[~gp_list_gdf_sw['geometry'].is_empty]\n\n# Create a geometry list from the GeoDataFrame\ngeo_df_list = [[point.xy[1][0], point.xy[0][0]] for point in gp_list_gdf_sw.geometry]\n\ngp_map_tooltip = folium.Map(\n    location=[50.7, -4.2],\n    zoom_start=8,\n    tiles='openstreetmap',\n    )\n\nfor i, coordinates in enumerate(geo_df_list):\n\n    gp_map_tooltip = gp_map_tooltip.add_child(\n        folium.Marker(\n            location=coordinates,\n            tooltip=gp_list_gdf_sw['name'].values[i],\n            icon=folium.Icon(icon=\"user-md\", prefix='fa', color=\"black\")\n            )\n     )\n\nst_folium(gp_map_tooltip)\n\ngp_map_tooltip.save(\"gp_map_devon.html\")\n\nwith open(\"gp_map_devon.html\", \"rb\") as map_file_html:\n    st.download_button(\n        label='Download This Map as an Interactive HTML file',\n        data=map_file_html,\n        file_name=f'Devon GP Map.html',\n        mime='text/html'\n    )",
    "crumbs": [
      "Downloading Outputs",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Downloading Interactive Maps</span>"
    ]
  },
  {
    "objectID": "wide_layout.html",
    "href": "wide_layout.html",
    "title": "22  Wide Layout, Page Tab Titles and Favicons",
    "section": "",
    "text": "22.1 Other settings in set_page_config\nWithin st.set_page_config, you can also\nSee the documentation for details on each of these.\nhttps://docs.streamlit.io/develop/api-reference/configuration/st.set_page_config",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Wide Layout, Page Tab Titles and Favicons</span>"
    ]
  },
  {
    "objectID": "wide_layout.html#other-settings-in-set_page_config",
    "href": "wide_layout.html#other-settings-in-set_page_config",
    "title": "22  Wide Layout, Page Tab Titles and Favicons",
    "section": "",
    "text": "Set the page title that is shown in the browser tab\nSet an icon that is used within the browser tab and if the user favourites the page\nIf using a sidebar, determines whether the sidebar starts opened, closed, or whether it’s determined by the width of the page\nSet up links to ‘get help’, ‘report a bug’ and ‘about’ that will appear within the menu at the top-right of the app.",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Wide Layout, Page Tab Titles and Favicons</span>"
    ]
  },
  {
    "objectID": "layout_divider.html",
    "href": "layout_divider.html",
    "title": "23  Page Dividers",
    "section": "",
    "text": "The divider is a simple function that puts a horizontal line across the width of the page.\nThis can make it easier to indicate different sections of the page that should be looked at together.\n\nimport streamlit as st\n\nst.title(\"This is a title\")\n\nst.write(\"Here's a first line of text\")\n\nst.divider()\n\nst.write(\"Here's some more text\")\n\nst.divider()\n\nst.write(\"Here's the final text\")\n\n2024-09-30 16:19:39.234 \n  Warning: to view this Streamlit app on a browser, run it with the following\n  command:\n\n    streamlit run c:\\HSMA\\streamlit_book\\.venv\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n\n\n\nThere are no additional parameters you can pass into st.divider().",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Page Dividers</span>"
    ]
  },
  {
    "objectID": "layout_columns.html",
    "href": "layout_columns.html",
    "title": "24  Columns",
    "section": "",
    "text": "24.1 Creating Columns in Streamlit\nStreamlit has a very easy to use column interface for improving the layout of your apps.\nColumns look like this in a Streamlit app.\nimport streamlit as st\n\n1col1, col2, col3 = st.columns(3)\n\n2with col1:\n3  st.header(\"I'm Column 1\")\n  st.write(\"Here's the 'Back to the Future' poster. Images, videos, data tables and more can be displayed within columns.\")\n  st.image(\"https://upload.wikimedia.org/wikipedia/en/d/d2/Back_to_the_Future.jpg\")\n\n4with col2:\n  st.header(\"I'm Column 2\")\n  st.write(\"We can use inputs within columns too.\")\n  name = st.text_input(\"What's your name?\", value=None)\n  if name is not None:\n    st.write(f\"Nice to meet you, {name}!\")\n  else:\n    st.write(\"I can't greet you until you enter your name!\")\n\nwith col3:\n    if name is not None:\n      st.write(f\"Hello again, {name}!\")\n      st.write(\"Isn't it cool that variables persist across different columns? This can be really handy!\")\n      st.video(\"https://youtu.be/dQw4w9WgXcQ?feature=shared\")\n    else:\n      st.write(\"I can't greet you until you enter your name! Go back to column 2 and do that.\")\n\n\n1\n\nFirst, we pass the number of columns we want to create to the st.columns() function. We can then unpack the output of this to a number of variables separated by commas. For example, st.columns(2) produces two variables, while st.columns(4) would produce 4.\n\n2\n\nWe can then use the with statement and refer to the first column of interest. Columns work from left to right; in this case, that means the variable col1 will be the leftmost column, and as we didn’t specify the width of the columns, they will automatically take up a third of the screen in this case. With 2 columns each would take up half, and with 4 each would take up a quarter.\n\n3\n\nNote that everything we want to appear within the column, we indent.\n\n4\n\nWe can then move on to specifying what we want to appear in the next column, using the same structure of with, the variable relating to the column of interested, and an indented block of code.",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Columns</span>"
    ]
  },
  {
    "objectID": "layout_columns.html#the-two-main-syntax-options-for-streamlit-columns",
    "href": "layout_columns.html#the-two-main-syntax-options-for-streamlit-columns",
    "title": "24  Columns",
    "section": "24.2 The two main syntax options for Streamlit columns",
    "text": "24.2 The two main syntax options for Streamlit columns\nThere are two main ways to put content inside of columns.\n\nUsing a ‘with’ statement and indenting the code that should sit within the column, as we did above.\n\n\nimport streamlit as st\ncol_a, col_b = st.columns(2)\n\nwith col_a:\n    st.text(\"This is some content within column 1\")\n\nwith col_b:\n    st.text(\"This is some content within column 2\")\n\n\nReplacing the st in sections like st.text() with the variable name for the given column.\n\n\nimport streamlit as st\n\ncol_a, col_b = st.columns(2)\n\ncol_a.text(\"This is some content within column 1\")\n\ncol_b.text(\"This is some content within column 2\")\n\nThe outputs of both of these bits of code are identical!",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Columns</span>"
    ]
  },
  {
    "objectID": "layout_columns.html#adjusting-column-width",
    "href": "layout_columns.html#adjusting-column-width",
    "title": "24  Columns",
    "section": "24.3 Adjusting Column Width",
    "text": "24.3 Adjusting Column Width\nColumn width can be controlled by passing in a list with the same number of decimals in as the number of columns you want to create. These numbers must sum to 1.\n\nimport streamlit as st\ncol_a, col_b = st.columns([0.2, 0.8])\n\nwith col_a:\n    st.text(\"This is some content within column 1\")\n\nwith col_b:\n    st.text(\"This is some content within column 2\")\n\n\n\nimport streamlit as st\ncol_a, col_b, col_c = st.columns([0.15, 0.7, 0.15])\n\nwith col_a:\n    st.text(\"This is some content within column 1\")\n\nwith col_b:\n    st.text(\"This is some content within column 2\")\n\nwith col_c:\n    st.text(\"This is some content within column 3\")",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Columns</span>"
    ]
  },
  {
    "objectID": "layout_columns.html#advanced-column-layouts",
    "href": "layout_columns.html#advanced-column-layouts",
    "title": "24  Columns",
    "section": "24.4 Advanced Column Layouts",
    "text": "24.4 Advanced Column Layouts\nThe great thing about columns is that we can have multiple sets of columns, allowing you to build up fairly complex grid-like layouts.\nHere, we have an example of a top section with three equal-width columns, a central section that uses the full width of the screen, and a final section with two unequal-width columns.\nIt also demonstrates how you can mix and match the use of the with syntax and the col.command syntax within a single Streamlit app.\n\nimport streamlit as st\nimport micropip\nawait micropip.install(\"plotly\")\nawait micropip.install(\"streamlit-extras\")\nimport plotly.express as px\nimport pandas as pd\nfrom streamlit_extras.metric_cards import style_metric_cards\n\nst.set_page_config(layout=\"wide\")\n\nst.title(\"Activity Dashboard\")\n\ncol1, col2, col3 = st.columns(3)\n\ncol1.metric(label=\"Total Number of Patients Seen this Week\", value=52)\n\ncol2.metric(label=\"Number of Patients Seen this Week - South\", value=30, delta=-5)\n\ncol2.metric(label=\"Number of Patients Seen this Week - North\", value=12, delta=-7)\n\ncol3.metric(label=\"Number of Patients Seen this Year\", value=1302)\n\nstyle_metric_cards(background_color=\"#6434eb\", border_color= \"#eb9234\", border_size_px=3)\n\npatients_seen_df = pd.DataFrame(\n  {\n    'Week': ['2021-01-01', '2021-01-08', '2021-01-15', '2021-01-22', '2021-01-29', '2021-02-05'],\n    'Patients Seen': [24, 12, 43, 23, 32, 25]\n  }\n)\n\nst.plotly_chart(\n  px.line(patients_seen_df, x='Week', y='Patients Seen', title=\"Total Patients Seen per Week\"),\n  use_container_width=True\n  )\n\ncol4, col5 = st.columns([0.3, 0.7])\n\nwith col4:\n    st.write(\"Here's some text in this extra column. It's not a very wide column!\")\n\nwith col5:\n    st.video(\"https://youtu.be/dQw4w9WgXcQ?feature=shared\")",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Columns</span>"
    ]
  },
  {
    "objectID": "layout_sidebar.html",
    "href": "layout_sidebar.html",
    "title": "25  Sidebar",
    "section": "",
    "text": "25.1 Collapsible Sidebars\nThe Streamlit sidebar gives us a distinct area on the left-hand side of the screen to use.\nimport streamlit as st\n\n1with st.sidebar:\n2  st.header(\"I'm a sidebar\")\n  st.write(\"We can use inputs our sidebar too.\")\n  name = st.text_input(\"What's your name?\", value=None)\n\nst.title(\"Greeting App!\")\n\n3if name is not None:\n  st.write(f\"Nice to meet you, {name}!\")\nelse:\n  st.write(\"I can't greet you until you enter your name!\")\n\n\n1\n\nWe can use the with notation along with st.sidebar to create the sidebar\n\n2\n\nWe indent the code we want to exist within the sidebar\n\n3\n\nOnce we write a line of code that is not indented, this signals the beginning of code that will just appear in the main area of the streamlit app.",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Sidebar</span>"
    ]
  },
  {
    "objectID": "layout_sidebar.html#collapsible-sidebars",
    "href": "layout_sidebar.html#collapsible-sidebars",
    "title": "25  Sidebar",
    "section": "",
    "text": "25.1.1 Collapsing, expanding and resizing the sidebar\nWhen hovering over the sidebar, we can see this arrow appear.\n\nClicking on this collapses the sidebar, making the main body of the app take up the full width.\n\nThis can be very handy - but be aware that it may make for a non-intuitive experience for your end users.\nHovering over the point where the sidebar ends and the main part of the app begins, our cursor will change to indicate that the sidebar can be resized. Clicking and dragging will allow us to make the sidebar narrower and wider, within some predefined limits.",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Sidebar</span>"
    ]
  },
  {
    "objectID": "layout_sidebar.html#alternative-sidebar-syntax",
    "href": "layout_sidebar.html#alternative-sidebar-syntax",
    "title": "25  Sidebar",
    "section": "25.2 Alternative sidebar syntax",
    "text": "25.2 Alternative sidebar syntax\nLike a lot of other layout elements, such as columns and tabs, there are multiple ways to refer to the sidebar, and which is best may depend on precisely what you are trying to do with your app.\n\nUse the with notation, as above.\n\n\nimport streamlit as st\n\nwith st.sidebar:\n2  st.header(\"I'm a sidebar\")\n  st.write(\"We can use inputs our sidebar too.\")\n  name = st.text_input(\"What's your name?\", value=None)\n\nst.title(\"Greeting App!\")\n\nif name is not None:\n  st.write(f\"Nice to meet you, {name}!\")\nelse:\n  st.write(\"I can't greet you until you enter your name!\")\n\n\n2\n\nWherever you would use a component that begins with st. (e.g. st.text(), st.number_input()), replace this with st.sidebar() (e.g. st.sidebar.text(), st.sidebar.number_input())\n\n\n\n\nThe code below is completely equivalent to the code above.\n\nimport streamlit as st\n\nst.sidebar.header(\"I'm a sidebar\")\nst.sidebar.write(\"We can use inputs our sidebar too.\")\nname = st.sidebar.text_input(\"What's your name?\", value=None)\n\nst.title(\"Greeting App!\")\n\nif name is not None:\n  st.write(f\"Nice to meet you, {name}!\")\nelse:\n  st.write(\"I can't greet you until you enter your name!\")\n\n\n\n\n\n\n\nNote\n\n\n\nYou can often mix and match the approaches within an app too - though picking one approach may be easier for the next person who interacts with your code to follow. If it’s a good way of achieving what you need to, though, then you can go ahead and do this!",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Sidebar</span>"
    ]
  },
  {
    "objectID": "layout_sidebar.html#initial-sidebar-state",
    "href": "layout_sidebar.html#initial-sidebar-state",
    "title": "25  Sidebar",
    "section": "25.3 Initial sidebar state",
    "text": "25.3 Initial sidebar state\nWhile there are not many ways to customise your sidebar from within streamlit, you can adjust whether it displays as being visible or not by default using st.set_page_config().\n\n\n\n\n\n\nTip\n\n\n\nst.set_page_config() has to be the first streamlit command you run after importing streamlit.\nYou can run other general python commands between the import and setting the page config - but you cannot, for example, use st.header() before calling st.set_page_config().\n\n\n\nimport streamlit as st\n\nst.set_page_config(initial_sidebar_state='collapsed')\n\nwith st.sidebar:\n  st.header(\"I'm a sidebar\")\n\nst.title(\"Collapsed Sidebar Demo!\")\n\nst.write(\"The sidebar in this app is closed by default. Click on the arrow in the top left of the screen to open it.\")",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Sidebar</span>"
    ]
  },
  {
    "objectID": "layout_sidebar.html#multipage-app-navigation",
    "href": "layout_sidebar.html#multipage-app-navigation",
    "title": "25  Sidebar",
    "section": "25.4 Multipage app navigation",
    "text": "25.4 Multipage app navigation\nLater in the book we discuss multipage apps, which use the sidebar by default for page navigation.\nAny things you add to your app’s sidebar will just appear below the list of pages.",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Sidebar</span>"
    ]
  },
  {
    "objectID": "layout_sidebar.html#sidebar-styling",
    "href": "layout_sidebar.html#sidebar-styling",
    "title": "25  Sidebar",
    "section": "25.5 Sidebar styling",
    "text": "25.5 Sidebar styling\n\n25.5.1 Sidebar Colour\nThe sidebar colour can be updated using Streamlit’s theming feature.\nThe colour that needs changing is the secondaryBackgroundColor in the config.toml file.\nMore detail about theming with config.toml can be found in a later chapter.\n\n\n25.5.2 Making the sidebar expander more obvious\nWith custom CSS, we can make the sidebar expander button more obvious.\n\nimport streamlit as st\n\nst.markdown(\n  \"\"\"\n&lt;style&gt;\n    /* Expander */\n    div[data-testid=stExpander] &gt; details &gt; summary &gt; span &gt; div &gt; p\n    {\n        font-size: 30px;\n    }\n&lt;/style&gt;\n  \"\"\",\n  unsafe_allow_html=True\n)\n\nwith st.sidebar:\n  st.header(\"I'm a sidebar\")\n\nst.title(\"Sidebar Demo!\")\n\nst.write(\"The button to expand or close the sidebar is bigger in this example\")\n\n\n\n\n25.5.3 Sidebar Font colour and size\nIf using multipage apps, you may need some futher customisations to make the sidebar look good with the colour changes you make. However, more advanced customisations require using CSS.\nHere is an example where we change the default font colour of the auto-generated navigation items.\n\n\n\n\n\n\nWarning\n\n\n\nAs the streamlit library evolves, the names of various elements on the page may change, meaning that these may not remain consistent over time.\n\n\n\n# Credit to Amy H in the PenCHORD team for this!\n# https://github.com/kailo-beewell/kailo_beewell_dashboard_package/blob/be249c515d5cfd7d168abf14f03927322b72322b/kailo_beewell_dashboard/css/style.css#L2\n\nst.markdown(\n  \"\"\"\n&lt;style&gt;\n/* Sidebar font color as default is to set non-selected to more transparent */\n[data-testid=stSidebarNavItems] &gt; li &gt; div &gt; a &gt; span\n{\n    color: #05291F;\n}\n\n/* Sidebar font size */\n    [data-testid=stSidebarNavItems]\n    {\n        font-size: 25px;\n    }\n\n&lt;/style&gt;\n  \"\"\",\n  unsafe_allow_html=True\n)",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Sidebar</span>"
    ]
  },
  {
    "objectID": "layout_tabs.html",
    "href": "layout_tabs.html",
    "title": "26  Tabs",
    "section": "",
    "text": "26.1 Tabs in Streamlit\nTabs are an extremely useful way to organise your page into something that is easier to navigate.\nTabs look like this in a Streamlit app.\nimport streamlit as st\n\ntab1, tab2, tab3 = st.tabs([\"This is Tab 1\", \"This is the Second Tab\", \"Tab 3 is Here!\"])\n\nwith tab1:\n  st.header(\"I'm Tab 1\")\n  st.write(\"Here's the 'Back to the Future' poster. Images, videos, data tables and more can be displayed within tabs.\")\n  st.image(\"https://upload.wikimedia.org/wikipedia/en/d/d2/Back_to_the_Future.jpg\")\n\nwith tab2:\n  st.header(\"I'm Tab 2\")\n  st.write(\"We can use inputs within tabs too.\")\n  name = st.text_input(\"What's your name?\", value=None)\n  if name is not None:\n    st.write(f\"Nice to meet you, {name}!\")\n  else:\n    st.write(\"I can't greet you until you enter your name!\")\n\nwith tab3:\n    if name is not None:\n      st.write(f\"Hello again, {name}!\")\n      st.write(\"Isn't it cool that variables persist across different tabs? This can be really handy!\")\n      st.video(\"https://youtu.be/dQw4w9WgXcQ?feature=shared\")\n    else:\n      st.write(\"I can't greet you until you enter your name! Go back to tab 2 and do that.\")",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Tabs</span>"
    ]
  },
  {
    "objectID": "layout_tabs.html#the-two-main-syntax-options-for-streamlit-tabs",
    "href": "layout_tabs.html#the-two-main-syntax-options-for-streamlit-tabs",
    "title": "26  Tabs",
    "section": "26.2 The two main syntax options for streamlit tabs",
    "text": "26.2 The two main syntax options for streamlit tabs\nThere are two main ways to put content inside of tabs.\n\nUsing a ‘with’ statement and indenting the code that should sit within the tab.\n\n\nimport streamlit as st\ntab_a, tab_b = st.tabs([\"A Tab\", \"Another Tab\"])\n\nwith tab_a:\n    st.text(\"This is some content within tab 1\")\n\nwith tab_b:\n    st.text(\"This is some content within tab 2\")\n\n\nReplacing the st in sections like st.text() with the variable name for the given tab.\n\n\nimport streamlit as st\n\ntab_a, tab_b = st.tabs([\"A Tab\", \"Another Tab\"])\n\ntab_a.text(\"This is some content within tab 1\")\n\ntab_b.text(\"This is some content within tab 2\")\n\nThe outputs of both of these bits of code are identical!\nIt’s up to you to choose which you prefer.",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Tabs</span>"
    ]
  },
  {
    "objectID": "layout_tabs.html#automatically-generating-variable-numbers-of-tabs",
    "href": "layout_tabs.html#automatically-generating-variable-numbers-of-tabs",
    "title": "26  Tabs",
    "section": "26.3 Automatically generating variable numbers of tabs",
    "text": "26.3 Automatically generating variable numbers of tabs\nIn some instances, you may wish to reactively create a different number of tabs.\nIn this example, notice what happens to the random numbers as you change the number of tabs being generated.\n\n26.3.1 Using the ‘tab.’ syntax\n\nimport streamlit as st\nimport random\n\nnumber_of_tabs_to_create = st.number_input(\"Enter the number of tabs you want to create\", 2, 5, 3)\n\ntab_list =  st.tabs([f\"Tab {i+1}\" for i in range(number_of_tabs_to_create)])\n\nfor idx, tab in enumerate(tab_list):\n  tab.header(f\"This is tab {idx+1}\")\n  tab.write(f\"Your random number for this tab is {random.randint(0, 10)}\")\n\n\n\n\n26.3.2 Using the ‘with’ syntax\nIt’s also possible to do this using the ‘with’ syntax.\nIn this example, in every separate tab, we pull back a random wikipedia page.\n(However, due to the way this works behind the scenes, we don’t get a new page on changing the number of tabs even though the app is rerunning each time)\n\nimport streamlit as st\nimport streamlit.components.v1 as components\n\nnumber_of_tabs_to_create = st.number_input(\"Enter the number of tabs you want to create\", 2, 5, 3)\n\ntab_list =  st.tabs([f\"Tab {i+1}\" for i in range(number_of_tabs_to_create)])\n\nfor idx, tab in enumerate(tab_list):\n  with tab:\n    st.header(f\"This is tab {idx+1}\")\n    components.iframe(\"https://commons.wikimedia.org/wiki/Special:Random/File\", height=500)",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Tabs</span>"
    ]
  },
  {
    "objectID": "layout_tabs.html#custom-styling-of-tabs",
    "href": "layout_tabs.html#custom-styling-of-tabs",
    "title": "26  Tabs",
    "section": "26.4 Custom Styling of Tabs",
    "text": "26.4 Custom Styling of Tabs\nHere is an example of how to change the tab formatting.\n\n\n\n\n\n\nWarning\n\n\n\nThis is not a supported part of Streamlit - the ways in which streamlit internally names these tabs may change over time, causing this code to no longer work.\n\n\n\n# Credit to user 'Dallas on https://discuss.streamlit.io/t/customizing-the-appearance-of-tabs/48913\n\nimport streamlit as st\n\ncustom_css = \"\"\"\n&lt;style&gt;\n    .stTabs [data-baseweb=\"tab-list\"] {\n        gap: 2px;\n    }\n\n    .stTabs [data-baseweb=\"tab\"] {\n        height: 50px;\n        white-space: pre-wrap;\n        background-color: #32a852;\n        border-radius: 4px 4px 0px 0px;\n        gap: 1px;\n        padding-top: 10px;\n        padding-bottom: 10px;\n    }\n\n    .stTabs [aria-selected=\"true\"] {\n        background-color: #912a90;\n    }\n\n&lt;/style&gt;\n\"\"\"\n\nst.markdown(custom_css, unsafe_allow_html=True)\n\ntab_a, tab_b = st.tabs([\"A Tab\", \"Another Tab\"])\n\nwith tab_a:\n    st.text(\"This is some content within tab 1\")\n\nwith tab_b:\n    st.text(\"This is some content within tab 2\")",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Tabs</span>"
    ]
  },
  {
    "objectID": "layout_expander.html",
    "href": "layout_expander.html",
    "title": "27  Expanders",
    "section": "",
    "text": "27.1 Nesting expanders in other layout elements\nExpanders can sit within other layout elements.\nimport streamlit as st\nfrom palmerpenguins import load_penguins\nimport plotly.express as px\n\ntab1, tab2 = st.tabs([\"Penguin Graphs\", \"Penguin Facts\"])\n\npenguins = load_penguins()\n\nwith tab1:\n\n    col1, col2 = st.columns(2)\n\n    with col1:\n        fig = px.scatter(penguins, x='bill_length_mm', y='bill_depth_mm', color=\"sex\",\n        title=f\"Penguins Dataset - Bill Length (mm) vs Bill Depth (mm), coloured by Sex\")\n\n        st.plotly_chart(fig)\n\n        with st.expander(\"Click here to see the code for the graph\"):\n            st.code(\n              \"\"\"\n              fig = px.scatter(penguins, x='bill_length_mm', y='bill_depth_mm', color=\"sex\",\n                    title=f\"Penguins Dataset - Bill Length (mm) vs Bill Depth (mm), coloured by Sex\")\n              \"\"\"\n            )\n\n    with col2:\n        fig = px.scatter(penguins, x='flipper_length_mm', y='body_mass_g', color=\"species\",\n                    title=f\"Penguins Dataset - Flipper Length (mm) vs Body Weight(g), coloured by Species\")\n\n        st.plotly_chart(fig)\n\n        with st.expander(\"Click here to see the code for the graph\"):\n            st.code(\n              \"\"\"\n              fig = px.scatter(penguins, x='flipper_length_mm', y='body_mass_g', color=\"species\",\n                    title=f\"Penguins Dataset - Flipper Length (mm) vs Body Weight(g), coloured by Species\")\n              \"\"\"\n            )\n\n    with st.expander(\"Click here to see the underlying data\"):\n        st.dataframe(penguins)\n\nwith tab2:\n    st.header(\"Penguin Facts\")\n    st.subheader(\"Gentoo Penguins\")\n\n    st.write(\n      \"\"\"\n      The gentoo penguin (JEN-too) (Pygoscelis papua) is a penguin species (or possibly a species complex) in the genus Pygoscelis, most closely related to the Adélie penguin (P. adeliae) and the chinstrap penguin (P. antarcticus). The earliest scientific description was made in 1781 by Johann Reinhold Forster with a type locality in the Falkland Islands. The species calls in a variety of ways, but the most frequently heard is a loud trumpeting, which the bird emits with its head thrown back.\n      \"\"\"\n    )\n\n    expander_video = st.expander(\"Click here to watch a penguin video\")\n    expander_video.video(\"https://www.youtube.com/watch?v=nFAK8Vj62WM\")",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Expanders</span>"
    ]
  },
  {
    "objectID": "multipage.html",
    "href": "multipage.html",
    "title": "28  Multipage Apps",
    "section": "",
    "text": "28.1 Method 1: ‘st.Page’ and ‘st.navigation’\nLet’s first take a look at the multipage app itself and explore how a multipage app behaves.\nClick here to load the sample app in a new tab\nThe recommended method for multipage apps in Streamlit is to\nIn this example, we have a folder that looks like this\nWhen starting up the app, we will simply be running streamlit run app.py from within the folder.\nLet’s take a look at the contents of app.py\nLet’s now look at the code for one of the other pages: Interactive_Data_Explorer.py, which appears as “Interactive Data Explorer” in the sidebar of the app.\nNote that it looks like a completely standard streamlit app - in fact, this particular page could run completely fine by itself!",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Multipage Apps</span>"
    ]
  },
  {
    "objectID": "multipage.html#method-1-st.page-and-st.navigation",
    "href": "multipage.html#method-1-st.page-and-st.navigation",
    "title": "28  Multipage Apps",
    "section": "",
    "text": "Tip\n\n\n\nThe key things to take away are that\n\nvariables are not shared across different app pages\nmoving to a different page will reset the value of any inputs\n\n\n\n\n\ncreate a page that is responsible for routing users to different pages\n\nin this file, we can do additional things like set up the displayed names of each page and add icons before the page names\n\ncreate your actual pages\n\n\n\n\n\nimport streamlit as st\n\npg = st.navigation(\n    [st.Page(\"Homepage.py\", title=\"Welcome!\", icon=\":material/add_circle:\"),\n     st.Page(\"Penguin_Information.py\"),\n     st.Page(\"Penguin_Trends.py\"),\n     st.Page(\"Interactive_Data_Explorer.py\"),\n     st.Page(\"Sidebar_Theming.py\"),\n     ]\n     )\n\npg.run()\n\n\n\n\n\n\n\n\nNote\n\n\n\nimport streamlit as st\nfrom palmerpenguins import load_penguins\nimport plotly.express as px\n\nst.title(\"Interactive Data Explorer\")\n\nst.write(\"Here, let's explore what happens to values we've input when moving to a different page.\")\n\nst.write(\"If you enter your name on this page, the rest of the page will load.\")\n\nst.write(\"Try then moving to a different page using the navigation sidebar before returning to this page.\")\n\nst.write(\"What do you notice?\")\n\nuser_name = st.text_input(\"Enter Your Name\", None)\n\nif user_name is None:\n    st.write(f\"Please enter your name to load the rest of the page\")\nelse:\n    st.write(f\"Welcome to the interactive penguin data explorer, {user_name}!\")\n\n    penguins = load_penguins()\n\n    axis_options = ['bill_length_mm', 'bill_depth_mm',\n        'flipper_length_mm', 'body_mass_g']\n\n    col_1 = st.selectbox(\"Select the column to use for the x axis\", axis_options)\n\n    axis_options.remove(col_1)\n\n    col_2 = st.selectbox(\"Select the column to use for the x axis\", axis_options)\n\n    color_factor = st.selectbox(\"Select the column to colour the chart by\",\n    [\"species\", \"sex\", \"island\"])\n\n    fig = px.scatter(penguins, x=col_1, y=col_2, color=color_factor,\n    title=f\"Penguins Dataset - {col_1} vs {col_2}, coloured by {color_factor}\")\n\n    st.plotly_chart(fig)\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe .streamlit folder contains config.toml, which is used to set the colourscheme of the app\nThe requirements.txt file contains the required packages for the app, which will then be installed automatically when we deploy the app to the streamlit community cloud.\n\n\n\n28.1.1 Nested Sidebars\nBy modifying our main page’s code, we can create subsections within our navigation bars, which can be very helpful for more complex apps.\nimport streamlit as st\n\n1homepage = st.Page(\"Homepage.py\", title=\"Welcome!\", icon=\":material/add_circle:\")\ninfo_page = st.Page(\"Penguin_Information.py\")\ntrends_page = st.Page(\"Penguin_Trends.py\")\nexplorer_page = st.Page(\"Interactive_Data_Explorer.py\")\ntheming_page = st.Page(\"Sidebar_Theming.py\")\n\n2pg = st.navigation(\n    {\n        \"Section 1\": [homepage],\n        \"Section 2\": [info_page, trends_page],\n        \"Section 3\": [explorer_page, theming_page]\n    }\n     )\n\npg.run()\n\n1\n\nInstead of passing the st.Page calls directly into st.navigation we have created a variable per page. This isn’t strictly necessary, but makes it a lot easier to keep track of what’s going on in our use of st.navigation.\n\n2\n\nWe can then create a dictionary where the keys (the values before the :) are strings representing what we want our subsection names to be. The values of the dictionary are lists containing the variables we defined above. For example, here section 1 will contain only the homepage, while sections 2 and 3 will contain 2 pages each.\n\n\n\nClick here to load the sample app in a new tab",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Multipage Apps</span>"
    ]
  },
  {
    "objectID": "multipage.html#method-2-pages-subfolder",
    "href": "multipage.html#method-2-pages-subfolder",
    "title": "28  Multipage Apps",
    "section": "28.2 Method 2: ‘pages’ subfolder",
    "text": "28.2 Method 2: ‘pages’ subfolder\nOne other common way to deal with multipage apps is to have a .py file that is designed to be your main homepage, with all other pages being stored within a ‘pages’ subfolder.\nAt the time of writing, this is still used in some examples in the Streamlit documentation, so it is useful to be aware of, and it does have the benefit of being an automated way\n\n\n\n\n\n\nWarning\n\n\n\nThe subfolder has to be called pages to be picked up! You cannot rename it to something else.\n\n\nWe would start this app by running streamlit run Homepage.py when we have navigated to the same folder level as Homepage.py in our terminal.\nLet’s look at an example multipage app with 5 pages.\n\nClick here to load the sample app in a new tab\nThe structure of our app in our filesystem looks like this; in Windows explorer, this is how the files and folders appear.\n\nThe ‘pages’ folder\n\nThe numbers at the beginning of the filenames indicate the order these will appear in the sidebar.\n\n\n\n\n\n\nClick here for the code for the homepage\n\n\n\n\n\nimport streamlit as st\n\nst.set_page_config(layout=\"wide\", page_title=\"Homepage\")\n\nst.title(\"Welcome to the penguin app!\")\n\nspecies_options = [\"Gentoo\", \"Chinstrap\", \"Adelie\"]\n\nchosen_species = st.selectbox(\"Which penguin species are you interested in finding out more about?\", species_options)\n\nif chosen_species == \"Gentoo\":\n    st.write(\n        \"\"\"\n        The gentoo penguin (JEN-too) (Pygoscelis papua) is a penguin species (or possibly a species complex) in the genus Pygoscelis, most closely related to the Adélie penguin (P. adeliae) and the chinstrap penguin (P. antarcticus). The earliest scientific description was made in 1781 by Johann Reinhold Forster with a type locality in the Falkland Islands. The species calls in a variety of ways, but the most frequently heard is a loud trumpeting, which the bird emits with its head thrown back.\n        \"\"\"\n    )\nelif chosen_species == \"Chinstrap\":\n    st.write(\n        \"\"\"\nThe chinstrap penguin (Pygoscelis antarcticus) is a species of penguin that inhabits a variety of islands and shores in the Southern Pacific and the Antarctic Oceans. Its name stems from the narrow black band under its head, which makes it appear as if it were wearing a black helmet, making it easy to identify.[2] Other common names include ringed penguin, bearded penguin, and stonecracker penguin, due to its loud, harsh call.[3]\n        \"\"\"\n    )\n\nelif chosen_species == \"Adelie\":\n    st.write(\n        \"\"\"\n        The Adélie penguin (Pygoscelis adeliae) is a species of penguin common along the entire coast of the Antarctic continent, which is the only place where it is found. It is the most widespread penguin species, and, along with the emperor penguin, is the most southerly distributed of all penguins. It is named after Adélie Land, in turn, named for Adèle Dumont d'Urville, who was married to French explorer Jules Dumont d'Urville, who first discovered this penguin in 1840. Adélie penguins obtain their food by both predation and foraging, with a diet of mainly krill and fish.\n        \"\"\"\n    )\n\nst.markdown(\"*All information from wikipedia*\")\n\n\n\n\n\n\n\n\n\nClick here for the code for the second page\n\n\n\n\n\nimport streamlit as st\n\nst.write(\"Let's try loading in a variable from the previous page.\")\n\nwith st.expander(\"Click here to see the code that made the homepage\"):\n    st.code(\"\"\"\n            import streamlit as st\n\nst.set_page_config(layout=\"wide\", page_title=\"Homepage\")\n\nst.title(\"Welcome to the penguin app!\")\n\nspecies_options = [\"Gentoo\", \"Chinstrap\", \"Adelie\"]\n\nchosen_species = st.selectbox(\"Which penguin species are you interested in finding out more about?\", species_options)\n\nif chosen_species == \"Gentoo\":\n    st.write(\n        '''\n        The gentoo penguin (JEN-too) (Pygoscelis papua) is a penguin species (or possibly a species complex) in the genus Pygoscelis, most closely related to the Adélie penguin (P. adeliae) and the chinstrap penguin (P. antarcticus). The earliest scientific description was made in 1781 by Johann Reinhold Forster with a type locality in the Falkland Islands. The species calls in a variety of ways, but the most frequently heard is a loud trumpeting, which the bird emits with its head thrown back.\n        '''\n    )\nelif chosen_species == \"Chinstrap\":\n    st.write(\n        '''\nThe chinstrap penguin (Pygoscelis antarcticus) is a species of penguin that inhabits a variety of islands and shores in the Southern Pacific and the Antarctic Oceans. Its name stems from the narrow black band under its head, which makes it appear as if it were wearing a black helmet, making it easy to identify.[2] Other common names include ringed penguin, bearded penguin, and stonecracker penguin, due to its loud, harsh call.[3]\n        '''\n    )\n\nelif chosen_species == \"Adelie\":\n    st.write(\n        '''\n        The Adélie penguin (Pygoscelis adeliae) is a species of penguin common along the entire coast of the Antarctic continent, which is the only place where it is found. It is the most widespread penguin species, and, along with the emperor penguin, is the most southerly distributed of all penguins. It is named after Adélie Land, in turn, named for Adèle Dumont d'Urville, who was married to French explorer Jules Dumont d'Urville, who first discovered this penguin in 1840. Adélie penguins obtain their food by both predation and foraging, with a diet of mainly krill and fish.\n        '''\n    )\n\nst.markdown(\"*All information from wikipedia*\")\n\"\"\")\n\nst.write(\"We're going to try loading the `species_options` list in, which just contains the strings 'Gentoo', 'Adelie' and 'Chinstrap'.\")\n\nst.write(\"What we'll see is that it doesn't work and instead returns an error. This is because the variables on the other pages are completely separate and can't be accessed on this page.\")\n\nst.write(\"This is a key thing to be aware of within multipage apps. Without using things like session state, we can't use information from other pages on this page, and vice-versa\")\n\nchosen_species = st.selectbox(\"Which penguin species are you interested in finding out more about?\", species_options)\n\n\n\n\n\n\n\n\n\nClick here for the code for the third page\n\n\n\n\n\nimport streamlit as st\n\nimport streamlit as st\nfrom palmerpenguins import load_penguins\nimport plotly.express as px\n\nst.write(\"All of the things we've learned about so far can be used within a multipage app!\")\n\nst.write(\"Just remember that each page is effectively a self-contained app - without using things like session state, we can't use information from other pages on this page, and vice-versa.\")\n\ntab1, tab2 = st.tabs([\"Penguin Graphs\", \"Video\"])\n\npenguins = load_penguins()\n\nwith tab1:\n\n    col1, col2 = st.columns(2)\n\n    with col1:\n        fig = px.scatter(penguins, x='bill_length_mm', y='bill_depth_mm', color=\"sex\",\n        title=f\"Penguins Dataset - Bill Length (mm) vs Bill Depth (mm), coloured by Sex\")\n\n        st.plotly_chart(fig)\n\n        with st.expander(\"Click here to see the code for the graph\"):\n            st.code(\n              \"\"\"\n              fig = px.scatter(penguins, x='bill_length_mm', y='bill_depth_mm', color=\"sex\",\n                    title=f\"Penguins Dataset - Bill Length (mm) vs Bill Depth (mm), coloured by Sex\")\n              \"\"\"\n            )\n\n    with col2:\n        fig = px.scatter(penguins, x='flipper_length_mm', y='body_mass_g', color=\"species\",\n                    title=f\"Penguins Dataset - Flipper Length (mm) vs Body Weight(g), coloured by Species\")\n\n        st.plotly_chart(fig)\n\n        with st.expander(\"Click here to see the code for the graph\"):\n            st.code(\n              \"\"\"\n              fig = px.scatter(penguins, x='flipper_length_mm', y='body_mass_g', color=\"species\",\n                    title=f\"Penguins Dataset - Flipper Length (mm) vs Body Weight(g), coloured by Species\")\n              \"\"\"\n            )\n\n    with st.expander(\"Click here to see the underlying data\"):\n        st.dataframe(penguins)\n\nwith tab2:\n    st.header(\"Penguin Video\")\n\n    expander_video = st.expander(\"Click here to watch a penguin video\")\n    expander_video.video(\"https://www.youtube.com/watch?v=nFAK8Vj62WM\")\n\n\n\n\n\n\n\n\n\nClick here for the code for the fourth page\n\n\n\n\n\nimport streamlit as st\nfrom palmerpenguins import load_penguins\nimport plotly.express as px\n\nst.title(\"Interactive Data Explorer\")\n\nst.write(\"Here, let's explore what happens to values we've input when moving to a different page.\")\n\nst.write(\"If you enter your name on this page, the rest of the page will load.\")\n\nst.write(\"Try then moving to a different page using the navigation sidebar before returning to this page.\")\n\nst.write(\"What do you notice?\")\n\nuser_name = st.text_input(\"Enter Your Name\", None)\n\nif user_name is None:\n    st.write(f\"Please enter your name to load the rest of the page\")\nelse:\n    st.write(f\"Welcome to the interactive penguin data explorer, {user_name}!\")\n\n    penguins = load_penguins()\n\n    axis_options = ['bill_length_mm', 'bill_depth_mm',\n        'flipper_length_mm', 'body_mass_g']\n\n    col_1 = st.selectbox(\"Select the column to use for the x axis\", axis_options)\n\n    axis_options.remove(col_1)\n\n    col_2 = st.selectbox(\"Select the column to use for the x axis\", axis_options)\n\n    color_factor = st.selectbox(\"Select the column to colour the chart by\",\n    [\"species\", \"sex\", \"island\"])\n\n    fig = px.scatter(penguins, x=col_1, y=col_2, color=color_factor,\n    title=f\"Penguins Dataset - {col_1} vs {col_2}, coloured by {color_factor}\")\n\n    st.plotly_chart(fig)\n\n\n\n\n\n\n\n\n\nClick here for the code for the fifth page\n\n\n\n\n\nimport streamlit as st\nimport plotly.express as px\n\nst.markdown(\n  \"\"\"\n&lt;style&gt;\n/* Sidebar font color as default is to set non-selected to more transparent */\n[data-testid=stSidebarNavItems] &gt; li &gt; div &gt; a &gt; span\n{\n    color: #05291F;\n}\n\n/* Sidebar font size */\n    [data-testid=stSidebarNavItems]\n    {\n        font-size: 20px;\n    }\n\n&lt;/style&gt;\n  \"\"\",\n  unsafe_allow_html=True\n)\n\n\nst.title(\"Sidebar Theming and Additions\")\n\nst.write(\"Finally, let's look at the impact of some custom CSS on the sidebar.\")\n\nst.write(\"We've embedded some code when the page first loads that should increase the size of the page names in the sidebar, and also make the page names in the sidebar darker.\")\n\nwith st.expander(\"Click here to view the code\"):\n    st.code(\n    '''\n&lt;style&gt;\n/* Sidebar font color as default is to set non-selected to more transparent */\n[data-testid=stSidebarNavItems] &gt; li &gt; div &gt; a &gt; span\n{\n    color: #05291F;\n}\n\n/* Sidebar font size */\n    [data-testid=stSidebarNavItems]\n    {\n        font-size: 20px;\n    }\n\n&lt;/style&gt;\n    '''\n    )\n\n\nwith st.sidebar:\n    st.write(\"Let's also explore what happens when we add additional things to the sidebar\")\n\n    st.write(\"It looks like it automatically appears below the navigation\")\n\n    num_repeats = st.slider(\"Pick a number\", 1, 50, 2)\n\n    text_repeats = st.text_input(\"Enter some text\", None)\n\n\nif text_repeats is None:\n    st.write(\"Enter some text in the box in the sidebar\")\nelse:\n    st.write(\"Here is your text repeated that many times!\")\n\n    st.write(text_repeats * num_repeats)",
    "crumbs": [
      "Layout",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Multipage Apps</span>"
    ]
  },
  {
    "objectID": "app_colours.html",
    "href": "app_colours.html",
    "title": "29  App Colours",
    "section": "",
    "text": "There are a few parts of Streamlit’s theming that we can officially change using a configuration file.\nThis file needs to be called config.toml and lives inside a subfolder called .streamlit\n\nThe config.toml file contains a variable number of parameters.\nIt can determine whether the default colourscheme is light or dark, and whether the default streamlit colours are overridden.\nYou can create a template config.toml from within streamlit, then paste the output into a config.toml file you create yourself.\n\nLet’s look at an example app.\n\n29.0.1 config.toml\n[theme]\nbase=\"light\"\nprimaryColor=\"#005EB8\"\nsecondaryBackgroundColor=\"#00e0ff\"\n\n\n29.0.2 app.py\n\nimport streamlit as st\n\nst.title('Simple Calculator App')\n\nnum_1 = st.number_input(label=\"First Number\")\n\nnum_2 = st.number_input(label=\"Second Number\")\n\noperator = st.selectbox(label=\"Operation\", options=[\"Add\", \"Subtract\", \"Multiply\", \"Divide\"])\n\nif operator == \"Add\":\n    output = num_1 + num_2\nelif operator == \"Subtract\":\n    output = num_1 - num_2\nelif operator == \"Multiply\":\n    output = num_1 * num_2\nelif operator == \"Divide\":\n    output = num_1 / num_2\n\nst.text(f\"The answer is {output}\")",
    "crumbs": [
      "Styling",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>App Colours</span>"
    ]
  },
  {
    "objectID": "logos.html",
    "href": "logos.html",
    "title": "30  Logos",
    "section": "",
    "text": "30.1 Larger logos\nIt is possible to include larger logos through more advanced tricks, but they are fragile and prone to breaking as changes are made to the Streamlit library.\nThe approach requires using some markdown to inject some custom CSS (see the fonts chapter for more details on CSS).\nHere is a reusable function you could adapt to your own use:\ndef add_logo():\n    '''\n    Add a logo at the top of the page navigation sidebar\n\n    Approach written by blackary on\n    https://discuss.streamlit.io/t/put-logo-and-title-above-on-top-of-page-navigation-in-sidebar-of-multipage-app/28213/5\n\n    '''\n    st.markdown(\n        \"\"\"\n        &lt;style&gt;\n            [data-testid=\"stSidebarNav\"] {\n                background-image: url(https://raw.githubusercontent.com/hsma-programme/Teaching_DES_Concepts_Streamlit/main/resources/hsma_logo_transparent_background_small.png);\n                background-repeat: no-repeat;\n                padding-top: 175px;\n                background-position: 40px 30px;\n            }\n            [data-testid=\"stSidebarNav\"]::before {\n                content: \"The DES Playground\";\n                padding-left: 20px;\n                margin-top: 50px;\n                font-size: 30px;\n                position: relative;\n                top: 100px;\n            }\n\n        &lt;/style&gt;\n        \"\"\",\n        unsafe_allow_html=True,\n    )\nimport streamlit as st\n\ndef add_logo():\n    '''\n    Add a logo at the top of the page navigation sidebar\n\n    Approach written by blackary on\n    https://discuss.streamlit.io/t/put-logo-and-title-above-on-top-of-page-navigation-in-sidebar-of-multipage-app/28213/5\n\n    '''\n    st.markdown(\n        \"\"\"\n        &lt;style&gt;\n            [data-testid=\"stSidebarNav\"] {\n                background-image: url(https://raw.githubusercontent.com/hsma-programme/Teaching_DES_Concepts_Streamlit/main/resources/hsma_logo_transparent_background_small.png);\n                background-repeat: no-repeat;\n                padding-top: 175px;\n                background-position: 40px 30px;\n            }\n            [data-testid=\"stSidebarNav\"]::before {\n                content: \"The DES Playground\";\n                padding-left: 20px;\n                margin-top: 50px;\n                font-size: 30px;\n                position: relative;\n                top: 100px;\n            }\n\n        &lt;/style&gt;\n        \"\"\",\n        unsafe_allow_html=True,\n    )\n\nadd_logo()\n\nst.title('Simple Calculator App')\n\nwith st.sidebar:\n  num_1 = st.number_input(label=\"First Number\")\n\n  num_2 = st.number_input(label=\"Second Number\")\n\n  operator = st.selectbox(label=\"Operation\", options=[\"Add\", \"Subtract\", \"Multiply\", \"Divide\"])\n\nif operator == \"Add\":\n    output = num_1 + num_2\nelif operator == \"Subtract\":\n    output = num_1 - num_2\nelif operator == \"Multiply\":\n    output = num_1 * num_2\nelif operator == \"Divide\":\n    output = num_1 / num_2\n\nst.text(f\"The answer is {output}\")",
    "crumbs": [
      "Styling",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Logos</span>"
    ]
  },
  {
    "objectID": "fonts.html",
    "href": "fonts.html",
    "title": "31  Fonts",
    "section": "",
    "text": "To customise the look of your app much more than this, we need to turn to custom css.\nCSS stands for ‘cascading style sheets’ and is a language used for theming much of the web!\nWe can create our own .css file and force Streamlit to load it in.\n\nTo load the file into the app, we need to include the following command:\n\nwith open(\"style.css\") as css:\n    st.markdown(f'&lt;style&gt;{css.read()}&lt;/style&gt;', unsafe_allow_html=True)\n\nThis points towards the css file and wrapss it in some HTML tags that will ensure the css is recognised by the web browser.\nThe css file can contain any valid css, but we are interested in this chapter in targeting fonts specifically.\nTo begin with, we load in a font from the Google font families.\nWe then choose some areas of this app to apply it to.\nh1, h2, h3, h4, p will target all headers and the main body text in the app.\nMore advanced or Streamlit-specific elements may be harder to target.\n@import url('https://fonts.googleapis.com/css2?family=Lexend:wght@200&display=swap');\n\nhtml, body, st-emotion-cache [class*=\"css\"] {\n    font-family: 'Lexend', sans-serif;\n    font-size: 18px;\n    font-weight: 200;\n    color: #091747;\n}\n\nh1, h2, h3, h4, p {\n    font-family: \"Lexend\", sans-serif;\n}\n\n\n\n\n\n\nTip\n\n\n\nYou can right click when running your app and choose ‘inspect’ to get an idea of the possible tags to target with your custom CSS.\nThe streamlit forums and StackOverflow are also good ways to find examples of people applying custom theming to similar things to what you are looking to do.\n\n\nHere is an example of a Streamlit title with and without the custom theming applied.\n\n\n\n\n\n\n\nTip\n\n\n\nGoogle fonts provide a good option that is easy to load in via the method above.\nYou can explore the wide range of fonts offered here:\nhttps://fonts.google.com/\nIstok Web is often cited as being the closest Google Font equivalent to the standard NHS font Frutiger.\nTo apply this, you would use\n@import url('https://fonts.googleapis.com/css2?family=Istok+Web:wght@200&display=swap');\n\nhtml, body, st-emotion-cache [class*=\"css\"] {\n    font-family: 'Istok Web', sans-serif;\n    font-size: 18px;\n    font-weight: 200;\n    color: #091747;\n}\n\nh1, h2, h3, h4, p {\n    font-family: \"Istok Web\", sans-serif;\n}",
    "crumbs": [
      "Styling",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Fonts</span>"
    ]
  },
  {
    "objectID": "forms_and_run_buttons.html",
    "href": "forms_and_run_buttons.html",
    "title": "32  Adding a ‘Run’ Button",
    "section": "",
    "text": "32.1 Streamlit forms\nAn alternative to this is to use the official Streamlit forms component.\nhttps://docs.streamlit.io/develop/api-reference/execution-flow/st.form",
    "crumbs": [
      "Controlling Application Flow",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Adding a 'Run' Button</span>"
    ]
  },
  {
    "objectID": "partial_reruns.html",
    "href": "partial_reruns.html",
    "title": "33  Partial Reruns (fragments)",
    "section": "",
    "text": "33.1 The Partial Rerun Decorator\nNow let’s rewrite this using the fragment code.\nimport streamlit as st\nfrom palmerpenguins import load_penguins\nimport plotly.express as px\nimport time\n\npenguins = load_penguins()\n\napp_column_1, app_column_2 = st.columns(2)\n\naxis_options = ['bill_length_mm', 'bill_depth_mm',\n       'flipper_length_mm', 'body_mass_g']\n\n1@st.fragment()\n2def penguin_barchart():\n    time.sleep(3)\n    species = st.selectbox(\"Select a penguin species to filter by\", [\"Adelie\", \"Gentoo\", \"Chinstrap\"])\n    filtered_df_species = penguins[penguins['species'] == species]\n    st.plotly_chart(px.bar(filtered_df_species['sex'].value_counts(), y='count'))\n\n\n3@st.fragment()\ndef penguin_scatterplot():\n    time.sleep(3)\n    col_1 = st.selectbox(\"Select the column to use for the x axis\", axis_options)\n    axis_options.remove(col_1)\n    col_2 = st.selectbox(\"Select the column to use for the y axis\", axis_options)\n\n    color_factor = st.selectbox(\"Select the column to colour the chart by\",\n    [\"species\", \"sex\", \"island\"])\n\n    fig = px.scatter(penguins, x=col_1, y=col_2, color=color_factor,\n    title=f\"Penguins Dataset - {col_1} vs {col_2}, coloured by {color_factor}\")\n\n    st.plotly_chart(fig)\n\n\nwith app_column_1:\n4   penguin_barchart()\n\nwith app_column_2:\n5   penguin_scatterplot()\n\n\n1\n\nWe use the @st.fragment() decorator on its own line\n\n2\n\nInstead of just creating the inputs and outputs straight in the app, we need to wrap them in a function. This function doesn’t need to return anything, and we can call it whatever we like. Note that there is no blank line between the @st.fragment() decorator and the function definition. Here, we’ve counted the select dropdown for species, the pandas dataframe filter action, and the creation of the barplot figure as being a single thing we want to rerun when any element within those three changes in a way that would trigger a rerun usually.\n\n3\n\nWe then repeat this for our next function.\n\n4\n\nUsing the with notation with the first column we created, we then call our first function.\n\n5\n\nWe then repeat this for the second column and second function.\nNotice that now when we change the parameters in the drop-down select boxes, only half of the app fades out - indicating that only half of the app is updating at a time; each half of the page can now act independently of the other.\nClick here to open the example app if it does not load in the box below",
    "crumbs": [
      "Controlling Application Flow",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Partial Reruns (fragments)</span>"
    ]
  },
  {
    "objectID": "partial_reruns.html#the-partial-rerun-decorator",
    "href": "partial_reruns.html#the-partial-rerun-decorator",
    "title": "33  Partial Reruns (fragments)",
    "section": "",
    "text": "Note\n\n\n\nAs the fragments feature is so new as of writing this book, it has not yet been integrated into the library we use for displaying the example apps.\nInstead, you can view the output of this code in the embedded webpage below.",
    "crumbs": [
      "Controlling Application Flow",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Partial Reruns (fragments)</span>"
    ]
  },
  {
    "objectID": "custom_page_navigation.html",
    "href": "custom_page_navigation.html",
    "title": "34  Custom Page Navigation Buttons",
    "section": "",
    "text": "The st.switch_page() function allows for additional custom navigation within an app.\nThis can be useful to help guide users through a particular journey, directing their actions more than if you just let them use the sidebar.\nst.switch_page is generally paired with st.button using the following syntax:\n\nimport streamlit as st\n\nif st.button(\"String denoting what appears on the button\"):\n  st.switch_page(\"page_to_switch_to.py\")\n\n\n34.0.1 Example App Using st.switch_page\nHere is an example app.\n\nClick here to load the app in a new page\nIn this app, we have a folder structure like so:\n\nWe then set up each page as follows:\n\n\n34.0.2 app.py\nThis is unchanged from our original multipage app\n\nimport streamlit as st\n\npg = st.navigation([\n        st.Page(\"home_page.py\", title=\"Welcome!\", icon=\":material/add_circle:\"),\n        st.Page(\"des_page.py\", title=\"Run Simulation\", icon=\":material/laptop:\")\n     ])\n\npg.run()\n\n\n\n34.0.3 home_page.py\n\nimport streamlit as st\n\nst.title(\"Clinic Simulation App\")\n\nst.write(\"Welcome to the clinic simulation app!\")\n\nif st.button(\"Click here to head to the simulation page\"):\n    st.switch_page(\"des_page.py\")\n\n\n\n34.0.4 des_page.py\n\nimport streamlit as st\nimport simpy\nimport random\nimport pandas as pd\n\nst.title(\"Simple One-Step DES\")\n\nif st.button(\"Click here to return to the homepage\"):\n    st.switch_page(\"home_page.py\")\n\npatient_iat_slider = st.slider(\"What is the average length of time between patients arriving?\",\n                               min_value=1, max_value=30, value=5)\n\n# Remaining code here...",
    "crumbs": [
      "Controlling Application Flow",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Custom Page Navigation Buttons</span>"
    ]
  },
  {
    "objectID": "caching.html",
    "href": "caching.html",
    "title": "35  Reducing Load Time with Caching",
    "section": "",
    "text": "35.1 A Caching Code Example",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reducing Load Time with Caching</span>"
    ]
  },
  {
    "objectID": "caching.html#a-caching-code-example",
    "href": "caching.html#a-caching-code-example",
    "title": "35  Reducing Load Time with Caching",
    "section": "",
    "text": "35.1.1 Without Caching\n\nimport pandas as pd\nimport streamlit as st\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nst.dataframe(athlete_statistics)\n\n\n\n35.1.2 Loading in the Same Dataset with Caching\n\nimport pandas as pd\nimport streamlit as st\n\n@st.cache_data\ndef load_data():\n  return pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics = load_data()\n\nst.dataframe(athlete_statistics)",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reducing Load Time with Caching</span>"
    ]
  },
  {
    "objectID": "caching.html#how-does-caching-affect-the-app",
    "href": "caching.html#how-does-caching-affect-the-app",
    "title": "35  Reducing Load Time with Caching",
    "section": "35.2 How Does Caching Affect the App?",
    "text": "35.2 How Does Caching Affect the App?\nWhen a dataset is cached, this means it will almost be excluded from the top-to-bottom running of the app.\nIf the version of the cache is deemed to be valid, then rather than loading the dataset in again from scratch and using memory on your web host to do so, it will use the version already in the cache.\nThis will make your app feel far more responsive - when actions that trigger a rerun, like changing the value of a slider or the value entered in a text/numeric input, as the data reload isn’t triggered, subsequent changes to the dataset will feel much quicker.\nHere is an example of the same app with and without caching so you can compare performance.\n\n\n\n\n\n\nNote\n\n\n\nIn this example, the performance improvement is very minor due to the small size of the dataset. With larger datasets with tens of thousands of rows or geodataframes that often contain complex information of 20+ mb, then the performance difference is significantly bigger.\n\n\n\n35.2.1 Without Caching\n\nClick here to load the app in a new page\n\n\n35.2.2 With Caching\n\nClick here to load the app in a new page",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reducing Load Time with Caching</span>"
    ]
  },
  {
    "objectID": "caching.html#caching-other-steps",
    "href": "caching.html#caching-other-steps",
    "title": "35  Reducing Load Time with Caching",
    "section": "35.3 Caching Other Steps",
    "text": "35.3 Caching Other Steps\nIf you have certain actions that take a long time, then you may wish to cache those too.\nFor example, if you had a long-running data cleaning step that you ran when the data was loaded into the app, then you could cache that as well.\n\nimport pandas as pd\nimport streamlit as st\n\n@st.cache_data\ndef load_data():\n  return pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics = load_data()\n\n@st.cache_data\ndef clean_data():\n\n  my_clean_dataframe = athlete_statistics ... ## long-running code here...\n\n  return my_clean_dataframe\n\nclean_athlete_statistics = clean_data()\n\nst.dataframe(clean_athlete_statistics)",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reducing Load Time with Caching</span>"
    ]
  },
  {
    "objectID": "caching.html#caching-types-data-vs-resources",
    "href": "caching.html#caching-types-data-vs-resources",
    "title": "35  Reducing Load Time with Caching",
    "section": "35.4 Caching Types: Data vs Resources",
    "text": "35.4 Caching Types: Data vs Resources\nCaching can also be used for other large files - for example, if you wanted to load in a trained machine learning model that’s the same for all users who will interact with your app.\n\nIt’s not always obvious which to use, so head to the Streamlit documentation if you’re a bit unsure.",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reducing Load Time with Caching</span>"
    ]
  },
  {
    "objectID": "caching.html#caching-functions-with-parameters",
    "href": "caching.html#caching-functions-with-parameters",
    "title": "35  Reducing Load Time with Caching",
    "section": "35.5 Caching Functions with Parameters",
    "text": "35.5 Caching Functions with Parameters\nWhile using caching for the initial load of a dataframe, it can also make sense to use it for other long-running functions.\nLike normal functions, functions for caching can accept parameters.\nStreamlit will be able to look at the parameters passed in and tell whether it should\n\nuse a cached version of the data (because the parameters are the same as a previous instance that’s already in its cache)\nrun the function (because it’s a new set of parameters that it doesn’t already have a saved output for in its cache)\nThere are a few complexities around parameters that you may want to look into if using this in your own app: https://docs.streamlit.io/develop/concepts/architecture/caching#excluding-input-parameters",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reducing Load Time with Caching</span>"
    ]
  },
  {
    "objectID": "caching.html#caching-settings",
    "href": "caching.html#caching-settings",
    "title": "35  Reducing Load Time with Caching",
    "section": "35.6 Caching settings",
    "text": "35.6 Caching settings\nWhen you choose to cache something, you can add in some additional settings to make the cache as effective as possible for your particular situation.\n\n35.6.1 TTL (time to live)\nTTL determines how long to keep cached data before rerunning it.\nFor example, if data is likely to change over time, you could set the ttl parameter to set the number of seconds to keep cached data for.\n\n@st.cache_data(ttl=3600)\ndef your_function_here():\n    …\n\nThis also prevents your cache from becoming very large. Large caches could exceed the memory limits on your host.\n\n\n35.6.2 max_entries\nOnce the cache contains the maximum number of objects you have specified, the oldest ones will be deleted to make way for new ones.\n\n@st.cache_data(max_entries=10)\ndef your_function_here():\n    …\n\nThis also prevents your cache from becoming very large.",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reducing Load Time with Caching</span>"
    ]
  },
  {
    "objectID": "caching.html#further-caching-settings",
    "href": "caching.html#further-caching-settings",
    "title": "35  Reducing Load Time with Caching",
    "section": "35.7 Further Caching Settings",
    "text": "35.7 Further Caching Settings\nAdditional caching settings can be explored in the documentation.",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Reducing Load Time with Caching</span>"
    ]
  },
  {
    "objectID": "session_state.html",
    "href": "session_state.html",
    "title": "36  Persisting Data Across Pages and Runs with Session State",
    "section": "",
    "text": "36.1 Initialising session state keys\nFirst, we need to initialise the session state key with a default value if it doesn’t already exist.\nif 'your_number' not in st.session_state:\n    st.session_state.your_number = None",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Persisting Data Across Pages and Runs with Session State</span>"
    ]
  },
  {
    "objectID": "session_state.html#initialising-session-state-keys",
    "href": "session_state.html#initialising-session-state-keys",
    "title": "36  Persisting Data Across Pages and Runs with Session State",
    "section": "",
    "text": "Note\n\n\n\nThis can be anything, and doesn’t strictly have to be the same type of data as the final value will be - though it’s usually good practice to keep it fairly consistent throughout its lifecycle!\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou need to do this on every page of your app where you will do either of the following:\n\nUpdate the value\nDisplay the value",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Persisting Data Across Pages and Runs with Session State</span>"
    ]
  },
  {
    "objectID": "session_state.html#assigning-to-session-state-keys",
    "href": "session_state.html#assigning-to-session-state-keys",
    "title": "36  Persisting Data Across Pages and Runs with Session State",
    "section": "36.2 Assigning to session state keys",
    "text": "36.2 Assigning to session state keys\nSession state can be used to store a range of things.\nIt can store the input given in a user input widget:\n\nst.session_state.your_number = st.number_input(\n    \"Pick a number between 1 and 100\",\n    min_value=1, max_value=100, value=None\n    )\n\n\n\n\n\n\n\nA note about assigning inputs to session state like this\n\n\n\n\n\nThis is the simplest way to assign a user’s input to the session state to pass it around between pages or something along those lines.\nHowever - you will need to be mindful of what default value you initialise the input with using the value parameter. It will automatically overwrite the session state key as soon as the page containing the input widget is opened.\nLater, we cover the concept of callbacks; the on_change parameter that is available for most streamlit inputs will allow you to use a callback function to update the session state only after the first time the user interacts with the widget, which can be better depending on your app.\n\n\n\nOr the result of a calculation (whether that’s a number, a dataframe, a graph, or something else)\n\nst.session_state.the_final_answer = result * 42\n\nThe thing you’re saving to the state could itself optionally use something stored in the session state!\n\nst.session_state.the_final_answer = st.session_state.your_number * 42",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Persisting Data Across Pages and Runs with Session State</span>"
    ]
  },
  {
    "objectID": "session_state.html#using-the-session-state",
    "href": "session_state.html#using-the-session-state",
    "title": "36  Persisting Data Across Pages and Runs with Session State",
    "section": "36.3 Using the session state",
    "text": "36.3 Using the session state\nYou can then access the session state key regardless of the page you are using it on!\nJust remember - you need to check for whether the key exists in the session state anywhere you are setting or using the key, and set a default value for it if it doesn’t already exist.\nWhen your app is deployed, a user could open the app on a page that means they are trying to view the stored session state key before they’ve had a chance to actually input a value - so think about how you could use conditional logic (if/elif/else) to handle this gracefully.",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Persisting Data Across Pages and Runs with Session State</span>"
    ]
  },
  {
    "objectID": "session_state.html#a-more-complex-multipage-example",
    "href": "session_state.html#a-more-complex-multipage-example",
    "title": "36  Persisting Data Across Pages and Runs with Session State",
    "section": "36.4 A more complex multipage example",
    "text": "36.4 A more complex multipage example\nLet’s now take a look at a full example across several pages that makes use of session state.\nHere, we’ll have a numeric input that makes use of session state.\nWe’ll have a text input for the user’s name which doesn’t make use of session state.\nTry comparing the behaviour when moving between the different pages of the app.\n\n36.4.1 app.py\n\nimport streamlit as st\n\npg = st.navigation([\n        st.Page(\"page_1.py\", title=\"Start here!\"),\n        st.Page(\"page_2.py\", title=\"Now go here\")\n     ])\n\npg.run()\n\n\n\n36.4.2 page_1.py\n\nimport streamlit as st\n\nif 'your_number' not in st.session_state:\n    st.session_state.your_number = None\nif 'the_final_answer' not in st.session_state:\n    st.session_state.the_final_answer = None\n\nst.title(\"Session State Example\")\n\nst.session_state.your_number = st.number_input(\n    \"Pick a number between 1 and 100\",\n    min_value=1, max_value=100, value=None\n    )\n\nif st.session_state.the_final_answer is None:\n    \"Enter a number and then go to the next page to calculate the final answer\"\nelse:\n    f\"Your answer is {st.session_state.the_final_answer} - but what was the question?\"\n\nst.divider()\n\nname_input = st.text_input(\"Enter Your Name\")\n\n\n\n36.4.3 page_2.py\n\nimport streamlit as st\n\nif 'your_number' not in st.session_state:\n    st.session_state.your_number = None\nif 'the_final_answer' not in st.session_state:\n    st.session_state.the_final_answer = None\n\nif st.session_state.your_number is None:\n    st.write(\"Go back to the previous page and enter a number!\")\nelse:\n    st.write(f\"I remember your number! It's {st.session_state.your_number}\")\n\n    st.session_state.the_final_answer = st.session_state.your_number * 42\n    st.write(\"I've calculated the final answer and put it back on the first page...\")\n\nst.divider()\n\nst.write(\"Your name? Let me look up what your name is.\")\n\ntry:\n    st.write(name_input)\nexcept:\n    st.write(\"I don't seem to remember your name...\")\n\n\n\n\n\n\n\nNote\n\n\n\nThe sample app linked below also uses a concept known as callbacks, which is often used with session state, to make the button increment work. Head to the callbacks chapter to find out more!",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Persisting Data Across Pages and Runs with Session State</span>"
    ]
  },
  {
    "objectID": "callbacks.html",
    "href": "callbacks.html",
    "title": "37  Callbacks",
    "section": "",
    "text": "37.1 Callbacks Code Example\nTo begin, we initialise our session state variable like before.\nif 'button_click_count' not in st.session_state:\n  st.session_state.button_click_count = None\nNext, we define our callback function.\ndef button_action():\n  st.session_state.button_click_count += 1\nWe associate the callback with the relevant input, using the ‘on_click’ or ‘on_change’ parameter as appropriate.\nIn this case, it will mean that on_click (i.e. every time the user clicks on the button), the function button_action that we just defined will run. This function will add 1 to the count of button clicks we are storing in a session state key, which means it will persist between runs of the app and across app pages. Therefore, rather than the count resetting to 0 each time the button is clicked as it would if we weren’t using the session state, it will instead gradually increase the count.\nadd_number_button = st.button(\n  \"Click me!\",\n  on_click=button_action\n)\nFinally, we use our session state variable as we want to!\nst.write(f\"You've clicked the button {st.session_state.button_click_count} times\")\nClick here to load the app in a new page",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Callbacks</span>"
    ]
  },
  {
    "objectID": "callbacks.html#callbacks-code-example",
    "href": "callbacks.html#callbacks-code-example",
    "title": "37  Callbacks",
    "section": "",
    "text": "Warning\n\n\n\nThe value of the button_click_count session state variable will reset when the user closes the browser tab or refreshes it.",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Callbacks</span>"
    ]
  },
  {
    "objectID": "callbacks.html#more-detail-on-callbacks",
    "href": "callbacks.html#more-detail-on-callbacks",
    "title": "37  Callbacks",
    "section": "37.2 More detail on callbacks",
    "text": "37.2 More detail on callbacks\nWhile the ways mentioned here should work in most simple cases, you may want to take a look into the documentation to fully get your head around the power of state and callbacks.\nhttps://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state\n\nIt’s technically better practice to use the on_change callback if you’re storing the value of an input widget in session state - but just assigning it directly works in most cases",
    "crumbs": [
      "Advanced Concepts",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Callbacks</span>"
    ]
  },
  {
    "objectID": "exercise_1_identifying_opportunities.html",
    "href": "exercise_1_identifying_opportunities.html",
    "title": "45  Exercise 1: Into the Future",
    "section": "",
    "text": "Spend some time thinking about opportunities for web apps in your organisation.\nIs there a calculator in a spreadsheet everyone uses that could be an app instead?\nWhat about some kind of risk score calculator?\nAre there interactive dashboards in an out-of-date bit of software that could be redone in something else?",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Exercise 1: Into the Future</span>"
    ]
  },
  {
    "objectID": "exercise_2a_simple_calculator.html",
    "href": "exercise_2a_simple_calculator.html",
    "title": "46  Exercise 2a: Hello Streamlit!",
    "section": "",
    "text": "Your first task is to just create and run a simple Streamlit app.\nIt should have a title.\nIt should ask the user for\n\ntheir name (a text input)\ntheir monthly take home pay, their housing costs, their food costs, and their utility costs (a number input per field)\n\nIt should then\n\nDisplay their name\nDisplay the percentage of their monthly take home pay that is spent on housing\nDisplay the amount of money they have left after all costs are accounted for\n\n(for now, don’t worry if it displays an error until the user has entered all of the information!)\nYou might remember this from week 1 of Python coding!\nLook in exercises/2a to find the code to get you started - or copy it from below.\n\n# Get inputs from user, cast as integers and store in variables\nmonthly_take_home = int(input(\"What's your monthly take home income?\"))\nhousing_costs = int(input(\"What's your monthly housing cost (rent/mortgage)?\"))\nfood_costs = int(input(\"How much do you spend on food per month?\"))\nutility_costs = int(input(\"How much do you spend on utilities per month?\"))\n\n# Calculate remaining money after housing, food and utility costs\nremaining = monthly_take_home - housing_costs - food_costs - utility_costs\n\n# Calculate the percentage of take home that housing costs represent\nhousing_perc = housing_costs / monthly_take_home\n\n# Print the message to the user\nprint (f\"Your monthly amount after housing, food and utility costs is\",\n       f\"£{remaining}.  Your housing costs represent {housing_perc*100:.2f}%\",\n       f\"of your monthly take home.\")\n\nOnce you’ve got the basic calculator working, try\n\nAdding in an image or video of your choice\nAdding in some conditional logic so that the calculation won’t run and the messages won’t display if the user hasn’t entered their details\nTake a look at the documentation to see what is returned from the different kinds of inputs if the user hasn’t entered a value\nUsing st.error, st.warning and st.success to warn the user if the percentage of their income they are spending on housing exceeds a recommended threshold (e.g. over 50% on housing might be red, over 33% might be amber - how could you do that with these functions?)\nProvide some recommended amounts to the user based on their income",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Exercise 2a: Hello Streamlit!</span>"
    ]
  },
  {
    "objectID": "exercise_2b_wordcloud_app.html",
    "href": "exercise_2b_wordcloud_app.html",
    "title": "47  Exercise 2b: Wordcloudy with a chance of meatballs",
    "section": "",
    "text": "A few weeks ago you created some excellent wordclouds.\nI imagine all your friends now want to create wordclouds too - but they don’t have any Python knowledge.\nYou are going to make a web app that allows people to\n\nEnter some text\nGenerate a wordcloud and display it to the user\nDownload the resulting wordcloud\n\nYou can then add in some extra features:\n\nA way to allow them to select the colourscheme\nA default wordcloud (hint: think about setting a default value in your text input)\nAn option to upload a text file instead of pasting the text into an input\nA way to upload an image to use as a mask (I’ve provided a sample image that is in the right format to work)\nA way to remove words they want excluded (this one’s a bit trickier!)\n\nSome code snippets to help you build this are in exercises/2b - but you can also take a look at them below.\n\nfrom wordcloud import WordCloud, STOPWORDS\nimport string\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom PIL import Image\n\ndef make_wordcloud(text_input, filename=\"wordcloud.png\"):\n    stopwords = set(STOPWORDS)\n    tokens = text_input.split()\n    punctuation_mapping_table = str.maketrans('', '', string.punctuation)\n    tokens_stripped_of_punctuation = [token.translate(punctuation_mapping_table)\n                                  for token in tokens]\n    lower_tokens = [token.lower() for token in tokens_stripped_of_punctuation]\n\n    joined_string = (\" \").join(lower_tokens)\n\n    wordcloud = WordCloud(width=1800,\n                      height=1800,\n                      stopwords=stopwords,\n                      min_font_size=20).generate(joined_string)\n\n    plt.figure(figsize=(30,40))\n    # Turn off axes\n    plt.axis(\"off\")\n    # Display (essential to actually get the wordcloud in the image)\n    plt.imshow(wordcloud)\n    # Save the wordcloud to a file\n    plt.savefig(filename)\n\n\n###################################################\n# EXAMPLE USE: With string, which will be the output\n# of st.text_input() or st.text_area()\n###################################################\n\npenguin_text = \"\"\"\nPenguins are a group of aquatic flightless birds from the family Spheniscidae\nof the order Sphenisciformes.\nThey live almost exclusively in the Southern Hemisphere: only one species,\nthe Galapagos penguin, is found north of the Equator. Highly adapted for life in the ocean water,\npenguins have countershaded dark and white plumage and flippers for swimming. Most penguins feed\non krill, fish, squid and other forms of sea life which they catch with their bills and swallow\nwhole while swimming. A penguin has a spiny tongue and powerful jaws to grip slippery prey.\n\nThey spend about half of their lives on land and the other half in the sea.\nThe largest living species is the emperor penguin (Aptenodytes forsteri):\non average, adults are about 1.1 m (3 ft 7 in) tall and weigh 35 kg (77 lb).\nThe smallest penguin species is the little blue penguin (Eudyptula minor),\nalso known as the fairy penguin, which stands around 30–33 cm (12–13 in) tall and\nweighs 1.2–1.3 kg (2.6–2.9 lb).\nToday, larger penguins generally inhabit colder regions, and smaller penguins inhabit regions\nwith temperate or tropical climates. Some prehistoric penguin species were enormous:\nas tall or heavy as an adult human.There was a great diversity of species in subantarctic regions,\nand at least one giant species in a region around 2,000 km south of the equator 35 mya, during\nthe Late Eocene, a climate decidedly warmer than today.\n\"\"\"\n\nmake_wordcloud(penguin_text, \"penguin_sample_wordcloud.png\")\n\n\n###################################################\n# EXAMPLE USE: With .txt file\n###################################################\n\n# Read text in for which we want to generate word cloud\n# The read() method of the file object simply reads in the contents of the file\n# as one, single continuous string of text.\nwith open(\"bttf_reviews.txt\", \"r\") as f:\n    bttf_text = f.read()\n\nmake_wordcloud(bttf_text, \"bttf_sample_wordcloud.png\")\n\n\n\n###################################################\n###################################################\n# Advanced wordcloud function\n# This accepts an optional additional image to act\n# as a 'mask'\n# It also allows users to pass in additional\n# parameters that are accepted by the wordcloud\n# function itself\n###################################################\n###################################################\n\ndef make_wordcloud_with_image_mask(\n        text_input,\n        filename=\"wordcloud.png\",\n        mask_image=None,\n        **kwargs\n        ):\n    stopwords = set(STOPWORDS)\n    tokens = text_input.split()\n    punctuation_mapping_table = str.maketrans('', '', string.punctuation)\n    tokens_stripped_of_punctuation = [token.translate(punctuation_mapping_table)\n                                  for token in tokens]\n    lower_tokens = [token.lower() for token in tokens_stripped_of_punctuation]\n\n    joined_string = (\" \").join(lower_tokens)\n\n    plt.figure(figsize=(30,40))\n    plt.axis(\"off\")\n\n    if mask_image is not None:\n        mask_image_opened = Image.open(mask_image)\n        mask_array = np.array(mask_image_opened)\n\n        wordcloud = WordCloud(width=mask_array.shape[1],\n                    height=mask_array.shape[0],\n                    stopwords=stopwords,\n                    mask=mask_array,\n                    **kwargs).generate(joined_string)\n\n        plt.imshow(wordcloud, interpolation='bilinear')\n\n    else:\n        wordcloud = WordCloud(width=1800,\n                    height=1800,\n                    stopwords=stopwords,\n                    **kwargs).generate(joined_string)\n\n        plt.imshow(wordcloud)\n\n    plt.savefig(filename)\n\n\n\nmake_wordcloud_with_image_mask(penguin_text,\n                               \"penguin_sample_wordcloud_mask.png\",\n                               mask_image=\"penguin.jpg\"\n                               )\n\nmake_wordcloud_with_image_mask(penguin_text,\n                               \"penguin_sample_wordcloud_mask_smaller_text.png\",\n                               mask_image=\"penguin.jpg\",\n                               min_font_size=6\n                               )\n\nmake_wordcloud_with_image_mask(bttf_text,\n                               \"bttf_sample_wordcloud_blue.png\",\n                               colormap='Blues'\n                               )\n\nmake_wordcloud_with_image_mask(bttf_text,\n                               \"bttf_sample_wordcloud_pink_background_blue_text.png\",\n                               colormap='Blues',\n                               background_color='pink'\n                               )",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Exercise 2b: Wordcloudy with a chance of meatballs</span>"
    ]
  },
  {
    "objectID": "exercise_3_dashboard.html",
    "href": "exercise_3_dashboard.html",
    "title": "48  Exercise 3: Double Dash!!(boards)",
    "section": "",
    "text": "48.1 Dataset Overview\nSeveral dataframes are provided, as well as a geojson file of country outlines for mapping purposes.",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Exercise 3: Double Dash!!(boards)</span>"
    ]
  },
  {
    "objectID": "exercise_3_dashboard.html#dataset-overview",
    "href": "exercise_3_dashboard.html#dataset-overview",
    "title": "48  Exercise 3: Double Dash!!(boards)",
    "section": "",
    "text": "athlete_details_eventwise.csvcountry_medals_by_event.csvgames_cities.csvmedals_per_country_per_year.csvcountries_outlines.geojson\n\n\n\nimport pandas as pd\n\nathlete_details_eventwise = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_details_eventwise.head(5)\n\n\n\n\n\n\n\n\n\nName\nSex\nAge\nHeight\nWeight\nCountry\nNOC\nYear\nSport\nEvent\nMedal\n\n\n\n\n0\nAhmad Shah Abouwi\nM\nNaN\nNaN\nNaN\nAfghanistan\nAFG\n1956\nHockey\nHockey Men's Hockey\nNaN\n\n\n1\nJammal-ud-Din Affendi\nM\n28.0\nNaN\nNaN\nAfghanistan\nAFG\n1936\nHockey\nHockey Men's Hockey\nNaN\n\n\n2\nMohammad Anwar Afzal\nM\nNaN\nNaN\nNaN\nAfghanistan\nAFG\n1948\nFootball\nFootball Men's Football\nNaN\n\n\n3\nMohammad Aktar\nM\n17.0\n156.0\n48.0\nAfghanistan\nAFG\n1980\nWrestling\nWrestling Men's Light-Flyweight, Freestyle\nNaN\n\n\n4\nMohammad Daoud Anwary\nM\n22.0\nNaN\nNaN\nAfghanistan\nAFG\n1964\nWrestling\nWrestling Men's Bantamweight, Freestyle\nNaN\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\ncountry_medals_by_event = pd.read_csv(\"country_medals_by_event.csv\")\n\ncountry_medals_by_event.head()\n\n\n\n\n\n\n\n\n\nYear\nSport\nEvent\nBronze\nSilver\nGold\n\n\n\n\n0\n1896\nAthletics\nAthletics Men's 1,500 metres\nFrance\nUSA\nAustralia\n\n\n1\n1896\nAthletics\nAthletics Men's 100 metres\nHungary\nGermany\nUSA\n\n\n2\n1896\nAthletics\nAthletics Men's 110 metres Hurdles\nData Missing\nUK\nUSA\n\n\n3\n1896\nAthletics\nAthletics Men's 400 metres\nUK\nUSA\nUSA\n\n\n4\n1896\nAthletics\nAthletics Men's 800 metres\nGreece\nHungary\nAustralia\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\ngames_cities = pd.read_csv(\"games_cities.csv\")\n\ngames_cities.head()\n\n\n\n\n\n\n\n\n\nYear\nCity\n\n\n\n\n0\n1896\nAthina\n\n\n1\n1900\nParis\n\n\n2\n1904\nSt. Louis\n\n\n3\n1906\nAthina\n\n\n4\n1908\nLondon\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\nmedals_per_country_per_year.head()\n\n\n\n\n\n\n\n\n\nYear\nCountry\nNOC\nBronze\nSilver\nGold\nTotal\n\n\n\n\n0\n1896\nAustralia\nAUS\n1.0\n0.0\n2.0\n3.0\n\n\n1\n1896\nAustria\nAUT\n2.0\n1.0\n2.0\n5.0\n\n\n2\n1896\nDenmark\nDEN\n3.0\n2.0\n1.0\n6.0\n\n\n3\n1896\nFrance\nFRA\n2.0\n4.0\n5.0\n11.0\n\n\n4\n1896\nGermany\nGER\n2.0\n5.0\n7.0\n14.0\n\n\n\n\n\n\n\n\n\n\n\nimport geopandas\n\ncountry_outlines = geopandas.read_file(\"countries_outlines.geojson\")\n\ncountry_outlines.plot()",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Exercise 3: Double Dash!!(boards)</span>"
    ]
  },
  {
    "objectID": "exercise_3_dashboard.html#code-snippets",
    "href": "exercise_3_dashboard.html#code-snippets",
    "title": "48  Exercise 3: Double Dash!!(boards)",
    "section": "48.2 Code Snippets",
    "text": "48.2 Code Snippets\nSo you don’t have to spend too much time focussing on data manipulation and visualisation, here are a range of premade dataframes, graphs and maps you could choose to display in your app.\n\n48.2.1 Dataframes\n\nMedals per Country by YearMedals per Country by Year - Sorted by Multiple ColumnsTotal Medals per Country - All Time - Sorted by Single ColumnMedal Winners per event per yearMedal Winners per event per year - single sport and yearAthletes in most events per yearAthletes in most events per year - Details on Athlete with Most EventsAthlete with most total events competed inFiltering to a single athlete - Exact MatchFiltering to a single athlete - Partial MatchList of Events in YearCount of Events in Year\n\n\n\nimport pandas as pd\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\nmedals_per_country_per_year.sort_values(\"Total\", ascending=False).head(15)\n\n\n\n\n\n\n\n\n\nYear\nCountry\nNOC\nBronze\nSilver\nGold\nTotal\n\n\n\n\n45\n1904\nUSA\nUSA\n75.0\n79.0\n76.0\n230.0\n\n\n611\n1980\nRussia\nURS\n46.0\n69.0\n80.0\n195.0\n\n\n665\n1984\nUSA\nUSA\n30.0\n61.0\n82.0\n173.0\n\n\n81\n1908\nUK\nGBR\n37.0\n50.0\n56.0\n143.0\n\n\n707\n1988\nRussia\nURS\n46.0\n31.0\n54.0\n131.0\n\n\n596\n1980\nGermany\nGDR\n42.0\n37.0\n47.0\n126.0\n\n\n574\n1976\nRussia\nURS\n35.0\n41.0\n49.0\n125.0\n\n\n1265\n2016\nUSA\nUSA\n38.0\n37.0\n46.0\n121.0\n\n\n771\n1992\nRussia\nEUN\n29.0\n38.0\n45.0\n112.0\n\n\n1096\n2008\nUSA\nUSA\n35.0\n39.0\n36.0\n110.0\n\n\n215\n1932\nUSA\nUSA\n30.0\n36.0\n44.0\n110.0\n\n\n783\n1992\nUSA\nUSA\n37.0\n34.0\n37.0\n108.0\n\n\n493\n1968\nUSA\nUSA\n34.0\n28.0\n45.0\n107.0\n\n\n1181\n2012\nUSA\nUSA\n29.0\n28.0\n46.0\n103.0\n\n\n398\n1960\nRussia\nURS\n31.0\n29.0\n43.0\n103.0\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\nmedals_per_country_per_year.sort_values([\"Gold\", \"Total\"], ascending=True).head(15)\n\n\n\n\n\n\n\n\n\nYear\nCountry\nNOC\nBronze\nSilver\nGold\nTotal\n\n\n\n\n14\n1900\nColombia\nCOL\n0.0\n1.0\n0.0\n1.0\n\n\n25\n1900\nMexico\nMEX\n1.0\n0.0\n0.0\n1.0\n\n\n65\n1908\nAustria\nAUT\n1.0\n0.0\n0.0\n1.0\n\n\n111\n1920\nGreece\nGRE\n0.0\n1.0\n0.0\n1.0\n\n\n114\n1920\nLuxembourg\nLUX\n0.0\n1.0\n0.0\n1.0\n\n\n116\n1920\nNew Zealand\nNZL\n1.0\n0.0\n0.0\n1.0\n\n\n135\n1924\nHaiti\nHAI\n1.0\n0.0\n0.0\n1.0\n\n\n139\n1924\nJapan\nJPN\n1.0\n0.0\n0.0\n1.0\n\n\n141\n1924\nMonaco\nMON\n1.0\n0.0\n0.0\n1.0\n\n\n143\n1924\nNew Zealand\nNZL\n1.0\n0.0\n0.0\n1.0\n\n\n146\n1924\nPortugal\nPOR\n1.0\n0.0\n0.0\n1.0\n\n\n147\n1924\nRomania\nROU\n1.0\n0.0\n0.0\n1.0\n\n\n160\n1928\nChile\nCHI\n0.0\n1.0\n0.0\n1.0\n\n\n168\n1928\nHaiti\nHAI\n0.0\n1.0\n0.0\n1.0\n\n\n178\n1928\nPhilippines\nPHI\n1.0\n0.0\n0.0\n1.0\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ntotal_medals_all_time = (\n    medals_per_country_per_year.drop(columns=[\"Year\", \"NOC\"])\n    .groupby('Country').sum()\n    .reset_index()\n    .sort_values('Total', ascending=False)\n    )\n\ntotal_medals_all_time.head(15)\n\n\n\n\n\n\n\n\n\nCountry\nBronze\nSilver\nGold\nTotal\n\n\n\n\n123\nUSA\n707.0\n802.0\n1035.0\n2544.0\n\n\n98\nRussia\n487.0\n498.0\n592.0\n1577.0\n\n\n41\nGermany\n490.0\n457.0\n442.0\n1389.0\n\n\n122\nUK\n298.0\n316.0\n278.0\n892.0\n\n\n38\nFrance\n282.0\n255.0\n233.0\n770.0\n\n\n57\nItaly\n198.0\n191.0\n219.0\n608.0\n\n\n20\nChina\n154.0\n163.0\n228.0\n545.0\n\n\n4\nAustralia\n197.0\n171.0\n150.0\n518.0\n\n\n110\nSweden\n188.0\n175.0\n150.0\n513.0\n\n\n48\nHungary\n172.0\n154.0\n178.0\n504.0\n\n\n60\nJapan\n161.0\n134.0\n142.0\n437.0\n\n\n37\nFinland\n120.0\n86.0\n104.0\n310.0\n\n\n18\nCanada\n137.0\n104.0\n64.0\n305.0\n\n\n97\nRomania\n120.0\n95.0\n88.0\n303.0\n\n\n82\nNetherlands\n114.0\n95.0\n88.0\n297.0\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nmedals_by_event = pd.read_csv(\"country_medals_by_event.csv\")\nmedals_by_event\n\n\n\n\n\n\n\n\n\nYear\nSport\nEvent\nBronze\nSilver\nGold\n\n\n\n\n0\n1896\nAthletics\nAthletics Men's 1,500 metres\nFrance\nUSA\nAustralia\n\n\n1\n1896\nAthletics\nAthletics Men's 100 metres\nHungary\nGermany\nUSA\n\n\n2\n1896\nAthletics\nAthletics Men's 110 metres Hurdles\nData Missing\nUK\nUSA\n\n\n3\n1896\nAthletics\nAthletics Men's 400 metres\nUK\nUSA\nUSA\n\n\n4\n1896\nAthletics\nAthletics Men's 800 metres\nGreece\nHungary\nAustralia\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n5211\n2016\nWrestling\nWrestling Women's Flyweight, Freestyle\nBulgaria\nAzerbaijan\nJapan\n\n\n5212\n2016\nWrestling\nWrestling Women's Heavyweight, Freestyle\nChina\nKazakhstan\nCanada\n\n\n5213\n2016\nWrestling\nWrestling Women's Light-Heavyweight, Freestyle\nKazakhstan\nRussia\nJapan\n\n\n5214\n2016\nWrestling\nWrestling Women's Lightweight, Freestyle\nIndia\nRussia\nJapan\n\n\n5215\n2016\nWrestling\nWrestling Women's Middleweight, Freestyle\nKazakhstan\nBelarus\nJapan\n\n\n\n\n5216 rows × 6 columns\n\n\n\n\n\n\n\nimport pandas as pd\n\nselected_year = 2012\nselected_sport = \"Judo\"\n\nmedals_by_event = pd.read_csv(\"country_medals_by_event.csv\")\nmedals_by_event\n\n\n\n\n\n\n\n\n\nYear\nSport\nEvent\nBronze\nSilver\nGold\n\n\n\n\n0\n1896\nAthletics\nAthletics Men's 1,500 metres\nFrance\nUSA\nAustralia\n\n\n1\n1896\nAthletics\nAthletics Men's 100 metres\nHungary\nGermany\nUSA\n\n\n2\n1896\nAthletics\nAthletics Men's 110 metres Hurdles\nData Missing\nUK\nUSA\n\n\n3\n1896\nAthletics\nAthletics Men's 400 metres\nUK\nUSA\nUSA\n\n\n4\n1896\nAthletics\nAthletics Men's 800 metres\nGreece\nHungary\nAustralia\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n5211\n2016\nWrestling\nWrestling Women's Flyweight, Freestyle\nBulgaria\nAzerbaijan\nJapan\n\n\n5212\n2016\nWrestling\nWrestling Women's Heavyweight, Freestyle\nChina\nKazakhstan\nCanada\n\n\n5213\n2016\nWrestling\nWrestling Women's Light-Heavyweight, Freestyle\nKazakhstan\nRussia\nJapan\n\n\n5214\n2016\nWrestling\nWrestling Women's Lightweight, Freestyle\nIndia\nRussia\nJapan\n\n\n5215\n2016\nWrestling\nWrestling Women's Middleweight, Freestyle\nKazakhstan\nBelarus\nJapan\n\n\n\n\n5216 rows × 6 columns\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nmost_events_per_year_by_athlete = athlete_statistics.value_counts(['Name', 'Country', 'Year']).reset_index()\n\nmost_events_per_year_by_athlete.head(15)\n\n\n\n\n\n\n\n\n\nName\nCountry\nYear\ncount\n\n\n\n\n0\nRobert Tait McKenzie\nCanada\n1932\n44\n\n\n1\nAlfrd (Arnold-) Hajs (Guttmann-)\nHungary\n1928\n28\n\n\n2\nMiltiades Manno\nHungary\n1932\n27\n\n\n3\nAlfred James Munnings\nUK\n1948\n25\n\n\n4\nWilhelm (William) Hunt Diederich\nUSA\n1932\n19\n\n\n5\nAcee Blue Eagle\nUSA\n1932\n18\n\n\n6\nJean Lucien Nicolas Jacoby\nLuxembourg\n1936\n17\n\n\n7\nStanisaw Noakowski\nPoland\n1928\n17\n\n\n8\nMahonri Mackintosh Young\nUSA\n1932\n16\n\n\n9\nngel Zrraga Argelles\nMexico\n1928\n16\n\n\n10\nGeorges-mile Fauvelle\nFrance\n1928\n16\n\n\n11\nPierre De Soete\nBelgium\n1928\n16\n\n\n12\nWillis Augustus Lee, Jr.\nUSA\n1920\n15\n\n\n13\nCharles Zeller Klauder\nUSA\n1928\n14\n\n\n14\nGeorg Vilhelm Lagerstedt\nSweden\n1936\n13\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nmost_events_per_year_by_athlete = athlete_statistics.value_counts(['Name', 'Country', 'Year']).reset_index()\n\nathlete_name_most_events = most_events_per_year_by_athlete.head(1)['Name'].values[0]\nathlete_name_most_events_year = most_events_per_year_by_athlete.head(1)['Year'].values[0]\n\nathlete_statistics[(athlete_statistics[\"Name\"] == athlete_name_most_events) &\n                    (athlete_statistics[\"Year\"] == athlete_name_most_events_year)].head(15)\n\n\n\n\n\n\n\n\n\nName\nSex\nAge\nHeight\nWeight\nCountry\nNOC\nYear\nSport\nEvent\nMedal\n\n\n\n\n32262\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Medals And...\nBronze\n\n\n32263\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32264\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32265\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32266\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32267\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32268\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32269\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32270\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32271\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32272\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32273\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32274\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32275\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n32276\nRobert Tait McKenzie\nM\n65.0\nNaN\nNaN\nCanada\nCAN\n1932\nArt Competitions\nArt Competitions Mixed Sculpturing, Unknown Event\nNaN\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics.value_counts(['Name', 'Sex', 'Country']).reset_index()\n\n\n\n\n\n\n\n\n\nName\nSex\nCountry\ncount\n\n\n\n\n0\nRobert Tait McKenzie\nM\nCanada\n58\n\n\n1\nHeikki Ilmari Savolainen\nM\nFinland\n39\n\n\n2\nJoseph \"Josy\" Stoffel\nM\nLuxembourg\n38\n\n\n3\nIoannis Theofilakis\nM\nGreece\n36\n\n\n4\nTakashi Ono\nM\nJapan\n33\n\n\n...\n...\n...\n...\n...\n\n\n116737\nJan Wijnants\nM\nBelgium\n1\n\n\n116738\nJan Wallisch\nM\nCzech Republic\n1\n\n\n116739\nJan Wagenaar\nM\nNetherlands\n1\n\n\n116740\nJan Wadas\nM\nPoland\n1\n\n\n116741\nKaren Rayr van der Veen (-Wilkinson)\nF\nSouth Africa\n1\n\n\n\n\n116742 rows × 4 columns\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nchosen_athlete = \"Simone Arianne Biles\"\n\nathlete_statistics[athlete_statistics[\"Name\"] == chosen_athlete]\n\n\n\n\n\n\n\n\n\nName\nSex\nAge\nHeight\nWeight\nCountry\nNOC\nYear\nSport\nEvent\nMedal\n\n\n\n\n203896\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Individual All-Around\nGold\n\n\n203897\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Team All-Around\nGold\n\n\n203898\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Floor Exercise\nGold\n\n\n203899\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Horse Vault\nGold\n\n\n203900\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Uneven Bars\nNaN\n\n\n203901\nSimone Arianne Biles\nF\n19.0\n143.0\n47.0\nUSA\nUSA\n2016\nGymnastics\nGymnastics Women's Balance Beam\nBronze\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nsearch_string = \"Ben\"\n\nathlete_statistics[athlete_statistics[\"Name\"].str.contains(search_string)]\n\n\n\n\n\n\n\n\n\nName\nSex\nAge\nHeight\nWeight\nCountry\nNOC\nYear\nSport\nEvent\nMedal\n\n\n\n\n271\nBenaissa Abed\nM\n23.0\n170.0\n51.0\nAlgeria\nALG\n1988\nBoxing\nBoxing Men's Flyweight\nNaN\n\n\n327\nBen Ali Beghouach\nM\n21.0\n186.0\n89.0\nAlgeria\nALG\n1988\nHandball\nHandball Men's Handball\nNaN\n\n\n328\nBen Ali Beghouach\nM\n29.0\n186.0\n89.0\nAlgeria\nALG\n1996\nHandball\nHandball Men's Handball\nNaN\n\n\n348\nDjillali Ben Brahim\nM\n27.0\n178.0\n71.0\nAlgeria\nALG\n1980\nJudo\nJudo Men's Lightweight\nNaN\n\n\n349\nReda Ben Chehima\nM\n26.0\n175.0\n75.0\nAlgeria\nALG\n2004\nFencing\nFencing Men's Sabre, Individual\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n219770\nLidija Benedeti-Lapajne\nF\n25.0\n175.0\n64.0\nSerbia\nYUG\n1984\nAthletics\nAthletics Women's High Jump\nNaN\n\n\n219771\nMarijan Bene\nM\n25.0\n170.0\n68.0\nSerbia\nYUG\n1976\nBoxing\nBoxing Men's Welterweight\nNaN\n\n\n221821\nBenson Mulomba\nM\n22.0\n177.0\n54.0\nZambia\nZAM\n1972\nAthletics\nAthletics Men's 800 metres\nNaN\n\n\n221843\nBenny Muziyo\nM\n23.0\nNaN\nNaN\nZambia\nZAM\n2016\nBoxing\nBoxing Men's Middleweight\nNaN\n\n\n222158\nGavin Ben Sutherland\nM\n37.0\n186.0\n78.0\nZimbabwe\nZIM\n2016\nArchery\nArchery Men's Individual\nNaN\n\n\n\n\n1617 rows × 11 columns\n\n\n\n\n\n\n\nimport pandas as pd\n\nselected_year = 2012\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics[athlete_statistics[\"Year\"] == selected_year][['Sport', 'Event']].drop_duplicates().reset_index(drop=True).head(15)\n\n\n\n\n\n\n\n\n\nSport\nEvent\n\n\n\n\n0\nAthletics\nAthletics Men's 100 metres\n\n\n1\nTaekwondo\nTaekwondo Men's Welterweight\n\n\n2\nBoxing\nBoxing Men's Flyweight\n\n\n3\nJudo\nJudo Men's Half-Lightweight\n\n\n4\nAthletics\nAthletics Women's 100 metres\n\n\n5\nTaekwondo\nTaekwondo Men's Featherweight\n\n\n6\nWeightlifting\nWeightlifting Women's Lightweight\n\n\n7\nSwimming\nSwimming Women's 100 metres Butterfly\n\n\n8\nWeightlifting\nWeightlifting Men's Lightweight\n\n\n9\nAthletics\nAthletics Men's Shot Put\n\n\n10\nSwimming\nSwimming Men's 100 metres Freestyle\n\n\n11\nWeightlifting\nWeightlifting Men's Middle-Heavyweight\n\n\n12\nJudo\nJudo Women's Half-Lightweight\n\n\n13\nShooting\nShooting Men's Air Pistol, 10 metres\n\n\n14\nShooting\nShooting Men's Free Pistol, 50 metres\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics[athlete_statistics[\"Year\"] == selected_year][['Sport', 'Event']].drop_duplicates().value_counts('Sport').reset_index().head(15)\n\n\n\n\n\n\n\n\n\nSport\ncount\n\n\n\n\n0\nAthletics\n47\n\n\n1\nSwimming\n34\n\n\n2\nWrestling\n18\n\n\n3\nCycling\n18\n\n\n4\nCanoeing\n16\n\n\n5\nShooting\n15\n\n\n6\nWeightlifting\n15\n\n\n7\nGymnastics\n14\n\n\n8\nJudo\n14\n\n\n9\nRowing\n14\n\n\n10\nBoxing\n13\n\n\n11\nFencing\n10\n\n\n12\nSailing\n10\n\n\n13\nTaekwondo\n8\n\n\n14\nDiving\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n48.2.2 Useful Lists and Info From Datasets\n\nList of SportsList of Events in a particular yearEarliest and Latest Years in DatasetsOldest and Youngest Athletes in given year in given event\n\n\n\nimport pandas as pd\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nall_sports = athlete_statistics[\"Sport\"].drop_duplicates().tolist()\n\nprint(all_sports)\n\n['Hockey', 'Football', 'Wrestling', 'Athletics', 'Taekwondo', 'Judo', 'Boxing', 'Weightlifting', 'Shooting', 'Fencing', 'Swimming', 'Sailing', 'Synchronized Swimming', 'Triathlon', 'Equestrianism', 'Cycling', 'Volleyball', 'Handball', 'Rowing', 'Table Tennis', 'Tennis', 'Gymnastics', 'Trampolining', 'Badminton', 'Canoeing', 'Beach Volleyball', 'Basketball', 'Diving', 'Rugby', 'Rugby Sevens', 'Polo', 'Modern Pentathlon', 'Archery', 'Water Polo', 'Art Competitions', 'Golf', 'Figure Skating', 'Softball', 'Baseball', 'Rhythmic Gymnastics', 'Tug-Of-War', 'Ice Hockey', 'Lacrosse', 'Basque Pelota', 'Cricket', 'Croquet', 'Motorboating', 'Racquets', 'Jeu De Paume', 'Alpinism', 'Aeronautics', 'Roque']\n\n\n\n\n\nimport pandas as pd\n\nselected_year = 2012\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics_year = athlete_statistics[athlete_statistics[\"Year\"] == selected_year]\n\nall_events = athlete_statistics_year[\"Event\"].drop_duplicates().tolist()\n\nprint(all_events)\n\n[\"Athletics Men's 100 metres\", \"Taekwondo Men's Welterweight\", \"Boxing Men's Flyweight\", \"Judo Men's Half-Lightweight\", \"Athletics Women's 100 metres\", \"Taekwondo Men's Featherweight\", \"Weightlifting Women's Lightweight\", \"Swimming Women's 100 metres Butterfly\", \"Weightlifting Men's Lightweight\", \"Athletics Men's Shot Put\", \"Swimming Men's 100 metres Freestyle\", \"Weightlifting Men's Middle-Heavyweight\", \"Judo Women's Half-Lightweight\", \"Shooting Men's Air Pistol, 10 metres\", \"Shooting Men's Free Pistol, 50 metres\", \"Boxing Men's Welterweight\", \"Volleyball Women's Volleyball\", \"Athletics Men's 5,000 metres\", \"Athletics Women's Marathon\", \"Judo Women's Heavyweight\", \"Athletics Men's 3,000 metres Steeplechase\", \"Wrestling Men's Lightweight, Greco-Roman\", \"Boxing Men's Light-Heavyweight\", \"Weightlifting Men's Heavyweight\", \"Boxing Men's Heavyweight\", \"Boxing Men's Lightweight\", \"Taekwondo Men's Flyweight\", \"Athletics Men's Marathon\", \"Boxing Men's Light-Flyweight\", \"Fencing Women's Foil, Individual\", \"Cycling Men's Road Race, Individual\", \"Wrestling Men's Light-Heavyweight, Freestyle\", \"Athletics Men's 800 metres\", \"Athletics Men's 1,500 metres\", \"Fencing Women's Sabre, Individual\", \"Athletics Men's Triple Jump\", \"Boxing Men's Bantamweight\", \"Boxing Men's Middleweight\", \"Rowing Women's Single Sculls\", \"Wrestling Men's Welterweight, Greco-Roman\", \"Swimming Men's 200 metres Butterfly\", \"Swimming Women's 100 metres Backstroke\", \"Shooting Men's Trap\", \"Handball Women's Handball\", \"Basketball Women's Basketball\", \"Athletics Women's 800 metres\", \"Swimming Women's 50 metres Freestyle\", \"Canoeing Men's Canadian Singles, 200 metres\", \"Canoeing Men's Canadian Doubles, 1,000 metres\", \"Judo Women's Middleweight\", \"Canoeing Men's Canadian Singles, 1,000 metres\", \"Swimming Men's 400 metres Individual Medley\", \"Athletics Women's 400 metres\", \"Athletics Men's 200 metres\", \"Rowing Women's Coxless Pairs\", \"Sailing Men's One Person Dinghy\", \"Shooting Men's Small-Bore Rifle, Prone, 50 metres\", \"Volleyball Men's Volleyball\", \"Hockey Women's Hockey\", \"Swimming Women's 400 metres Individual Medley\", \"Hockey Men's Hockey\", \"Tennis Men's Singles\", \"Wrestling Women's Flyweight, Freestyle\", \"Swimming Women's 800 metres Freestyle\", \"Swimming Women's 10 kilometres Open Water\", \"Sailing Men's Two Person Dinghy\", \"Basketball Men's Basketball\", \"Judo Men's Middleweight\", \"Handball Men's Handball\", \"Athletics Men's 20 kilometres Walk\", \"Sailing Women's One Person Dinghy\", \"Rowing Men's Lightweight Double Sculls\", \"Athletics Men's Hammer Throw\", \"Athletics Women's Discus Throw\", \"Canoeing Men's Kayak Doubles, 200 metres\", \"Athletics Women's Hammer Throw\", 'Tennis Mixed Doubles', \"Tennis Women's Doubles\", \"Rowing Men's Single Sculls\", \"Beach Volleyball Women's Beach Volleyball\", \"Swimming Men's 50 metres Freestyle\", \"Swimming Men's 100 metres Backstroke\", \"Rowing Women's Lightweight Double Sculls\", 'Equestrianism Mixed Jumping, Individual', \"Athletics Men's Discus Throw\", \"Table Tennis Men's Singles\", \"Taekwondo Women's Flyweight\", \"Sailing Women's Windsurfer\", \"Judo Men's Half-Middleweight\", \"Gymnastics Men's Floor Exercise\", \"Gymnastics Men's Rings\", \"Sailing Women's Two Person Dinghy\", \"Tennis Men's Doubles\", \"Judo Women's Extra-Lightweight\", \"Swimming Men's 400 metres Freestyle\", \"Swimming Men's 1,500 metres Freestyle\", \"Gymnastics Women's Individual All-Around\", \"Gymnastics Women's Floor Exercise\", \"Gymnastics Women's Uneven Bars\", \"Gymnastics Women's Balance Beam\", \"Cycling Men's Omnium\", \"Cycling Men's BMX\", \"Sailing Men's Windsurfer\", \"Canoeing Men's Canadian Singles, Slalom\", \"Rowing Men's Double Sculls\", \"Synchronized Swimming Women's Duet\", \"Judo Men's Half-Heavyweight\", \"Cycling Men's Mountainbike, Cross-Country\", \"Triathlon Men's Olympic Distance\", \"Athletics Men's Javelin Throw\", \"Wrestling Men's Heavyweight, Greco-Roman\", \"Weightlifting Women's Light-Heavyweight\", \"Gymnastics Men's Individual All-Around\", \"Gymnastics Men's Horse Vault\", \"Gymnastics Men's Parallel Bars\", \"Gymnastics Men's Horizontal Bar\", \"Gymnastics Men's Pommelled Horse\", \"Judo Men's Extra-Lightweight\", \"Athletics Women's Javelin Throw\", \"Wrestling Men's Featherweight, Freestyle\", \"Wrestling Men's Middleweight, Greco-Roman\", \"Weightlifting Men's Light-Heavyweight\", \"Weightlifting Women's Super-Heavyweight\", \"Athletics Men's Long Jump\", \"Wrestling Men's Super-Heavyweight, Greco-Roman\", \"Wrestling Men's Welterweight, Freestyle\", \"Weightlifting Men's Super-Heavyweight\", \"Swimming Women's 100 metres Freestyle\", \"Athletics Men's 50 kilometres Walk\", \"Athletics Men's 4 x 100 metres Relay\", \"Synchronized Swimming Women's Team\", \"Judo Men's Heavyweight\", \"Shooting Women's Air Pistol, 10 metres\", \"Swimming Women's 4 x 200 metres Freestyle Relay\", \"Shooting Women's Trap\", \"Archery Women's Individual\", \"Swimming Women's 200 metres Freestyle\", \"Swimming Women's 400 metres Freestyle\", \"Shooting Men's Skeet\", \"Water Polo Women's Water Polo\", \"Water Polo Men's Water Polo\", \"Rowing Men's Lightweight Coxless Fours\", \"Cycling Men's Team Pursuit, 4,000 metres\", \"Athletics Women's 400 metres Hurdles\", \"Gymnastics Women's Team All-Around\", \"Rowing Men's Coxed Eights\", \"Athletics Women's Pole Vault\", \"Canoeing Women's Kayak Fours, 500 metres\", \"Diving Women's Platform\", \"Cycling Women's BMX\", \"Rowing Men's Coxless Pairs\", \"Athletics Women's 1,500 metres\", \"Diving Women's Synchronized Platform\", 'Equestrianism Mixed Three-Day Event, Individual', 'Equestrianism Mixed Three-Day Event, Team', \"Swimming Women's 4 x 100 metres Freestyle Relay\", \"Sailing Men's One Person Heavyweight Dinghy\", \"Shooting Men's Rapid-Fire Pistol, 25 metres\", \"Shooting Women's Sporting Pistol, 25 metres\", \"Rowing Men's Coxless Fours\", \"Rowing Women's Coxed Eights\", \"Badminton Women's Doubles\", \"Canoeing Men's Kayak Fours, 1,000 metres\", \"Athletics Men's 400 metres Hurdles\", \"Athletics Men's 4 x 400 metres Relay\", \"Diving Men's Platform\", \"Swimming Women's 200 metres Individual Medley\", \"Swimming Women's 4 x 100 metres Medley Relay\", \"Rowing Women's Double Sculls\", \"Sailing Women's Three Person Keelboat\", \"Triathlon Women's Olympic Distance\", \"Swimming Men's 4 x 100 metres Freestyle Relay\", \"Swimming Men's 4 x 100 metres Medley Relay\", \"Canoeing Men's Kayak Singles, Slalom\", \"Cycling Women's Team Pursuit\", \"Cycling Women's Omnium\", \"Modern Pentathlon Women's Individual\", \"Rowing Women's Quadruple Sculls\", \"Modern Pentathlon Men's Individual\", \"Boxing Women's Middleweight\", \"Canoeing Women's Kayak Doubles, 500 metres\", \"Rowing Men's Quadruple Sculls\", \"Swimming Women's 200 metres Breaststroke\", \"Canoeing Women's Kayak Singles, Slalom\", \"Table Tennis Men's Team\", \"Swimming Men's 200 metres Freestyle\", \"Swimming Men's 4 x 200 metres Freestyle Relay\", \"Trampolining Men's Individual\", \"Cycling Women's Road Race, Individual\", \"Cycling Women's Individual Time Trial\", \"Cycling Men's Team Sprint\", \"Shooting Men's Air Rifle, 10 metres\", \"Swimming Men's 100 metres Butterfly\", \"Swimming Men's 200 metres Individual Medley\", \"Swimming Women's 200 metres Butterfly\", 'Equestrianism Mixed Dressage, Individual', 'Equestrianism Mixed Dressage, Team', 'Equestrianism Mixed Jumping, Team', \"Cycling Women's Mountainbike, Cross-Country\", \"Swimming Women's 200 metres Backstroke\", \"Athletics Men's Pole Vault\", \"Boxing Men's Light-Welterweight\", \"Swimming Men's 10 kilometres Open Water\", \"Canoeing Men's Canadian Doubles, Slalom\", \"Sailing Men's Skiff\", \"Swimming Women's 100 metres Breaststroke\", \"Athletics Women's 3,000 metres Steeplechase\", \"Athletics Women's 20 kilometres Walk\", \"Swimming Men's 200 metres Backstroke\", \"Table Tennis Women's Singles\", \"Table Tennis Women's Team\", \"Weightlifting Women's Middleweight\", \"Boxing Men's Super-Heavyweight\", \"Shooting Women's Skeet\", \"Shooting Men's Double Trap\", \"Taekwondo Women's Welterweight\", \"Cycling Women's Team Sprint\", \"Athletics Women's 100 metres Hurdles\", \"Cycling Women's Sprint\", \"Cycling Women's Keirin\", \"Rhythmic Gymnastics Women's Individual\", \"Badminton Women's Singles\", \"Canoeing Women's Kayak Singles, 200 metres\", \"Canoeing Women's Kayak Singles, 500 metres\", \"Diving Women's Springboard\", \"Cycling Men's Sprint\", \"Cycling Men's Keirin\", \"Judo Women's Lightweight\", \"Swimming Men's 100 metres Breaststroke\", \"Swimming Men's 200 metres Breaststroke\", \"Cycling Men's Individual Time Trial\", \"Shooting Men's Small-Bore Rifle, Three Positions, 50 metres\", \"Shooting Women's Air Rifle, 10 metres\", \"Diving Women's Synchronized Springboard\", \"Canoeing Men's Kayak Doubles, 1,000 metres\", \"Badminton Men's Doubles\", \"Athletics Men's 400 metres\", \"Athletics Men's 10,000 metres\", \"Canoeing Men's Kayak Singles, 200 metres\", \"Canoeing Men's Kayak Singles, 1,000 metres\", \"Tennis Women's Singles\", \"Wrestling Men's Lightweight, Freestyle\", \"Shooting Women's Small-Bore Rifle, Three Positions, 50 metres\", \"Diving Men's Springboard\", \"Athletics Women's 5,000 metres\", \"Athletics Women's 10,000 metres\", \"Archery Men's Individual\", \"Athletics Women's Heptathlon\", \"Beach Volleyball Men's Beach Volleyball\", \"Judo Women's Half-Middleweight\", \"Wrestling Men's Light-Heavyweight, Greco-Roman\", \"Badminton Men's Singles\", \"Fencing Men's Foil, Individual\", \"Wrestling Men's Featherweight, Greco-Roman\", \"Wrestling Men's Middleweight, Freestyle\", \"Wrestling Men's Super-Heavyweight, Freestyle\", \"Judo Men's Lightweight\", \"Wrestling Men's Heavyweight, Freestyle\", \"Wrestling Women's Lightweight, Freestyle\", \"Weightlifting Men's Bantamweight\", \"Athletics Women's 4 x 100 metres Relay\", \"Athletics Men's High Jump\", \"Athletics Women's 200 metres\", \"Athletics Men's 110 metres Hurdles\", \"Athletics Women's Long Jump\", \"Judo Women's Half-Heavyweight\", \"Athletics Women's Triple Jump\", \"Athletics Women's High Jump\", \"Athletics Men's Decathlon\", \"Football Men's Football\", \"Fencing Men's Sabre, Individual\", \"Fencing Men's Sabre, Team\", \"Rhythmic Gymnastics Women's Group\", \"Athletics Women's 4 x 400 metres Relay\", \"Athletics Women's Shot Put\", \"Weightlifting Women's Heavyweight\", \"Gymnastics Women's Horse Vault\", \"Wrestling Women's Heavyweight, Freestyle\", \"Trampolining Women's Individual\", \"Football Women's Football\", \"Boxing Women's Lightweight\", \"Taekwondo Women's Heavyweight\", \"Boxing Women's Flyweight\", \"Sailing Men's Two Person Keelboat\", \"Fencing Men's epee, Individual\", \"Wrestling Women's Middleweight, Freestyle\", \"Taekwondo Men's Heavyweight\", \"Diving Men's Synchronized Springboard\", 'Badminton Mixed Doubles', \"Fencing Women's epee, Individual\", \"Taekwondo Women's Featherweight\", \"Diving Men's Synchronized Platform\", \"Gymnastics Men's Team All-Around\", \"Archery Women's Team\", \"Archery Men's Team\", \"Fencing Men's Foil, Team\", \"Fencing Women's epee, Team\", \"Weightlifting Men's Middleweight\", \"Weightlifting Women's Flyweight\", \"Weightlifting Men's Featherweight\", \"Weightlifting Women's Featherweight\", \"Fencing Women's Foil, Team\"]\n\n\n\n\n\nimport pandas as pd\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\nearliest_year = medals_per_country_per_year[\"Year\"].min()\n\nlatest_year = medals_per_country_per_year[\"Year\"].max()\n\nprint(f\"The earliest year in the dataset is {earliest_year}\")\n\nprint(f\"The latest year in the dataset is {latest_year}\")\n\nThe earliest year in the dataset is 1896\nThe latest year in the dataset is 2016\n\n\n\n\n\nimport pandas as pd\n\nselected_year = 2012\nselected_sport = \"Gymnastics\"\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nathlete_statistics_filtered = athlete_statistics[(athlete_statistics[\"Year\"] == selected_year) & (athlete_statistics[\"Sport\"] == selected_sport)]\n\nyoungest_athlete = athlete_statistics_filtered[\"Age\"].min()\n\noldest_athlete = athlete_statistics_filtered[\"Age\"].max()\n\nprint(f\"The youngest athlete who competed in {selected_sport} in {selected_year} was {youngest_athlete:.0f} years old.\")\n\nprint(f\"The oldest athlete who competed in {selected_sport} in {selected_year} was{oldest_athlete:.0f} years old.\")\n\nThe youngest athlete who competed in Gymnastics in 2012 was 15 years old.\nThe oldest athlete who competed in Gymnastics in 2012 was39 years old.\n\n\n\n\n\n\n\n48.2.3 Plots\n\nSingle Medal Type - per Country by YearSingle Medal Type - per Country by Year - Single CountryAll Medal Types - Single CountryTotal Medals per Country - Bar Chart of Summed Values - Limiting Number of CountriesTotal Medals per Country - Stacked Bar ChartTotal Medals per Country - Stacked Bar Chart as Percentage of TotalAthlete Gender Balance by Year - Stacked Bar Chart (Parts of a Whole)Events per Sport Per Year\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nselected_countries = [\"UK\", \"USA\", \"Canada\", \"Australia\", \"China\", \"Russia\", \"France\", \"Germany\", \"Italy\"]\n\nselected_medal_type = \"Bronze\"\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\npx.line(medals_per_country_per_year[medals_per_country_per_year[\"Country\"].isin(selected_countries)],\n        x=\"Year\", y=selected_medal_type, color=\"Country\",\n        title=f\"{selected_medal_type} medals over time - subset of countries\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nchosen_country = \"UK\"\nselected_medal_type = \"Bronze\"\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\npx.line(medals_per_country_per_year[medals_per_country_per_year[\"Country\"] == chosen_country],\n        y=selected_medal_type, x=\"Year\",\n        title=f\"{selected_medal_type} medals for {chosen_country} over time\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nchosen_country = \"UK\"\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\nmedals_per_country_per_year_long = medals_per_country_per_year.melt(id_vars=[\"Year\", \"Country\", \"NOC\"])\n\npx.line(medals_per_country_per_year_long[medals_per_country_per_year_long[\"Country\"] == chosen_country],\n        y=\"value\", x=\"Year\", color=\"variable\",\n        color_discrete_sequence=[\"orange\", \"silver\", \"gold\", \"blue\"],\n        title=f\"Medals Won over Time - {chosen_country}\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nrows_to_display = 10\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ntotal_medals_all_time = (\n    medals_per_country_per_year.drop(columns=[\"Year\", \"NOC\"])\n    .groupby('Country').sum()\n    .reset_index()\n    .sort_values('Total', ascending=False)\n    )\n\npx.bar(total_medals_all_time.head(rows_to_display), x='Country', y='Total',\n       title=f\"Total Number of Medals since 1896 - Top {rows_to_display} Countries\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ntotal_medals_all_time = (\n    medals_per_country_per_year.drop(columns=[\"Year\", \"NOC\"])\n    .groupby('Country').sum()\n    .reset_index()\n    .sort_values('Total', ascending=False)\n    )\n\ntotal_medals_all_time_long = total_medals_all_time.drop(columns='Total').melt(id_vars=\"Country\")\n\npx.bar(total_medals_all_time_long,\n        x=\"Country\", y=\"value\", color=\"variable\",\n        color_discrete_sequence=[\"orange\", \"silver\", \"gold\"]\n        )\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ntotal_medals_all_time = (\n    medals_per_country_per_year.drop(columns=[\"Year\", \"NOC\"])\n    .groupby('Country').sum()\n    .reset_index()\n    .sort_values('Total', ascending=False)\n    )\n\ntotal_medals_all_time_long = total_medals_all_time.drop(columns='Total').melt(id_vars=\"Country\")\n\ntotal_medals_all_time_long['Total'] = total_medals_all_time_long['value'].groupby(total_medals_all_time_long['Country']).transform('sum')\n\ntotal_medals_all_time_long['Percentage of Total'] = total_medals_all_time_long['value'] / total_medals_all_time_long['Total']\n\npx.bar(total_medals_all_time_long[total_medals_all_time_long['Country'].isin(total_medals_all_time_long.head(rows_to_display)['Country'].values)],\n       x=\"Country\", y=\"Percentage of Total\", color=\"variable\",\n       color_discrete_sequence=[\"orange\", \"silver\", \"gold\"],\n       title=f\"Breakdown of Medals by type - Top {rows_to_display} countries by total all-time medal count\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\ndistinct_athletes_per_year = athlete_statistics[['Name', 'Year','Country','Sex', 'Age', 'Height', 'Weight']].drop_duplicates()\n\nathlete_counts_by_sex_by_year = distinct_athletes_per_year.value_counts(['Sex', 'Year']).reset_index()\n\nathlete_counts_by_sex_by_year['total_athletes_both_sex_in_year'] = athlete_counts_by_sex_by_year['count'].groupby(athlete_counts_by_sex_by_year['Year']).transform('sum')\n\nathlete_counts_by_sex_by_year['Percentage of Athletes'] = athlete_counts_by_sex_by_year['count'] / athlete_counts_by_sex_by_year['total_athletes_both_sex_in_year']\n\npx.bar(athlete_counts_by_sex_by_year,\n       x=\"Year\", y=\"Percentage of Athletes\", color=\"Sex\",\n       title=f\"Change in Gender Split Over Time\")\n\n                                                \n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\n\nathlete_statistics = pd.read_csv(\"athlete_details_eventwise.csv\")\n\nselected_sport = \"Gymnastics\"\n\nathlete_statistics_sport = athlete_statistics[athlete_statistics[\"Sport\"] == selected_sport]\n\nevents_per_year_by_sport = (\n    athlete_statistics_sport[['Year', 'Event']]\n    .drop_duplicates()\n    .value_counts(['Year'])\n    .reset_index()\n)\n\npx.line(events_per_year_by_sport.sort_values(\"Year\"), x=\"Year\", y=\"count\",\n            markers=True, title=f\"{selected_sport} Events Per Olympics\",\n            range_x=[athlete_statistics.Year.min(), athlete_statistics.Year.max()])\n\n                                                \n\n\n\n\n\n\n\n48.2.4 Maps\nThe provided maps are imperfect due to the complexity of matching up country names across the olympic dataset and an unexplained bug affecting the colouring of certain countries in the interactive map.\nFor the purpose of the exercise, don’t worry about the slight issues with the map - the focus is just on displaying a map successfully within your dashboard.\n\nNumber of Medals by Location - Static MapNumber of Medals by Location - Interactive Map\n\n\n\nimport pandas as pd\nimport geopandas\nimport matplotlib.pyplot as plt\n\nselected_year = 2012\nselected_medal_type=\"Bronze\"\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ncountry_outlines = geopandas.read_file(\"countries_outlines.geojson\")\n\nmedals_per_country_per_year_gdf = pd.concat([\n    pd.merge(country_outlines, medals_per_country_per_year, left_on=\"id\", right_on=\"NOC\", how=\"inner\"),\n    pd.merge(country_outlines, medals_per_country_per_year, left_on=\"name\", right_on=\"Country\", how=\"inner\")\n]).drop_duplicates()\n\nfig, ax = plt.subplots(figsize=(15, 8))\nax = medals_per_country_per_year_gdf[medals_per_country_per_year_gdf[\"Year\"] == selected_year].plot(\n    \"Gold\", legend=True, ax=ax\n    )\nax.axis('off')\nplt.title(f\"Number of {selected_medal_type} Medals in {selected_year}\")\n\nText(0.5, 1.0, 'Number of Bronze Medals in 2012')\n\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport geopandas\nimport folium\n\nselected_year = 2012\nselected_medal_type=\"Bronze\"\n\nmedals_per_country_per_year = pd.read_csv(\"medals_per_country_per_year.csv\")\n\ncountry_outlines = geopandas.read_file(\"countries_outlines.geojson\")\n\nmedals_per_country_per_year_gdf = pd.concat([\n    pd.merge(country_outlines, medals_per_country_per_year, left_on=\"id\", right_on=\"NOC\", how=\"inner\"),\n    pd.merge(country_outlines, medals_per_country_per_year, left_on=\"name\", right_on=\"Country\", how=\"inner\")\n]).drop_duplicates()\n\n#create base map\nworld_map_medals = folium.Map(\n    location=[50.71671, -3.50668],\n    zoom_start=2,\n    tiles='cartodbpositron'\n    )\n\n# create and add choropleth map\nchoropleth = folium.Choropleth(\n    geo_data=medals_per_country_per_year_gdf[medals_per_country_per_year_gdf[\"Year\"] == selected_year], # dataframe with geometry in it\n    data=medals_per_country_per_year_gdf[medals_per_country_per_year_gdf[\"Year\"] == selected_year], # dataframe with data in - may be the same dataframe or a different one\n    columns=['name', 'Gold'], # [key (field for geometry), field to plot]\n    key_on='feature.properties.Country'\n    )\n\nchoropleth = choropleth.add_to(world_map_medals)\n\nchoropleth = choropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(\n        ['name', 'Gold'],\n        labels=True\n        )\n)\n\nworld_map_medals\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Exercise 3: Double Dash!!(boards)</span>"
    ]
  },
  {
    "objectID": "exercise_4_des_part_1.html",
    "href": "exercise_4_des_part_1.html",
    "title": "49  Exercise 4: Fulfil your DEStiny",
    "section": "",
    "text": "Below is a more advanced version of the discrete event simulation from HSMA session 2B.\n\n\n\n\n\n\nClick here to view and copy the starter code\n\n\n\n\n\n\nimport simpy\nimport random\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport re\n\n# Class to store global parameter values\nclass g:\n    # Inter-arrival times\n    patient_inter = 3\n    call_inter = 10\n\n    # Activity times\n    mean_reg_time = 2\n    mean_gp_time = 8\n    mean_book_test_time = 4\n    mean_call_time = 4\n\n    # Resource numbers\n    number_of_receptionists = 1\n    number_of_gps = 2\n\n    # Branch probabilities\n    prob_book_test = 0.25\n\n    # Simulation meta parameters\n    sim_duration = 480\n    number_of_runs = 10\n\n# Class representing patients coming in to the GP surgery\nclass Patient:\n    def __init__(self, p_id):\n        self.id = p_id\n        self.arrival_time = 0\n        self.q_time_reg = 0\n        self.q_time_gp = 0\n        self.time_with_gp = 0\n        self.q_time_book_test = 0\n        self.time_with_receptionist = 0.0\n\n# Class representing callers phoning the GP surgery\nclass Caller:\n    def __init__(self, c_id):\n        self.id = c_id\n        self.call_time = 0\n        self.time_with_receptionist = 0.0\n        self.q_time_call = 0\n\n# Class representing our model of the GP surgery\nclass Model:\n    # Constructor\n    def __init__(self, run_number):\n        # Set up SimPy environment\n        self.env = simpy.Environment()\n\n        # Set up counters to use as entity IDs\n        self.patient_counter = 0\n        self.caller_counter = 0\n\n        # Set up lists to store patient objects\n        self.patient_objects = [] ##NEW\n        self.caller_objects = [] ##NEW\n\n        # Set up resources\n        self.receptionist = simpy.Resource(\n            self.env, capacity=g.number_of_receptionists\n        )\n        self.gp = simpy.Resource(\n            self.env, capacity=g.number_of_gps\n        )\n\n        # Set run number from value passed in\n        self.run_number = run_number\n\n        # Set up DataFrame to store patient-level results\n        self.patient_results_df = pd.DataFrame()\n        self.patient_results_df[\"Patient ID\"] = [1]\n        self.patient_results_df[\"Arrival Time\"] = [0.0]\n        self.patient_results_df[\"Queue Time Reg\"] = [0.0]\n        self.patient_results_df[\"Time Seen For Registration\"] = [0.0]\n        self.patient_results_df[\"Queue Time GP\"] = [0.0]\n        self.patient_results_df[\"Time Seen By GP\"] = [0.0]\n        self.patient_results_df[\"Queue Time Book Test\"] = [0.0]\n        self.patient_results_df[\"Time Test Booking Started\"] = [0.0]\n        self.patient_results_df[\"Departure Time\"] = [0.0]\n        self.patient_results_df.set_index(\"Patient ID\", inplace=True)\n\n        # Set up DataFrame to store caller-level results\n        self.caller_results_df = pd.DataFrame()\n        self.caller_results_df[\"Caller ID\"] = [1]\n        self.caller_results_df[\"Call Start Time\"] = [0.0]\n        self.caller_results_df[\"Queue Time Call\"] = [0.0]\n        self.caller_results_df[\"Call Answered At\"] = [0.0]\n        self.caller_results_df[\"Call End Time\"] = [0.0]\n        self.caller_results_df.set_index(\"Caller ID\", inplace=True)\n\n        # Set up attributes that will store mean queuing times across the run\n        self.mean_q_time_reg = 0\n        self.mean_q_time_gp = 0\n        self.mean_q_time_book_test = 0\n        self.mean_q_time_call = 0\n\n        # Set up attributes used to monitor total resource usage\n        self.receptionist_utilisation_prop = 0.0\n        self.gp_utilisation_prop = 0.0\n\n    # Generator function that represents the DES generator for patient arrivals\n    def generator_patient_arrivals(self):\n        while True:\n            self.patient_counter += 1\n\n            p = Patient(self.patient_counter)\n            self.patient_objects.append(p) ##NEW\n\n            self.env.process(self.attend_gp_surgery(p))\n\n            sampled_inter = random.expovariate(1.0 / g.patient_inter)\n\n            yield self.env.timeout(sampled_inter)\n\n    # Generator function that represents the DES generator for caller arrivals\n    def generator_callers(self):\n        while True:\n            self.caller_counter += 1\n\n            c = Caller(self.caller_counter)\n            self.caller_objects.append(c) ##NEW\n\n            self.env.process(self.call_gp_surgery(c))\n\n            sampled_inter = random.expovariate(1.0 / g.call_inter)\n\n            yield self.env.timeout(sampled_inter)\n\n    # Generator function representing pathway for patients attending the GP\n    # surgery to see a GP\n    def attend_gp_surgery(self, patient):\n        # Registration activity\n        start_q_reg = self.env.now\n        self.patient_results_df.at[patient.id, \"Arrival Time\"] = (\n                start_q_reg\n            )\n\n        with self.receptionist.request() as req:\n            yield req\n\n            end_q_reg = self.env.now\n\n            patient.q_time_reg = end_q_reg - start_q_reg\n\n            self.patient_results_df.at[patient.id, \"Queue Time Reg\"] = (\n                patient.q_time_reg\n            )\n            self.patient_results_df.at[patient.id, \"Time Seen For Registration\"] = (\n                start_q_reg + patient.q_time_reg\n            )\n\n            sampled_reg_time = random.expovariate(\n                1.0 / g.mean_reg_time\n            )\n\n            patient.time_with_receptionist += sampled_reg_time\n\n            yield self.env.timeout(sampled_reg_time)\n\n        # GP Consultation activity\n        start_q_gp = self.env.now\n\n        with self.gp.request() as req:\n            yield req\n\n            end_q_gp = self.env.now\n\n            patient.q_time_gp = end_q_gp - start_q_gp\n\n            self.patient_results_df.at[patient.id, \"Queue Time GP\"] = (\n                patient.q_time_gp\n            )\n            self.patient_results_df.at[patient.id, \"Time Seen By GP\"] = (\n                start_q_gp + patient.q_time_gp\n            )\n\n            sampled_gp_time = random.expovariate(\n                1.0 / g.mean_gp_time\n            )\n\n            patient.time_with_gp += sampled_gp_time\n\n            yield self.env.timeout(sampled_gp_time)\n\n        # Branching path check to see if patient needs to book a test\n        if random.uniform(0,1) &lt; g.prob_book_test:\n            # Book test activity\n            start_q_book_test = self.env.now\n\n            with self.receptionist.request() as req:\n                yield req\n\n                end_q_book_test = self.env.now\n\n                patient.q_time_book_test = end_q_book_test - start_q_book_test\n\n                self.patient_results_df.at[patient.id, \"Queue Time Book Test\"] = (\n                    patient.q_time_book_test\n                )\n\n                self.patient_results_df.at[patient.id, \"Time Test Booking Started\"] = (\n                    start_q_book_test + patient.q_time_book_test\n                )\n\n                sampled_book_test_time = random.expovariate(\n                    1.0 / g.mean_book_test_time\n                )\n\n                patient.time_with_receptionist += sampled_book_test_time\n\n                yield self.env.timeout(sampled_book_test_time)\n\n            self.patient_results_df.at[patient.id, \"Departure Time\"] = (\n                self.env.now\n            )\n\n    # Generator function representing callers phoning the GP surgery\n    def call_gp_surgery(self, caller):\n        # Answering call activity\n        start_q_call = self.env.now\n        self.caller_results_df.at[caller.id, \"Call Start Time\"] = (\n                start_q_call\n            )\n\n        with self.receptionist.request() as req:\n            yield req\n\n            end_q_call = self.env.now\n\n            caller.q_time_call = end_q_call - start_q_call\n\n            self.caller_results_df.at[caller.id, \"Queue Time Call\"] = (\n                caller.q_time_call\n            )\n\n            self.caller_results_df.at[caller.id, \"Call Answered At\"] = (\n                self.env.now\n            )\n\n            sampled_call_time = random.expovariate(\n                1.0 / g.mean_call_time\n            )\n\n            caller.time_with_receptionist += sampled_call_time\n\n            yield self.env.timeout(sampled_call_time)\n\n            self.caller_results_df.at[caller.id, \"Call End Time\"] = (\n                self.env.now\n            )\n\n    # Method to calculate and store results over the run\n    def calculate_run_results(self):\n        self.mean_q_time_reg = self.patient_results_df[\"Queue Time Reg\"].mean()\n        self.mean_q_time_gp = self.patient_results_df[\"Queue Time GP\"].mean()\n        self.mean_q_time_book_test = (\n            self.patient_results_df[\"Queue Time Book Test\"].mean()\n        )\n\n        self.mean_q_time_call = self.caller_results_df[\"Queue Time Call\"].mean()\n\n        gp_utilisation_mins = sum([i.time_with_gp for i in self.patient_objects])\n\n        receptionist_utilisation_mins = sum(\n            [i.time_with_receptionist for i in self.patient_objects]\n            ) + sum(\n            [i.time_with_receptionist for i in self.caller_objects]\n            )\n\n        self.gp_utilisation_prop = (\n            gp_utilisation_mins / (g.number_of_gps * g.sim_duration)\n            )\n\n        self.receptionist_utilisation_prop = (\n            receptionist_utilisation_mins / (g.number_of_receptionists * g.sim_duration)\n        )\n\n\n    # Method to run a single run of the simulation\n    def run(self):\n        # Start up DES generators\n        self.env.process(self.generator_patient_arrivals())\n        self.env.process(self.generator_callers())\n\n        # Run for the duration specified in g class\n        self.env.run(until=g.sim_duration)\n\n        # Calculate results over the run\n        self.calculate_run_results()\n\n        return self.caller_results_df, self.patient_results_df\n\n# Class representing a trial for our simulation\nclass Trial:\n    # Constructor\n    def __init__(self):\n        self.df_trial_results = pd.DataFrame()\n        self.df_trial_results[\"Run Number\"] = [1]\n        self.df_trial_results[\"Mean Queue Time Reg\"] = [0.0]\n        self.df_trial_results[\"Mean Queue Time GP\"] = [0.0]\n        self.df_trial_results[\"Mean Queue Time Book Test\"] = [0.0]\n        self.df_trial_results[\"Mean Queue Time Call\"] = [0.0]\n        self.df_trial_results[\"GP Utilisation - Percentage\"] = [0.0]\n        self.df_trial_results[\"Receptionist Utilisation - Percentage\"] = [0.0]\n        self.df_trial_results.set_index(\"Run Number\", inplace=True)\n\n    # Method to calculate and store means across runs in the trial\n    def calculate_means_over_trial(self):\n        self.mean_q_time_reg_trial = (\n            self.df_trial_results[\"Mean Queue Time Reg\"].mean()\n        )\n        self.mean_q_time_gp_trial = (\n            self.df_trial_results[\"Mean Queue Time GP\"].mean()\n        )\n        self.mean_q_time_book_test_trial = (\n            self.df_trial_results[\"Mean Queue Time Book Test\"].mean()\n        )\n        self.mean_q_time_call_trial = (\n            self.df_trial_results[\"Mean Queue Time Call\"].mean()\n        )\n\n    # Method to run trial\n    def run_trial(self):\n        caller_dfs = []\n        patient_dfs = []\n\n        for run in range(1, g.number_of_runs+1):\n            my_model = Model(run)\n            caller_df, patient_df = my_model.run()\n            caller_df[\"Run\"] = run\n            caller_df[\"What\"] = \"Callers\"\n            patient_df[\"Run\"] = run\n            patient_df[\"What\"] = \"Patients\"\n\n            caller_dfs.append(caller_df)\n            patient_dfs.append(patient_df)\n\n            self.df_trial_results.loc[run] = [my_model.mean_q_time_reg,\n                                              my_model.mean_q_time_gp,\n                                              my_model.mean_q_time_book_test,\n                                              my_model.mean_q_time_call,\n                                              round(my_model.gp_utilisation_prop * 100, 2),\n                                              round(my_model.receptionist_utilisation_prop*100, 2)\n                                              ]\n\n        return self.df_trial_results.round(1), pd.concat(caller_dfs), pd.concat(patient_dfs)\n\n\n###########################################################\n# Run a trial using the parameters from the g class and   #\n# print the results                                       #\n###########################################################\n\ndf_trial_results, caller_results, patient_results = Trial().run_trial()\n\nprint(df_trial_results)\n\nprint(caller_results.sample(25))\n\nprint(patient_results.sample(25))\n\nprint(\"=== Receptionist Stats ===\")\n\nprint(f\"The median wait for registration across {g.number_of_runs} \" +\n      f\"was {df_trial_results['Mean Queue Time Reg'].median():.1f} minutes\")\n\nprint(f\"The median wait for booking a test \" +\n      f\"was {df_trial_results['Mean Queue Time Book Test'].median():.1f} minutes\")\n\nprint(f\"The median wait for callers to have their call answered \" +\n      f\"was {df_trial_results['Mean Queue Time Call'].median():.1f} minutes\")\n\nprint(f\"The median utilisation for a receptionist across {g.number_of_runs} \" +\n      f\"was {df_trial_results['Receptionist Utilisation - Percentage'].median()}%\")\n\nprint(\"=== GP Stats ===\")\n\nprint(f\"The median wait for a GP across {g.number_of_runs} \" +\n      f\"was {df_trial_results['Mean Queue Time GP'].median():.1f} minutes\")\n\n\nprint(f\"The median utilisation for a GP across {g.number_of_runs} \" +\n      f\"was {df_trial_results['GP Utilisation - Percentage'].median()}%\")\n\n###########################################################\n###########################################################\n# Create some summaries and visualisations for averages   #\n# across the trial                                        #\n###########################################################\n###########################################################\n\n# Let's set up a reusable sequence of colours that can give our plotly plots a consistent\n# feel/identity\n# This uses some colours from the NHS identity guidelines that should work well when\n# placed next to each other\n# https://www.england.nhs.uk/nhsidentity/identity-guidelines/colours/\n# If we pass this to something with just a single colour in the plot, it will just take the\n# first colour from the sequence (NHS Blue)\n# If we pass it to a plot that has categories, it will assign colours to categories\n# in the order given in this list\nnhs_colour_sequence = [\"#005EB8\", \"#FFB81C\", \"#00A499\", \"#41B6E6\", \"#AE2573\", \"#006747\"]\n\n##############################################\n# Bar plot - average waits per stage per run #\n##############################################\naverage_waits_fig = px.bar(\n    # First we need to get the dataframe into the shape needed by the plot\n    # We start by dropping the utilisation columns from our dataframe\n    # as they're on a very different scale to the wait times\n    df_trial_results.drop(\n        columns=[\"GP Utilisation - Percentage\",\n                 \"Receptionist Utilisation - Percentage\"])\n                 # We then reset the index of the plot so the run number is\n                 # a column rather than the index of the dataframe\n                 .reset_index(drop=False)\n                 # Finally, we use the melt function to turn this from a 'wide'\n                 # dataframe (where we have a column for each of the different measures)\n                 # to a 'long' dataframe where we have one row per run/metric combination.\n                 # After melting, our original column names will be in a column entitled\n                 # 'variable' and our actual wait times for each stage will be in a column\n                 # # called 'value'\n                 # (so a row might look like \"1, Mean Queue Time Reg, 87\" for the 'Run Number',\n                 # 'variable' and 'value' columns respectively)\n                 .melt(id_vars=\"Run Number\"),\n        x=\"value\", # What's on the horizontal axis - this is the number of minutes\n        y=\"Run Number\", # What's on the vertical axis\n        facet_col=\"variable\", # This will create a separate plot for each variable (here, the metric)\n        # Give the whole plot a title\n        title=\"Average Waits (Minutes) For Each Stage of the Patient Journey - by Run\",\n        orientation='h', # Set this to a horizontal bar plot (default is vertical)\n        labels={\"value\": \"Average Wait (Mins)\"}, # Make the label on the x axis nicer\n        # Use our NHS colour palette; only the first colour will be used as we haven't\n        # made use of colour as a part of the visualisation in this plot, but this does mean\n        # that the bars will use the standard NHS blue rather than the plotly one\n        color_discrete_sequence=nhs_colour_sequence\n        )\n\n# After we use the px.bar function to create our plot, there will be a few additional things\n# we want to do to the plot before displaying it. There is a limit to what can be done in\n# the original function call as there are only so many parameters - these little extra touches\n# just make the plot as readable and polished-looking as possible!\n\n# This will tidy up the subtitles of each 'facet' within our plot (the mini-graph relating)\n# to each of our metrics\n# This uses what's called a 'lambda' function, which is a little temporary function that in this case\n# iterates through the annotation text and replaces the string 'variable=' with an empty string,\n# which just tidies up the headers in this case so it only contains the actual name of the variable\naverage_waits_fig.for_each_annotation(lambda a: a.update(text=a.text.replace(\"variable=\", \"\")))\n\n# Here we are going to update the layout to ensure that we have a label for every run number in\n# our y axis\n# By default, plotly tries to intelligently choose a scale - but for this, it makes more sense to\n# include a label for every row (unless we have lots of runs, in which case we won't apply this\n# correction)\nif g.number_of_runs &lt; 20:\n    average_waits_fig.update_layout(yaxis = {'dtick': 1})\n\n# Finally, we force plotly to display the plot in the interactive window.\n# If we don't use this then only the final plotly plot we create will actually be displayed\naverage_waits_fig.show()\n\n##############################################\n# Bar plot - waits per stage per run         #\n##############################################\n\nperformance_per_run_fig = px.bar(\n    # First we need to get the dataframe into the shape needed by the plot\n    # We start by dropping the utilisation columns from our dataframe\n    # as they're on a very different scale to the wait times\n    df_trial_results.drop(\n        columns=[\"GP Utilisation - Percentage\",\n                 \"Receptionist Utilisation - Percentage\"])\n                 # We then reset the index of the plot so the run number is\n                 # a column rather than the index of the dataframe\n                 .reset_index(drop=False)\n                 # This time we use a lambda function (a small temporary function)\n                 # to look at each of our column names and replace the string\n                 # 'Mean Queue Time ' with a blank string, which we want to do here\n                 # as we're going to use those values as our x axis labels and it will\n                 # get cluttered and hard to read with that phrase used (and we can just make\n                 # it clear what each value is via other labels or the title)\n                 .rename(columns=lambda x: re.sub('Mean Queue Time ', '', x))\n                 # Finally, we reshape the dataframe from a wide to a long format\n                 # (see the first plot for more details on this)\n                 .melt(id_vars=\"Run Number\"),\n    # This time we're going to facet (make mini sub-plots) by run instead - we're aiming to\n    # end up with a mini-plot per run to look at the performance on a run level rather than\n    # in the previous plot where we had more ability to look at the performance against a\n    # single metric across multiple runs - so even though we're using the same data here,\n    # the focus of the plot is slightly different\n    facet_col=\"Run Number\",\n    facet_col_wrap=10, # Ensure that if we have lots of runs, our subplots don't become too small\n    x=\"variable\", # the column used for our horizontal axis\n    y=\"value\", # the column used for our vertical axis\n    # A title for the whole plot\n    title=\"Average Waits (Minutes) For Each Stage of the Patient Journey - by Run\",\n    # Make use of our NHS colour scheme (again, as this plot will only use a single colour, it just\n    # uses the first colour from the list which is the NHS blue)\n    color_discrete_sequence=nhs_colour_sequence,\n    # Finally we tidy up the labels, replacing 'variable' with a blank string (as it's very clear\n    # from the category labels and the other labels on the plot what is displayed there\n    labels={\"variable\": \"\",\n            \"value\": \"Queue Time (minutes)\"\n            })\n\n# We cycle through and tidy up the display of the subheaders for the subplots\nperformance_per_run_fig.for_each_annotation(\n    lambda a: a.update(text=a.text.replace(\"Run Number=\", \"Run \"))\n    )\n\n# This time, as we have multiple x axes in the overall plot (one per subplot) we need to use a\n# slightly different function to ensure every label will get displayed\nperformance_per_run_fig.for_each_xaxis(lambda xaxis: xaxis.update(dtick=1))\n\n# Display the plot\nperformance_per_run_fig.show()\n\n###############################################\n# Box plot - resource utilisation by resource #\n###############################################\n\nutilisation_boxplot_fig = px.box(\n    # First we need to get the dataframe into the shape needed by the plot\n    # We start by only selecting the utilisation columns by passing a list of\n    # the column names inside another set of square brackets\n    (df_trial_results[[\"GP Utilisation - Percentage\",\n                 \"Receptionist Utilisation - Percentage\"]]\n                 # once again we want the run number to be a column, not the index\n                 .reset_index(drop=False)\n                 # and once again we want it in long format (see the first plot for details)\n                 .melt(id_vars=\"Run Number\")),\n    x=\"value\", # Make our horizontal axis display the % utilisation of the resource in the run\n    y=\"variable\", # Make the y axis the utilisation category (will be our original column names)\n    points=\"all\", # Force the boxplot to actually show the individual points too, not just a summary\n    title=\"Resource Utilisation\", # Add a plot title\n    # Force the plot to start at 0 regardless of the lowest utilisation recorded\n    # and finish just past 100 so that the higher points can be seen\n    range_x=[0, 105],\n    # Again, use our NHS colour paletted - this will just use NHS blue (the first colour in the list)\n    color_discrete_sequence=nhs_colour_sequence,\n    # Tidy up the x and y axis labels\n    labels={\"variable\": \"\",\n            \"value\": \"Resource Utilisation Across Run (%)\"\n            }\n)\n\n# We don't need to do any additional tweaks to the plot this time - we can just display it\n# straight away\nutilisation_boxplot_fig.show()\n\n##############################################\n# Bar plot - resource utilisation per run    #\n##############################################\n\n# We're going to use the same data as for our boxplot, but we're more interested in looking\n# at the utilisation of resources within a single run rather than the consistency of resource\n# use of a particular resource type, which the boxplot is better at demonstrating\n# So once again - same data, different focus!\nutilisation_bar_fig = px.bar(\n    # First we need to get the dataframe into the shape needed by the plot\n    # We start by only selecting the utilisation columns by passing a list of\n    # the column names inside another set of square brackets\n    (df_trial_results[[\"GP Utilisation - Percentage\",\n                 \"Receptionist Utilisation - Percentage\"]]\n                 # once again we want the run number to be a column, not the index\n                 .reset_index(drop=False)\n                 # and once again we want it in long format (see the first plot for details)\n                 .melt(id_vars=\"Run Number\")),\n    x=\"Run Number\", # The value for our horizontal plot\n    y=\"value\", # What will be displayed on the vertical axis (here, utilisation %)\n    # This will colour the bars by a factor\n    # Here, because we melted our dataframe into long format, the values of the column 'variable'\n    # are the names of our original columns - i.e. \"GP Utilisation - Percentage\" or\n    # \"Receptionist Utilisation - Percentage\". We will automatically get a legend thanks to plotly.\n    color=\"variable\",\n    # Force the bars to display side-by-side instead of on top of each other (which wouldn't really\n    # make sense in this graph)\n    barmode=\"group\",\n    # Use our NHS colour palette - this time as we have two possible values in the column we coloured\n    # by, it will use the first two values in the colour palette (NHS blue and NHS warm yellow)\n    color_discrete_sequence=nhs_colour_sequence,\n    title=\"Resource Utilisation\",\n    labels={\"variable\": \"\", # Remove the legend header - it's clear enough without it\n            \"value\": \"Resource Utilisation Across Run (%)\" # tidy up our y-axis label\n            }\n)\n\n# Ensure the run label appears on the x axis for each run unless there are lots of them, in\n# which case we'll just leave the value of dtick as the default (which means plotly will choose\n# a sensible value for us)\nif g.number_of_runs &lt; 20:\n    utilisation_bar_fig.update_layout(xaxis = {'dtick': 1})\n\n# Show the bar plot\nutilisation_bar_fig.show()\n\n##############################################################\n###########################################################\n# Create some summaries and visualisations for call stats #\n###########################################################\n##############################################################\n\n##############################################\n# Dataframe - Call Answering Stats           #\n##############################################\n\n# It would be good to be able to display whether callers had their call answered or not - this\n# can give us a quick overview of whether the system has been particularly overloaded on different\n# runs. If a large number of callers never get their call answered, this suggests we need more\n# receptionists (as they are the ones dealing will registration, test booking and calls in\n# this model)\n\n# Adds a column for whether the call was answered\n# We use np.where as a bit of an 'if'/'case when' statement here\ncaller_results[\"Call Answered\"] = np.where(\n    # First, we check a condition - is the value in the 'call answered at' column\n    # NA/missing?\n    caller_results[\"Call Answered At\"].isna(),\n    # If it is, then it means we never recorded a 'call answered at' time because a receptionist\n    # resource never became free for this caller - so return the string below\n    \"Call Not Answered Before Closing Time\",\n    # If it is not na (i.e. the method .isna() returns False), then we can be confident that the\n    # call was answered\n    \"Call Answered\"\n    )\n\n# Now let's group by run, keep just our new 'call answered' column, and count how many calls per run\n# fell into each of these categories.\n# As the 'value_counts()' method returns a pandas series instead of a pandas dataframe, we need to\n# manually turn it back into a dataframe first\ncalls_answered_df = pd.DataFrame(\n    caller_results.groupby(\"Run\")[\"Call Answered\"].value_counts()\n# Finally, we reset the index (as due to grouping by 'Run' that will have been the index of\n# the new column we created, but for plotting and pivoting purposes it's easier if that's an\n# actual column instead)\n).reset_index(drop=False)\n\n# For display purposes, it would actually be easier to read if our dataframe was in 'wide' format -\n# which will mean that we have a column for 'call answered by closing time' and a column for\n# 'call not answered before closing time' and a row per run, with the cells then containing\n# the count of calls per run falling into each of those categories\n# We use the 'pivot' function for going from long to wide format\ncalls_answered_df_wide = calls_answered_df.pivot(\n    index=\"Run\", columns=\"Call Answered\", values=\"count\"\n    ).reset_index(drop=False)\n\n# Finally, let's display this dataframe\nprint(calls_answered_df_wide)\n\n##########################################################################\n# Stacked Bar Plot - Percentage of Calls Answered - by run              #\n##########################################################################\n\n# We can now use the long version of this dataframe to create a stacked bar plot\n# exploring the total number of calls received - and those not answered - within\n# the plot\ncalls_answered_fig = px.bar(\n    # we can just pass in our 'call_answered_df' without further modification\n    calls_answered_df,\n    x=\"Run\", # The run should be the x axis\n    y=\"count\", # The number of calls falling into each category should by the y axis\n    color=\"Call Answered\", # This time we colour the dataframe by whether the call was answered or not\n    # Tidy up the y axis label (x axis label and legend title are already fine)\n    labels={\"count\": \"Number of Calls\"},\n    # Pass in our colour sequence - the first category alphabetically will use colour 1,\n    # and the second category will use colour 2. If we had more categories, it would continue to\n    # make its way through the list of colours we defined\n    color_discrete_sequence=nhs_colour_sequence,\n    # Add a plot title\n    title=\"Number of Calls - How Many Were Answered in Opening Hours?\"\n)\n\n# Ensure each column has a number on the x axis (if there aren't too many runs)\nif g.number_of_runs &lt; 20:\n    calls_answered_fig.update_layout(xaxis = {'dtick': 1})\n\n# Show the plot\ncalls_answered_fig.show()\n\n##############################################\n# Strip Plot - Arrival Patterns              #\n##############################################\n\n# Finally, let's make a scatterplot that can help us to just check that the patterns of arrivals\n# across the day makes sense. Are the callers and patients arriving in an intermingled fashion\n# and do we have some of each?\n# This plot might be of more use for debugging than actually understanding the model behaviour -\n# although it can also be useful to demonstrate that the arrival times are not fixed across\n# the different runs, which can help people to understand the value and functioning of the model\n\n# We start by joining the patient and caller results together\ncalls_and_patients = pd.concat([\n        # we only want a few columns from each\n        patient_results[[\"Run\", \"Arrival Time\", \"What\"]],\n        # It's important that the columns are in the same order and have the same names\n        # as we are just going to stack them on top of each other\n        caller_results[[\"Run\", \"Call Start Time\", \"What\"]].rename(columns={\"Call Start Time\": \"Arrival Time\"})\n        ])\n\n# Here we are going to use something called a strip plot, which is a scatterplot (a plot with\n# a series of dots - but with some level of randomness on one axis to ensure points at exactly\n# the same position don't fully overlap)\narrival_fig = px.strip(\n    # We pass in the dataframe we just created\n    calls_and_patients,\n    # We place the points horizontally depending on the time the individual caller or patient\n    # arrived in the model\n    x=\"Arrival Time\",\n    # We then use the run number on the y axis, which will give us a line of points per run\n    y=\"Run\",\n    # We'll use the colour to distinguish between patients and callers\n    color=\"What\",\n    # We'll use our colour palette\n    color_discrete_sequence=nhs_colour_sequence,\n    # Finally, let's add a title\n    title=\"Patient Arrivals by Time\",\n    labels={\"Arrival Time\": \"Arrival Time (Simulation Minute)\"}\n)\n\n# Force the maximum amount of jitter (random offset) in the points\narrival_fig.update_traces(jitter=1.0)\n\n# Display the plot\narrival_fig.show()\n\n############################################################\n# Strip Plot - Call Answering by Arrival Time              #\n############################################################\n\n# We can also use a similar point to give an indication of at what point our system\n# starts to overload during each run.\n# Instead of displaying both patients and callers, we use just the callers this time\ncall_answered_detailed_fig = px.strip(\n    # We pass in the dataframe we just created\n    caller_results,\n    # We place the points horizontally depending on the time the individual caller or patient\n    # arrived in the model\n    x=\"Call Start Time\",\n    # We then use the run number on the y axis, which will give us a line of points per run\n    y=\"Run\",\n    # We'll use the colour to distinguish between patients and callers\n    color=\"Call Answered\",\n    # This time, instead of using our palette, let's explicitly map some colours to the possible\n    # values\n    # This allows us to ensure the 'not answered' gets associated with a typically 'bad' colour\n    color_discrete_map={\"Call Answered\": \"#005EB8\", # NHS blue\n                        \"Call Not Answered Before Closing Time\": \"#DA291C\"}, # NHS Red\n    # Finally, let's add a title\n    title=\"Patient Calls - Successful Answering over Time\",\n    # Make it clearer what the units of the x axis are\n    labels={\"Call Start Time\": \"Call Start Time (Simulation Minute)\"},\n)\n\ncall_answered_detailed_fig.show()\n\n##############################################################\n##############################################################\n# Create some summaries and visualisations for patient stats #\n##############################################################\n##############################################################\n\n\n# Not implemented - your code here!\n\n            Mean Queue Time Reg  Mean Queue Time GP  \\\nRun Number                                            \n1                          45.5                14.7   \n2                          88.2                16.8   \n3                          32.4                10.3   \n4                          49.4                39.3   \n5                          75.1                11.4   \n6                          39.4                62.2   \n7                          35.0                26.1   \n8                          86.0                19.9   \n9                          80.0                15.3   \n10                         77.0                15.1   \n\n            Mean Queue Time Book Test  Mean Queue Time Call  \\\nRun Number                                                    \n1                                48.2                  40.6   \n2                                83.4                  67.4   \n3                                32.1                  26.4   \n4                                44.5                  41.7   \n5                                68.2                  79.8   \n6                                42.7                  35.2   \n7                                33.2                  37.3   \n8                                86.3                  87.1   \n9                                84.6                  74.2   \n10                               92.8                  71.7   \n\n            GP Utilisation - Percentage  Receptionist Utilisation - Percentage  \nRun Number                                                                      \n1                                  78.4                                  101.9  \n2                                  80.9                                   97.8  \n3                                  79.5                                   94.9  \n4                                  97.2                                  100.7  \n5                                  85.9                                  100.2  \n6                                  88.4                                  101.0  \n7                                 100.0                                   91.8  \n8                                  90.9                                  101.7  \n9                                  89.9                                  101.6  \n10                                 95.7                                  100.9  \n           Call Start Time  Queue Time Call  Call Answered At  Call End Time  \\\nCaller ID                                                                      \n30              248.113914       147.610748        395.724662     396.374538   \n42              418.342606              NaN               NaN            NaN   \n18              138.240711        63.217732        201.458444     213.084370   \n35              290.881716       180.338975        471.220691            NaN   \n32              335.261954        85.815656        421.077609     421.737290   \n41              384.602909              NaN               NaN            NaN   \n30              294.139502       149.313591        443.453093     445.236073   \n18              142.273665        68.014411        210.288076     211.473237   \n31              303.136543       145.168621        448.305163     448.808862   \n16              169.026992        38.513815        207.540806     210.058475   \n22              142.505120        34.119041        176.624161     177.502798   \n15              136.446688        79.002559        215.449248     228.287026   \n7                23.787635        25.177202         48.964837      54.592505   \n37              392.626420              NaN               NaN            NaN   \n13               61.348428        29.423569         90.771997      92.573918   \n29              264.426530        48.183236        312.609766     324.950099   \n40              439.407017              NaN               NaN            NaN   \n20              191.988314        87.122367        279.110681     291.906180   \n26              253.260860        32.469551        285.730411     286.224899   \n23              201.547212       110.268954        311.816165     314.155149   \n13              171.694695        27.832111        199.526806     199.560988   \n22              263.512239        38.997783        302.510022     303.074596   \n34              302.260165        88.391769        390.651934     398.060744   \n13              107.067255        13.437313        120.504568     136.863170   \n36              315.640472       107.742779        423.383251     434.328324   \n\n           Run     What  \nCaller ID                \n30           8  Callers  \n42           9  Callers  \n18           9  Callers  \n35           8  Callers  \n32           7  Callers  \n41           8  Callers  \n30           9  Callers  \n18           2  Callers  \n31           9  Callers  \n16           4  Callers  \n22           1  Callers  \n15           5  Callers  \n7            6  Callers  \n37          10  Callers  \n13           1  Callers  \n29           1  Callers  \n40           6  Callers  \n20          10  Callers  \n26           3  Callers  \n23          10  Callers  \n13           7  Callers  \n22           7  Callers  \n34           1  Callers  \n13           3  Callers  \n36           1  Callers  \n            Arrival Time  Queue Time Reg  Time Seen For Registration  \\\nPatient ID                                                             \n121           323.447074      143.637452                  467.084527   \n102           334.524779      102.888471                  437.413249   \n46            118.218869       58.180800                  176.399669   \n12             40.059492        0.104476                   40.163968   \n12             34.561710       21.007952                   55.569662   \n101           327.125648      107.955682                  435.081330   \n72            262.478039       29.794137                  292.272176   \n114           303.483708      103.247396                  406.731104   \n36            108.932734       26.694389                  135.627123   \n48            165.327978       34.387488                  199.715465   \n121           418.162169             NaN                         NaN   \n9              11.577874       23.653732                   35.231606   \n119           311.828635      149.186728                  461.015363   \n157           398.387904             NaN                         NaN   \n73            172.575877      100.349854                  272.925732   \n10             52.668241       27.538221                   80.206462   \n39            118.106875       62.721440                  180.828315   \n106           290.572257      144.244183                  434.816440   \n13             44.396754        0.000000                   44.396754   \n29             86.910950        4.200152                   91.111102   \n69            253.953226       32.271672                  286.224899   \n40            108.800744       31.024346                  139.825089   \n22             62.203919       42.314680                  104.518599   \n77            216.681882      111.877343                  328.559225   \n159           467.026961             NaN                         NaN   \n\n            Queue Time GP  Time Seen By GP  Queue Time Book Test  \\\nPatient ID                                                         \n121                   NaN              NaN                   NaN   \n102             22.946824       461.127947                   NaN   \n46              52.343690       228.832343                   NaN   \n12              11.979521        52.575781                   NaN   \n12               8.259242        65.350479                   NaN   \n101             16.446770       453.860019                   NaN   \n72               6.735838       302.971235             55.038259   \n114             69.342209       476.885365                   NaN   \n36               0.000000       136.075333             34.440454   \n48              25.844837       228.316352             25.085723   \n121                   NaN              NaN                   NaN   \n9                5.999701        42.705443             10.087735   \n119                   NaN              NaN                   NaN   \n157                   NaN              NaN                   NaN   \n73               4.926593       282.391909            139.005580   \n10               0.000000        83.498052             27.247198   \n39              36.411072       217.280320            124.399782   \n106             39.314274       474.868627                   NaN   \n13              27.282890        73.779496                   NaN   \n29              37.987128       129.344060             17.139639   \n69               4.222131       292.587953                   NaN   \n40              11.771503       151.621582                   NaN   \n22              11.770153       117.557071                   NaN   \n77              15.693818       345.724145                   NaN   \n159                   NaN              NaN                   NaN   \n\n            Time Test Booking Started  Departure Time  Run      What  \nPatient ID                                                            \n121                               NaN             NaN    5  Patients  \n102                               NaN             NaN   10  Patients  \n46                                NaN             NaN    8  Patients  \n12                                NaN             NaN    2  Patients  \n12                                NaN             NaN    5  Patients  \n101                               NaN             NaN   10  Patients  \n72                         361.310513      369.559344    3  Patients  \n114                               NaN             NaN    4  Patients  \n36                         172.725841      177.112052    4  Patients  \n48                         254.535309      257.287608    1  Patients  \n121                               NaN             NaN    3  Patients  \n9                           73.766843       76.690197    9  Patients  \n119                               NaN             NaN    9  Patients  \n157                               NaN             NaN    5  Patients  \n73                         423.233923      428.433851    9  Patients  \n10                         119.421409      121.444161    1  Patients  \n39                         345.726168      347.835051   10  Patients  \n106                               NaN             NaN    9  Patients  \n13                                NaN             NaN    7  Patients  \n29                         147.257476      147.349583    7  Patients  \n69                                NaN             NaN    3  Patients  \n40                                NaN             NaN    9  Patients  \n22                                NaN             NaN    8  Patients  \n77                                NaN             NaN    8  Patients  \n159                               NaN             NaN    2  Patients  \n=== Receptionist Stats ===\nThe median wait for registration across 10 was 62.2 minutes\nThe median wait for booking a test was 58.2 minutes\nThe median wait for callers to have their call answered was 54.6 minutes\nThe median utilisation for a receptionist across 10 was 100.80000000000001%\n=== GP Stats ===\nThe median wait for a GP across 10 was 16.1 minutes\nThe median utilisation for a GP across 10 was 89.15%\nCall Answered  Run  Call Answered  Call Not Answered Before Closing Time\n0                1             39                                     15\n1                2             34                                     15\n2                3             39                                      5\n3                4             29                                     15\n4                5             38                                     16\n5                6             37                                      7\n6                7             35                                     13\n7                8             35                                     15\n8                9             35                                     10\n9               10             33                                     14\n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n                                                \n\n\n\n\n\nYour task is to create an app for running this.\nI’ve updated this code slightly to add in some extra logging steps that will give you more potential for plots.\nAdapt this code into a Streamlit app.\n\nFor now I’d recommend copying the DES code into your app. Importing it is a little more complex and covered in the next part!\n\nYour app should allow people to change\n\nThe patient inter-arrival time\nThe call inter-arrival time\nThe mean activity times for registration, GP consults, booking tests and calls\nThe number of receptionists and GPs\nThe probability of booking tests\nThe simulation duration (in minutes or days)\nThe number of simulation runs\n\nYou can place these parameters anywhere (e.g. main screen, sidebar). Try to make it so that the model does not run without a button being pressed.\nIt should then display some (or all) of the charts and summary values from the original file\nYou can also explore some additional ways to enhance your app.\n\nMake use of columns, tabs, expanders, subheadings and dividers to change how your inputs and outputs are displayed.\nCreate some additional plots in plotly express (or your preferred plotting library), or enhance the given plots\n\nTry thinking about how you might indicate to users what is a ‘good’ model run or a ‘bad’ model run\n\nAdd buttons to download each table as a csv\n\nNote that there’s a limitation of streamlit that will result in your app reloading each time you click the button - we’ll demonstrate a new feature that also helps fix this issue in the next part!",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Exercise 4: Fulfil your DEStiny</span>"
    ]
  },
  {
    "objectID": "exercise_5_des_part_2_multipage.html",
    "href": "exercise_5_des_part_2_multipage.html",
    "title": "50  Exercise 5: DEStiny’s Child",
    "section": "",
    "text": "50.1 Bonus Tasks",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Exercise 5: DEStiny's Child</span>"
    ]
  },
  {
    "objectID": "exercise_5_des_part_2_multipage.html#bonus-tasks",
    "href": "exercise_5_des_part_2_multipage.html#bonus-tasks",
    "title": "50  Exercise 5: DEStiny’s Child",
    "section": "",
    "text": "Add the HSMA logo to your app (it’s provided in the exercise_2 folder)\nCreate a custom colourscheme for your app using a config.toml file in a .streamlit subfolder\nImport the file style.css into your app to change the font of your app",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Exercise 5: DEStiny's Child</span>"
    ]
  },
  {
    "objectID": "exercise_6_des_part_3_advanced_streamlit.html",
    "href": "exercise_6_des_part_3_advanced_streamlit.html",
    "title": "51  Exercise 6: DESpite Everything, It’s Still You",
    "section": "",
    "text": "51.1 Tasks",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Exercise 6: DESpite Everything, It’s Still You</span>"
    ]
  },
  {
    "objectID": "exercise_6_des_part_3_advanced_streamlit.html#tasks",
    "href": "exercise_6_des_part_3_advanced_streamlit.html#tasks",
    "title": "51  Exercise 6: DESpite Everything, It’s Still You",
    "section": "",
    "text": "The LSOA demographics file that new app loads in is really big!\n\nSwitch to loading it in using the @st.cache_data decorator\n\nThere’s a long-running calculation in the second half of that page that isn’t anything to do with the map.\n\nUse the @st.fragment decorator so that changing the parameters of the map doesn’t trigger this calculation to rerun\n\nAdd this new app as an extra page in your multipage DES app from the previous exercise\nUse session state to save the caller and patient IAT figures from that new page\n\nthen remove the ability for the user to specify the IAT for callers and patients\nreplace the IAT used for the simulation with the IAT that you saved into the session state\n\n\n\n51.1.1 Challenge Activity\nTry saving some key outputs from each model run to the session state and use this to display a comparison of the outputs across these multiple runs",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Exercise 6: DESpite Everything, It’s Still You</span>"
    ]
  },
  {
    "objectID": "exercise_7_deployment.html",
    "href": "exercise_7_deployment.html",
    "title": "52  Exercise 7: Take Me To The Clouds Above",
    "section": "",
    "text": "The final task of the day is deploying an app.\n\nCreate a new repository and upload one of the apps you’ve created in the last few sessions to Github using the skills from session 7A (or borrow the sample app from the exercise_4 folder)\nDeploy your app to the streamlit community cloud\n\nRemember to include a requirements.txt file\n\nShare your link in your PSG channel\n\nIf you finish this,\n\nTry uploading some more apps\nGo back to any exercises you want to spend more time on\nOr start building an app of your choice!",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Exercise 7: Take Me To The Clouds Above</span>"
    ]
  },
  {
    "objectID": "cheat_sheet.html",
    "href": "cheat_sheet.html",
    "title": "54  Streamlit Cheat Sheet",
    "section": "",
    "text": "There is a custom HSMA cheatsheet here:\nhttps://command-overview-app-hsma.streamlit.app/\n\nThe fantastic Streamlit Cheat Sheet is well worth bookmarking!\nhttps://cheat-sheet.streamlit.app/",
    "crumbs": [
      "Additional Resources",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Streamlit Cheat Sheet</span>"
    ]
  }
]