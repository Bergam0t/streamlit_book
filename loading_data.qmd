---
title: "Loading Data"
filters:
  - whitphx/stlite
---

Streamlit apps are just like standard Python scripts in a lot of ways.

This means that most of the standard methods we are used to for loading in data files will work!

As people working with data, much of what we want to load in is likely to be is data in a tabular format, like an Excel file or Google Sheet.

Let's start by loading in and displaying a simple csv dataset.

:::{.callout-tip}
`st.write()` is a handy command.

When you pass a variable to it, it will automatically work out a good way to display it.

Other functions that we talk about in later chapters give you more control over exactly how data or files are displayed - but `st.write()` can often be a useful starting point.
:::

```{python}
#| eval: false
import pandas as pd
import streamlit as st

st.title("Loading in a data file from a publically-accessible csv")

url = 'https://files.catbox.moe/eor4ta.csv'
dataframe = pd.read_csv(url)

st.write(dataframe)

```

```{stlite-python}

import pandas as pd
import streamlit as st

st.title("Loading in a data file from a publically-accessible csv")

url = 'https://files.catbox.moe/eor4ta.csv'
dataframe = pd.read_csv(url)

st.write(dataframe)

```


:::{.callout-note}
In later chapters, we will learn more about loading in data, including

- allowing users to upload their own data
- 'caching' data to prevent it being reloaded unnecessarily
:::

:::{.callout-tip}
The focus of this book is on giving you the tools to create simple Streamlit apps. For this, we will mainly focus on using csv files that are stored on the web or locally, or are uploaded by users. In other cases, we will look at data that is generated by simply running the app, as in the case of discrete event simulation apps where the act of running it produces the data for the graphs and tables that we want to analyse!

However, in real-world usage, there may be some instances where connecting to a database may be required to allow automated access to data without requiring it to be passed to the app, rather than relying on intermediate exports to formats like csv from the database.

Connecting directly to a production database is certainly possible and can be done safely and securely - but beyond the scope of this book.

**If this is your first time working with streamlit, it is highly recommended to work through the book first to learn the core concepts of streamlit apps. Building a proof of concept version of your app with a .csv export or dummy dataset can be done before worrying about the task of connecting to a data source - and often a good proof of concept will provide the motivation within your organisation to unblock the things that may make connecting to data sources difficult!**

Streamlit does provide tools and guidance around connecting to data sources for apps that are going into production; to learn more about connecting to other data sources, like SQL databases, you can take a look at [this page from the streamlit documentation](https://docs.streamlit.io/develop/concepts/connections/connecting-to-data).

[This page](https://docs.streamlit.io/develop/tutorials/databases) gives an overview of how to connect to a range of different SQL database types, public and private google sheets, and more.

:::
